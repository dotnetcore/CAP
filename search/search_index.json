{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CAP","text":"<p>CAP is a library based on .net standard, which is a solution to deal with distributed transactions, also has the function of EventBus, it is lightweight, easy to use, and efficient.</p>"},{"location":"#introduction","title":"Introduction","text":"<p>In the process of building an SOA or MicroService system, we usually need to use the event to integrate each service. In the process, simple use of message queue does not guarantee reliability. CAP adopts local message table program integrated with the current database to solve exceptions that may occur in the process of the distributed system calling each other. It can ensure that the event messages are not lost in any case.</p> <p>You can also use CAP as an EventBus. CAP provides a simpler way to implement event publishing and subscriptions. You do not need to inherit or implement any interface during subscription and sending process.</p> <p>CAP implements the Outbox Pattern described in the eShop ebook</p> <p></p> <p>Atomicity when publishing events to the event bus with a worker microservice</p> <p>For detailed instructions see the Getting Started Guide.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>One of the easiest ways to contribute is to participate in discussions and discuss issues. You can also contribute by submitting pull requests with code changes.</p> <p>If you have any question or problems, please report them on the CAP repository:</p> <p> Report Issue  Active Issues </p>"},{"location":"#license","title":"License","text":"<p>CAP is licensed under the MIT license.</p>"},{"location":"about/contact-us/","title":"Contact Us","text":""},{"location":"about/contact-us/#authors","title":"Authors","text":"<ul> <li>Author: @yang-xiaodong</li> <li>Email: yangxiaodong1214@126.com</li> <li>Blogs: https://savorboard.cnblogs.com</li> </ul>"},{"location":"about/contact-us/#ncc-organization","title":"NCC Organization","text":"<ul> <li>Email: dotnetcn@outlook.com</li> <li>Twitter: https://twitter.com/ncc_community</li> <li>Weibo: https://weibo.com/dotnetcore</li> </ul>"},{"location":"about/license/","title":"License","text":"<p>MIT License</p> <p>Copyright \u00a9 2016 - 2024 Savorboard</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"about/release-notes/","title":"Release Notes","text":""},{"location":"about/release-notes/#version-820-jun-23-2024","title":"Version 8.2.0 (Jun 23, 2024)","text":"<p>Features: - Add support CustomHeadersBuilder option for NATS. (#1519) - Add GroupConcurrent option for [CapSubscribe] to support subscriber concurrent execution. (#1537) - Add option for controlling reponse from CapHeader. (#1541) - Improvements to the \"EnablePublishParallelSend\" option to \"true\" will put tasks into the .NET thread pool in batches. (#1540)</p> <p>Bug Fixed: - Fixed issue where CapTransaction was not disposed when the transaction failed for Sql Server. (#1521) - Fixed NATS reconnection publish issue after restarting server. (#1542)</p> <p>What's Changed: - Upgrade dashboard npm package to vue2 latest minor version. - Upgrade Ngpsql to 8.0.3 to fix \"Npgsql vulnerable to SQL Injection via Protocol Message Size Overflow\". - Simplify code using deconstruction. by @xiangxiren in #1533</p>"},{"location":"about/release-notes/#version-812-may-7-2024","title":"Version 8.1.2 (May 7, 2024)","text":"<p>Bug Fixed: * Fixed publish exception when event outside of transaction finishing scope. (#1521) Thanks @NikolozGob * Fixed PublishDelay synchronization method did not wait internally.</p>"},{"location":"about/release-notes/#version-811-apr-21-2024","title":"Version 8.1.1 (Apr 21, 2024)","text":"<p>Features: - Add more granular option for AzureServiceBus. (#1514) - Add new options SubscriberParallelExecuteThreadCount,SubscriberParallelExecuteBufferFactor to better support parallel execte subscriber. (#1513) - Delete obsolete option CustomerHeader.</p>"},{"location":"about/release-notes/#version-800-dec-14-2023","title":"Version 8.0.0 (Dec 14, 2023)","text":"<p>Breaking Changes Removed <code>DefaultAuthenticationScheme</code>, <code>UseChallengeOnAuth</code>, <code>DefaultChallengeScheme</code> and <code>AuthorizationPolicy</code> options of DotNetCore.CAP.Dashboard. Now CAP dashboard auth/authz mechanism to leverage the \"ASP.NET Core\" way of doing it, see #1428.</p> <ul> <li>Streamlined auth via asp.net middlewares. (#1434) Thanks @mviegas</li> </ul> <p>Features:</p> <ul> <li>Fully Support .NET 8.</li> <li>Add <code>FallbackWindowLookbackSeconds</code> option to configure the retry processor to pick up the backtrack time window for Scheduled or Failed status messages. (#1455) Thanks @apatozi</li> <li>Update IConsumerRegister.Default.cs to make dispose thread safe. (#1438) Thanks @blashbul</li> <li>Compatible with .NET 8's dependency injection KeyedService. (#1436) Thanks @EashShow</li> <li>Add virtual method to custom delay backtrack time window during delayed publishing large messges. (#1429) Thanks @PoteRii</li> </ul> <p>Bug Fixed:</p> <ul> <li>Fixed message infinite retry of messages after subscriber is removed. (#1456) Thanks @bschwehn</li> <li>Fixed open telemetry context lost on consumer retry and Baggage Propagation. (#1452) Thanks @bschwehn</li> <li>Fixed NATS do not handle reconnect if the nats server is forcibly shutdown and then restarted. (#1449) Thanks @davidterins</li> <li>Fixed outbox pattern messages does not recovery when using DotNetCore.CAP.InMemoryStorage. (#1439) Thanks @davidterins</li> <li>Fixed open telemetry subscriber thows null reference when using azure service bus without connection string. (#1432) Thanks @demorgi</li> <li>Fixed double registration of event handler for azure service bus. (#1427) Thanks @demorgi</li> <li>Fixed publish delay message not working in sql server transaction. (#1422) Thanks @xiangxiren</li> </ul>"},{"location":"about/release-notes/#version-722-nov-1-2023","title":"Version 7.2.2 (Nov 1, 2023)","text":"<p>Features:</p> <ul> <li>NATS support consumer config DeliverPolicy, default to New. (#1404)</li> <li>Be able to configure if to subscribe to custom producer topic. (#1409)  @demorgi</li> </ul> <p>Bug Fixed:</p> <ul> <li>Try to fixes RabbitMQ basicConsume TimeOutException. (#1405) @yang-xiaodong</li> <li>Change MongoDb index from descending to ascending. (#1415) Thanks @ustaserdar</li> <li>Fixed parent span for \"Event Persistence\" activity trace. (#1407) Thanks @blashbul</li> <li>Fixed OpenTelemetry Dynatrace IsRemote flag. (#1402) Thanks @phmonte</li> <li>Mark Mongo time serialized to local instance time by default. (#1400) </li> <li>Fixed k8s dashboard meta query error in standalone mode. @yang-xiaodong</li> <li>Azure Service Bus, consumer fails if subscription has session enabled. (#1396, #1397)  Thanks @demorgi</li> </ul>"},{"location":"about/release-notes/#version-721-sep-8-2023","title":"Version 7.2.1 (Sep 8, 2023)","text":"<p>Features:</p> <ul> <li>The options <code>EnableConsumerPrefetch</code> and <code>UseDispatchingPerGroup</code> will work together without interference. (#1399)</li> </ul> <p>Bug Fixed:</p> <ul> <li>Fixed SqlServer sql case sensitive in dashboard query.  (#1389)</li> <li>Fixed Redis endpoint is null in DotNetCore.CAP.OpenTelemetry. (#1384)</li> </ul>"},{"location":"about/release-notes/#version-720-jul-30-2023","title":"Version 7.2.0 (Jul 30, 2023)","text":"<p>Breaking Changes</p> <ul> <li>Remove <code>ProducerThreadCount</code> configuration option. Now automatically send task managed by the .NET thread pool. (#1380)</li> <li>Change the SnowflakeId from static singleton to dependency injection singleton. (#1322)</li> </ul> <p>Features:</p> <ul> <li>Add support for kubernetes discovery in dashboard. (#1362) </li> <li>Message send task and consumer execute task managed by .net thread pool. (#1380)</li> <li>Upgrade dependencies of NuGet packages.</li> </ul> <p>Bug Fixed:</p> <ul> <li>Fixed BasicQosOptions not working as expected for RabbitMQ transport. (#1318)</li> <li>Revert BeginTransactionAsync support. (#1376)</li> <li>Fixed SqlServer transaction rollback message still sent out.  (#1378)</li> <li></li> </ul>"},{"location":"about/release-notes/#version-714-jun-17-2023","title":"Version 7.1.4 (Jun 17, 2023)","text":"<p>Features:</p> <ul> <li>Add suppport <code>AutoDeleteOnIdle</code> option for Azure Service Bus. (#1350) Thanks @StevenDevooght</li> </ul> <p>Bug Fixed:</p> <ul> <li>Keep the originall stack when consumer exception occurs. (#1341) Thanks @tomyangOK</li> <li>Fixed multiple invocations caused when the retry processor exceeded the <code>FailedRetryInterval</code>. (#1359) Thanks @li-zheng-hao</li> <li>Fixed thread blocking when enable <code>UseDispatchingPerGroup</code> option. (#1356) Thanks @sampsonye @li-zheng-hao</li> <li></li> </ul>"},{"location":"about/release-notes/#version-713-may-17-2023","title":"Version 7.1.3 (May 17, 2023)","text":"<p>Features:</p> <ul> <li>Allow Explicit to set AllowAnonymous for the dashboard API. (#1335)</li> <li>Update dashboard UI style</li> <li>Add Cancellation token for BeginTransactionAsync. (#1317)  Thanks @denis-tsv</li> </ul> <p>Bug Fixed:</p> <ul> <li>Fixed postgresql AcquireLockAsync sql error. (#1320) Thanks @guochen2</li> <li>Fixed redis transport order pool connections non-lazy created connections. (#1332) Thanks @MahmoudSamir101</li> <li>Fixed mysql 8.0 storage skip locked not available bug. (#1330) Thanks @yang-xiaodong</li> </ul>"},{"location":"about/release-notes/#version-712-apr-25-2023","title":"Version 7.1.2 (Apr 25, 2023)","text":"<p>Bug Fixed:</p> <ul> <li>Optimizing consumer duplicate detection warning logs. (#1314)</li> <li>Fixes NATS consumption repeat when multiple consumer threads.</li> <li>Fixes NATS transport infinity reconnect race condition. (#1311)</li> </ul>"},{"location":"about/release-notes/#version-711-apr-7-2023","title":"Version 7.1.1 (Apr 7, 2023)","text":"<p>Features:</p> <ul> <li>Add support topic config for kafka. (#1303)</li> <li>Log in to dashboard with JWT authentication. (#1306) </li> </ul> <p>Bug Fixed:</p> <ul> <li>Fixed sqlserver character string convert to datetime2 exception. (#1302)</li> <li>Fixed dashboard consul node proxy switch bug. (#1307)</li> </ul>"},{"location":"about/release-notes/#version-710-mar-5-2023","title":"Version 7.1.0 (Mar 5, 2023)","text":"<p>Features:</p> <ul> <li>Add option to support distributed locks for retry processor. (#1272) Thanks @li-zheng-hao</li> <li>Add option to support set BasicQos for RabbitMQ. (#1267) Thanks @nunorelvao</li> <li>Add option to set queue type for RabbitMQ. (#1281) Thanks @PaulCousinsTTEducation</li> <li>Add support publish to mutiple topics for Azure Service Bus. (#1283) Thanks @jonekdahl @mviegas</li> </ul> <p>Bug Fixed:</p> <ul> <li>Fixed dashboard re-execute message throw null exception for MongoDB. (#1279) Thanks @cagataykiziltan</li> </ul>"},{"location":"about/release-notes/#version-703-feb-2-2023","title":"Version 7.0.3 (Feb 2, 2023)","text":"<p>Features:</p> <ul> <li>Add SQL Filters option on topic subscribtion for AzureServiceBus. (#1263) Thanks @giorgilekveishvili-meama</li> <li>Add EF BeginTransaction extensions overload with isolationlevel and async version. (#1266) @xshaheen</li> </ul> <p>Bug Fixed:</p> <ul> <li>Fixed dashboard re-execute message throw null exception for SqlServer and Postgres. (#1259) Thanks @coolyuwk</li> </ul>"},{"location":"about/release-notes/#version-702-jan-9-2023","title":"Version 7.0.2 (Jan 9, 2023)","text":"<p>Features:</p> <ul> <li>Change AzureServiceBus nuget package from Microsoft.Azure.ServiceBus to Azure.Messaging.ServiceBus. (https://github.com/dotnetcore/CAP/pull/1253)</li> </ul> <p>Bug Fixed:</p> <ul> <li>Fixed redis streams json serialize exception. (#1254)</li> <li>Fixed dashboard route in balzor server app. (not support wasm) (#1244)</li> </ul>"},{"location":"about/release-notes/#version-701-2022-12-16","title":"Version 7.0.1 (2022-12-16)","text":"<p>Bug Fixed:</p> <ul> <li>Fixed dashboard not working in balzor app. (#1244)</li> <li>Fixed error when published Winform with 'Produce Single File'. (#1245)</li> </ul>"},{"location":"about/release-notes/#version-700-2022-11-27","title":"Version 7.0.0 (2022-11-27)","text":"<p>Breaking Changes:</p> <ul> <li><code>SubscribeFilter</code> method to asynchronous.</li> <li><code>IConsumerClient</code> interface <code>OnMessage</code> and <code>OnLog</code> is from event to delegate.</li> </ul> <p>Features:</p> <ul> <li>Performance improvement</li> <li>Add support publish delay message. (#1237)</li> <li>Dashbord support viewing and immediately publish for delayed messages.</li> <li>Add support for metrics diagnostics. (#1230)</li> <li>Dashboard support real-time metric graph viewing.</li> <li>Add support manual start/stop CAP process. (#1238)</li> <li>Add EnableConsumerPrefetch option of consumer. (#1240)</li> <li>Add PublishConfirms options for RabbitMQ.</li> </ul> <p>Others:</p> <ul> <li>Change framework target from netstandard to net6.</li> <li>Upgrade NuGet to the latest version.</li> </ul> <p>Bug Fixed:</p> <ul> <li>RabbitMQ cluster connection failed without using default ports. (#1232)</li> </ul>"},{"location":"about/release-notes/#version-621-2022-10-15","title":"Version 6.2.1 (2022-10-15)","text":"<p>Bug Fixed:</p> <ul> <li>Fixed EnvironmentVariableTarget.Machine only supported on windows. (#1220) Thanks @cuibty</li> <li>Fixed RedisStream TryGetOrCreateStreamGroupAsync to create ConsumerGroup when not found. (#1212) Thanks @mlatoszek</li> </ul>"},{"location":"about/release-notes/#version-620-2022-09-19","title":"Version 6.2.0 (2022-09-19)","text":"<p>Features:</p> <ul> <li>Add Chinese support for dashboard localization.  (#1157)  Thanks @tetris1128</li> <li>Make DbTransaction property virtual for extend of CapTransactionBase. (#1179)  @yang-xiaodong </li> <li>Add logs for duplicate subscriber in same group. (#1186)  @yang-xiaodong </li> <li>Record the Instance Id in the executed received messages. (#1187)  @yang-xiaodong </li> </ul> <p>Bug Fixed:</p> <ul> <li>SnowflakeId excludes virtual and loopback and non-working NICs. (#1163)  Thanks @xiatiandegaga</li> <li>Fixed the health check could not get the status correctly when RabbitMQ lost connection and quickly recovered. (#1193) Thanks @rpenha</li> <li>Fixed dashboard gateway proxy request missing QueryString (#1168) Thanks @wwwu</li> <li>Fixed the disconnect detection of RabbitMQ connection abnormality. (#1178)</li> <li>Fixed Mongo queries not returning results when a element convention name is registered. (#1193) Thanks @rpenha</li> <li>Fixed subscriber lookup in scoped lifecycle of factory mode. (#1204) Thanks @sampsonye</li> </ul>"},{"location":"about/release-notes/#version-610-2022-06-10","title":"Version 6.1.0 (2022-06-10)","text":"<p>Features:</p> <ul> <li>Optimize snowflake algorithm. (#1065)  Thanks @Allen-dududu</li> <li>Add authorization policy option feature to CAP dashboard. (#1113)  Thanks @albertopm19</li> <li>Added support of ScheduledEnqueueTimeUtc for AzureServiceBus transport. (#1137)  Thanks @webinex</li> <li>Add option to configure failed messages expiration term. (#1142) Thanks @dima-zhemkov</li> </ul> <p>Bug Fixed:</p> <ul> <li>Fixed sequence validation error when both enable Challenge and Auth of dashboard authentication. (#1097)</li> <li>Used concurrentdictionary since PublishedMessages and ReceivedMessages are public and accessed from various places. (#1104) Thanks @wakiter</li> <li>Fixed the health check could not get the status correctly when RabbitMQ lost connection and quickly recovered. (#1140)</li> <li>Fixed date file format bug when retrying query from database. (#1143)</li> <li>Change reading/creating streams and consumer groups to handle non idempotent operations. (#1150) Thanks @MahmoudSamir101</li> </ul>"},{"location":"about/release-notes/#version-601-2022-02-15","title":"Version 6.0.1 (2022-02-15)","text":"<p>Bug Fixed:</p> <ul> <li>Fixed kafka consume excepiton for GroupLoadInProress errcode (#1085)</li> <li>Fixed deserialization exception when message body is empty byte array. (#1087)</li> <li>Fixed dashboard authentication challenge bug. (#1077)</li> </ul>"},{"location":"about/release-notes/#version-600-2022-01-06","title":"Version 6.0.0 (2022-01-06)","text":"<p>Features:</p> <ul> <li>Fully support .NET 6.</li> <li>Add support for OpenTelemetry. (#885)</li> <li>Improve support for NATS JetStream wildcard topic. (#1047)</li> <li>Add support customer header options for Azure Service Bus. (#1063) Thanks @Mateus Viegas</li> </ul>"},{"location":"about/release-notes/#version-520-2021-11-12","title":"Version 5.2.0 (2021-11-12)","text":"<p>Features:</p> <ul> <li>Add support for NATS JetStream. (#983)</li> <li>Add support for Apache Pulsar. (#610)</li> <li>Add possibility to process messages for each consumer group indepedently. (#1027)</li> </ul> <p>Bug Fixed:</p> <ul> <li>Fixed message content of bigint type cannot be displayed correctly in dashboard. (#1028)</li> <li>Fixed unobserved tasks of async method calls in Amazon SQS. (#1033)</li> <li>Fixed RabbitMQ federation plugin message header object values cause exceptions. (#1036)</li> </ul>"},{"location":"about/release-notes/#version-512-2021-07-26","title":"Version 5.1.2 (2021-07-26)","text":"<p>Bug Fixed:</p> <ul> <li>Fixed consumer register cancellation token source null referencee bug. (#952)</li> <li>Fixed redis streams transport cluster keys cross-hashslot bug. (#944)</li> </ul>"},{"location":"about/release-notes/#version-511-2021-07-09","title":"Version 5.1.1 (2021-07-09)","text":"<p>Features:</p> <ul> <li>Improve flow control for message cache of in memory. (#935)</li> <li>Add cancellation token support to subscribers. (#912)</li> <li>Add pathbase options for dashboard. (#901)</li> <li>Add custom authorization scheme support for dashboard. (#906)</li> </ul> <p>Bug Fixed:</p> <ul> <li>Fixed mysql connect timeout expired bug. (#931)</li> <li>Fixed consul health check path invalid bug. (#921)</li> <li>Fixed mongo dashboard query bug. (#909)</li> </ul>"},{"location":"about/release-notes/#version-510-2021-06-07","title":"Version 5.1.0 (2021-06-07)","text":"<p>Features:</p> <ul> <li>Add configure options for json serialization. (#879)</li> <li>Add Redis Streams transport support. (#817)</li> <li>New dashboard build with vue. (#880)</li> <li>Add subscribe filter support. (#894)</li> </ul> <p>Bug Fixed:</p> <ul> <li>Fixed use CapEFDbTransaction to get dbtransaction extension method bug. (#868)</li> <li>Fixed pending message has not been deleted from buffer list in SQL Server. (#889)</li> <li>Fixed dispatcher processing when storage message exception bug. (#900)</li> </ul>"},{"location":"about/release-notes/#version-503-2021-05-14","title":"Version 5.0.3 (2021-05-14)","text":"<p>Bug Fixed:</p> <ul> <li>Fix the bug of getting db transaction through the IDbContextTransaction for SQLServer. (#867)</li> <li>Fix RabbitMQ Connection close forced. (#861)</li> </ul>"},{"location":"about/release-notes/#version-502-2021-04-28","title":"Version 5.0.2 (2021-04-28)","text":"<p>Features:</p> <ul> <li>Add support for Azure Service Bus sessions. (#829)</li> <li>Add custom message headers support for RabbitMQ consumer. (#818)</li> </ul> <p>Bug Fixed:</p> <ul> <li>Downgrading Microsoft.Data.SqlClient to 2.0.1. (#839)</li> <li>DiagnosticObserver does not use null connection. (#845)</li> <li>Fix null reference in AmazonSQSTransport. (#846)</li> </ul>"},{"location":"about/release-notes/#version-501-2021-04-07","title":"Version 5.0.1 (2021-04-07)","text":"<p>Features:</p> <ul> <li>Add KafkaOptions.MainConfig to AutoCreateTopic. (#810)</li> <li>Add support rewriting the default configuration of Kafka consumer. (#822)</li> <li>Add DefaultChallengeScheme dashboard options to specify dashboard auth challenge scheme. (#815)</li> </ul> <p>Bug Fixed:</p> <ul> <li>Fixed topic selector in IConsumerServiceSelector. (#806)</li> <li>Update AWS topic subscription and SQS access policy generation. (#808)</li> <li>Fixed memory leak when using transction to publish message. (#816)</li> <li>Fixed SQL content filter on IMonitoringApi.PostgreSql.cs. (#814)</li> <li>Fixed the expiration time display problem in the dashboard due to time zone issues (#820)</li> <li>Fixed the creation timing of Kafka automatically creating Topic. (#823)</li> <li>Fixed Dashboard metric not update. (#819)</li> </ul>"},{"location":"about/release-notes/#version-500-2021-03-23","title":"Version 5.0.0 (2021-03-23)","text":"<p>Features:</p> <ul> <li>Upgrade to .NET Standard 2.1 and support .NET 5. (#727)</li> <li>Replace Newtonsoft.Json to System.Text.Json. (#740)</li> <li>Support NATS Transport. (#595,#743)</li> <li>Enabling publiser confirms for RabbitMQ. (#730)</li> <li>Support query subscription from DI implementation factory. (#756)</li> <li>Add options to create lazy queue for RabbitMQ. (#772)</li> <li>Support to add custom tags for Consul. (#786)</li> <li>Support custom group and topic prefiex. (#780)</li> <li>Renemae DefaultGroup option to DefaultGroupName.</li> <li>Add auto create topic at startup for Kafka. (#795,#744)</li> </ul> <p>Bug Fixed:</p> <ul> <li>Fixed retrying process earlier than consumer registration to DI. (#760)</li> <li>Fixed Amazon SQS missing pagination topics. (#765)</li> <li>Fixed RabbitMQ MessageTTL option to int type. (#787)</li> <li>Fixed Dashboard auth. (#793)</li> <li>Fixed ClientProvidedName could not be renamed for RabbitMQ. (#791)</li> <li>Fixed EntityFramework transaction will not rollback when exception occurred. (#798)</li> </ul>"},{"location":"about/release-notes/#version-312-2020-12-03","title":"Version 3.1.2 (2020-12-03)","text":"<p>Features: * Support record the exception message in the headers. (#679) * Support consul service check for https. (#722) * Support custom producer threads count options for sending. (#731) * Upgrade dependent nuget packages to latest.</p> <p>Bug Fixed:</p> <ul> <li>Fixed InmemoryQueue expired messages are not removed bug. (#691)</li> <li>Fixed Executor key change lead to possible null reference exception. (#698)</li> <li>Fixed Postgresql delete expires data logic error. (#714)</li> </ul>"},{"location":"about/release-notes/#version-311-2020-09-23","title":"Version 3.1.1 (2020-09-23)","text":"<p>Features:</p> <ul> <li>Add consumer parameter with interface suppport. (#669)</li> <li>Add custom correlation id and message id support. (#668)</li> <li>Enhanced custom serialization support. (#641)</li> </ul> <p>Bug Fixed:</p> <ul> <li>Solve the issue of being duplicated executors from different assemblies. (#666)</li> <li>Added comparer to remove duplicate ConsumerExecutors. (#653)</li> <li>Add re-enable the auto create topics configuration item for Kafka, it's false by default. now is true. (#635)</li> <li>Fixed postgresql transaction rollback invoke bug. (#640)</li> <li>Fixed SQLServer table name customize bug. (#632)</li> </ul>"},{"location":"about/release-notes/#version-310-2020-08-15","title":"Version 3.1.0 (2020-08-15)","text":"<p>Features:</p> <ul> <li>Add Amazon SQS support. (#597)</li> <li>Remove Dapper and replace with ADO.NET in storage project. (#583)</li> <li>Add debug symbols package to nuget.</li> <li>Upgrade dependent nuget package version to latest.</li> <li>English docs grammar correction. Thanks @mzorec</li> </ul> <p>Bug Fixed:</p> <ul> <li>Fix mysql transaction rollback bug. (#598)</li> <li>Fix dashboard query bug. (#600)</li> <li>Fix mongo db query bug. (#611)</li> <li>Fix dashboard browser language detection bug. (#631)</li> </ul>"},{"location":"about/release-notes/#version-304-2020-05-27","title":"Version 3.0.4 (2020-05-27)","text":"<p>Bug Fixed:</p> <ul> <li>Fix kafka consumer group does not works bug. (#541)</li> <li>Fix cast object to primitive types failed bug. (#547)</li> <li>Fix subscriber primitive types convert exception. (#568)</li> <li>Add conosole app sample.</li> <li>Upgrade Confluent.Kafka to 1.4.3</li> </ul>"},{"location":"about/release-notes/#version-303-2020-04-01","title":"Version 3.0.3 (2020-04-01)","text":"<p>Bug Fixed:</p> <ul> <li>Change ISubscribeInvoker interface access modifier to public. (#537)</li> <li>Fix rabbitmq connection may be reused when close forced. (#533)</li> <li>Fix dashboard message reexecute button throws exception bug. (#525)</li> </ul>"},{"location":"about/release-notes/#version-302-2020-02-05","title":"Version 3.0.2 (2020-02-05)","text":"<p>Bug Fixed:</p> <ul> <li>Fixed diagnostics event data object error. (#504 )</li> <li>Fixed RabbitMQ transport check not working. (#503 )</li> <li>Fixed Azure Service Bus subscriber error. (#502  )</li> </ul>"},{"location":"about/release-notes/#version-301-2020-01-19","title":"Version 3.0.1 (2020-01-19)","text":"<p>Bug Fixed:</p> <ul> <li>Fixed Dashboard requeue and reconsume failed bug.  (#482 )</li> <li>Fixed Azure service bus null reference exception. (#483 )</li> <li>Fixed type cast exception from storage. (#473 )</li> <li>Fixed SqlServer  connection undisponse bug. (#477 )</li> </ul>"},{"location":"about/release-notes/#version-300-2019-12-30","title":"Version 3.0.0 (2019-12-30)","text":"<p>Breaking Changes:</p> <p>In this version, we have made major improvements to the code structure, which have introduced some destructive changes.</p> <ul> <li> <p>Publisher and Consumer are not compatible with older versions This version is not compatible with older versions of the message protocol because we have improved the format in which messages are published and stored.</p> </li> <li> <p>Interface changes We have done a lot of refactoring of the code, and some of the interfaces may be incompatible with older versions</p> </li> <li> <p>Detach the dashboard project</p> </li> </ul> <p>Features:</p> <ul> <li>Supports .NET Core 3.1.</li> <li>Upgrade dependent packages.</li> <li>New serialization interface <code>ISerializer</code> to support serialization of message body sent to MQ.</li> <li>Add new api for <code>ICapPublisher</code> to publish message with headers.</li> <li>Diagnostics event structure and names improved. #378</li> <li>Support consumer method to read the message headers. #472</li> <li>Support rename message storage tables. #435</li> <li>Support for Kafka to write such as Offset and Partition to the header. #374</li> <li>Improved the processor retry interval time. #444</li> </ul> <p>Bug Fixed:</p> <ul> <li>Fixed SqlServer dashboard sql query bug. #470</li> <li>Fixed Kafka health check bug. #436</li> <li>Fixed dashboard bugs. #412 #404</li> <li>Fixed transaction bug for sql server when using EF. #402</li> </ul>"},{"location":"about/release-notes/#version-260-2019-08-29","title":"Version 2.6.0 (2019-08-29)","text":"<p>Features:</p> <ul> <li>Improvement Diagnostic support. Thanks @gfx687 </li> <li>Improvement documention. https://cap.dotnetcore.xyz</li> <li>Improvement <code>ConsumerInvoker</code> implementation. Thanks @hetaoos</li> <li>Support multiple consumer threads. (#295)</li> <li>Change DashboardMiddleware to async. (#390) Thanks @liuzhenyulive </li> </ul> <p>Bug Fixed:</p> <ul> <li>SQL Server Options Bug.</li> <li>Fix transaction scope disposed bug. (#365)</li> <li>Fix thread safe issue of ICapPublisher bug. (#371)</li> <li>Improved Ctrl+C action raised exception issue.</li> <li>Fixed asynchronous exception catching bug of sending.</li> <li>Fix MatchPoundUsingRegex \".\" not escaped bug (#373)</li> </ul>"},{"location":"about/release-notes/#version-251-2019-06-21","title":"Version 2.5.1 (2019-06-21)","text":"<p>Features:</p> <ul> <li>Improved logs record.</li> <li>Upgrade dependent nuget packages version. (MySqlConnector, confluent-kafka-dotnet-1.0 )</li> <li>NodeId type change to string of DiscoveryOptions for Consul. (#314)</li> <li>Change the IConsumerServiceSelector interface access modifier to public. (#333)</li> <li>Improved RabbitMQOptions to provide extensions option to configure the client original configuration. (#350)</li> <li>Add index for MongoDB CAP collections. (#353)</li> </ul> <p>Bugs Fixed:</p> <ul> <li>Fixed consumer re-register transport bug. (#329)</li> <li>Handle messages retrieval failure. (#324)</li> <li>Fixed DiagnosticListener  null reference exception bug. (#335)</li> <li>Add subscription name validation for the AzureServerBus. (#344)</li> <li>Fixed thread safety issues of publisher. (#331)</li> </ul>"},{"location":"about/release-notes/#version-250-2019-03-30","title":"Version 2.5.0 (2019-03-30)","text":"<p>Features:</p> <ul> <li>Support Azure Service Bus. (#307)</li> <li>Support In-Memory Storage. (#296)</li> <li>Upgrade Dapper to version 1.60.1</li> <li>Support read environment variables CAP_WORKERID and CAP_DATACENTERID as the snowflake algorithm workerid and datacenterid.</li> </ul> <p>Bug Fixed:</p> <ul> <li>Modify MySQL cap table encoding to utf8mb4. (#305)</li> <li>Move CapSubscribeAttribute class to DotNetCore.CAP project.</li> <li>Fixed multiple instance snowflake algorithm generating primary key conflicts. (#294)</li> </ul>"},{"location":"about/release-notes/#version-242-2019-01-08","title":"Version 2.4.2 (2019-01-08)","text":"<p>Features:</p> <ul> <li>Startup the CAP with the .NET Core 2.1 BackgroundService. (#265)</li> <li>Improved message delivery performance. #261</li> </ul> <p>Bug Fixed:</p> <ul> <li>Fixed PostgreSql version isolation feature bug. (#256)</li> <li>Fixed SQL Server sql bug for dashboard search. (#266)</li> </ul>"},{"location":"about/release-notes/#version-241-2018-12-19","title":"Version 2.4.1 (2018-12-19)","text":"<p>Bug Fixed:</p> <ul> <li>Fixed MongoDB version isolation feature bug. (#253)</li> </ul>"},{"location":"about/release-notes/#version-240-2018-12-08","title":"Version 2.4.0 (2018-12-08)","text":"<p>Features:</p> <ul> <li>Supported version options. (#220)</li> <li>Upgrade nuget package to .net core 2.2.</li> </ul> <p>Breaking Changes:</p> <p>In order to support the \"version isolation\" feature, we introduced a new version field in version 2.4.0 to isolate different versions of the message, so this requires some adjustments to the database table structure. You can use the following SQL to add a version field to your database CAP related table.</p> <p>MySQL <pre><code>ALTER TABLE `cap.published` ADD Version VARCHAR(20) NULL;\nALTER TABLE `cap.received` ADD Version VARCHAR(20) NULL;\n</code></pre></p> <p>SQL Server <pre><code>ALTER TABLE Cap.[Published] ADD Version VARCHAR(20) NULL;\nALTER TABLE Cap.[Received] ADD Version VARCHAR(20) NULL;\n</code></pre></p> <p>PostgreSQL <pre><code>ALTER TABLE cap.published ADD  \"Version\" VARCHAR(20) NULL;\nALTER TABLE cap.received ADD \"Version\" VARCHAR(20) NULL;\n</code></pre></p> <p>MongoDb <pre><code>db.CapPublishedMessage.update({},{\"$set\" : {\"Version\" : \"1\"}});\ndb.CapReceivedMessage.update({},{\"$set\" : {\"Version\" : \"1\"}});\n</code></pre></p> <p>Bug Fixed:</p> <ul> <li>Fixed different groups of the same topic name in one instance will cause routing bug. (#235)</li> <li>Fixed message presistence bug. (#240)</li> <li>Fixed RabbitMQ topic name contains numbers will cause exception bug. (#181)</li> </ul>"},{"location":"about/release-notes/#version-231-2018-10-29","title":"Version 2.3.1 (2018-10-29)","text":"<p>Features:</p> <ul> <li>Add Source Link Support</li> <li>Upgrade dependent NuGet packages.</li> </ul> <p>Bug Fixed:</p> <ul> <li>Fixed dashboard messages requeue error. (#205)</li> <li>Adjustment snowflake workerId to random id.</li> <li>Fixed flush unclaer data bug.</li> </ul>"},{"location":"about/release-notes/#version-230-2018-08-30","title":"Version 2.3.0 (2018-08-30)","text":"<p>In this version, we made some breaking changes for the publisher API, you can see this blog to understand the story behind.</p> <p>If you have any migration question, please comment in issue (#190).</p> <p>Breaking Changes:</p> <ul> <li>Removed app.UseCap() from Startup.cs</li> <li>Message table primary key data type has been modified to Bigint and non auto-Increment. (#180)</li> <li>New publisher Api. (#188)</li> </ul> <p>Features:</p> <ul> <li>MongoDb supported. (#143)</li> <li>Automatic commit transaction. (#191)</li> </ul> <p>Bug Fixed:</p> <ul> <li>Fix message still sent if transaction faild bug. (#118)</li> <li>Multiple events in one transaction. (#171)</li> </ul>"},{"location":"about/release-notes/#version-225-2018-07-19","title":"Version 2.2.5 (2018-07-19)","text":"<p>Features: - Performance improvement</p> <p>Bug Fixed:</p> <ul> <li>Fixed message enqueue exception.</li> <li>Fixed Retry processor bugs.</li> <li>Fixed Kafka producer exception log without logging when publish message.</li> <li>Fixed Incorrect local IP address judgment of IPv6. (#140)</li> <li>Fixed DateTime localization format conversion error to sql. (#139)</li> <li>Fixed dashboard message page re-requeue and re-executed operate bug. (#158)</li> <li>Fixed SendAsync or ExecuteAsync recursion retries bug. (#160)</li> <li>Fixed configuration options of FailedThresholdCallback could not be invoke when the value less then three. (#161)</li> </ul>"},{"location":"about/release-notes/#version-224-2018-06-05","title":"Version 2.2.4 (2018-06-05)","text":"<p>Because version 2.2.3 was not released to nuget, so released 2.2.4.</p>"},{"location":"about/release-notes/#version-223-2018-06-05","title":"Version 2.2.3 (2018-06-05)","text":"<p>Features:</p> <ul> <li>Improved log output.</li> <li>Upgrade nuget packages.</li> <li>Support pattern matching for consumer. (#132)</li> </ul> <p>Bug Fixed:</p> <ul> <li>Fixed exception thrown when terminate the program with Ctrl+C. (#130)</li> </ul>"},{"location":"about/release-notes/#version-222-2018-04-28","title":"Version 2.2.2 (2018-04-28)","text":"<p>Features:</p> <ul> <li>Improved log output. #114</li> <li>Add default timeout configuration for kafka client.</li> <li>Rename configuration options FailedCallback to FailedThresholdCallback.</li> </ul> <p>Bug Fixed:</p> <ul> <li>Fixed message enqueue exception.</li> <li>Fixed retry processor bugs.</li> <li>Fixed kafka producer exception log without logging when publish message.</li> </ul>"},{"location":"about/release-notes/#version-221-2018-04-18","title":"Version 2.2.1 (2018-04-18)","text":"<p>Bug Fixed:</p> <ul> <li>Fixed message enqueue bug in v2.2</li> </ul>"},{"location":"about/release-notes/#version-220-2018-04-17","title":"Version 2.2.0 (2018-04-17)","text":"<p>Features:</p> <ul> <li>Remove database queue mode. (#102)</li> <li>Support for Diagnostics. (#112)</li> <li>Upgrade dependent nuget packages.</li> </ul> <p>Bug Fixed:</p> <ul> <li>Fixed bug of the FailedRetryCount does not increase when raised SubscribeNotFoundException. (#90)</li> </ul>"},{"location":"about/release-notes/#version-214-2018-03-16","title":"Version 2.1.4 (2018-03-16)","text":"<p>Features:</p> <ul> <li>Remove TableNamePrefix option from MySqlOptions to EFOptions.</li> <li>Upgrade nuget package</li> </ul> <p>Bug Fixed:</p> <ul> <li>Fixed the connection bug of getting message from table. (#83)</li> <li>Fixed entityframework rename table name prefix bug. (#84)</li> <li>Fixed sql server scripts bug of create table scheme. (#85)</li> <li>Fixed thread safety issue about KafkaOptions.(#89)</li> </ul>"},{"location":"about/release-notes/#version-213-2018-01-24","title":"Version 2.1.3 (2018-01-24)","text":"<p>Features:</p> <ul> <li>Upgrade dependent nuget packages version.</li> <li>NuGet package include xml doc now.</li> <li>NuGet now contains the CAP symbol files.</li> </ul> <p>Bug Fixed:</p> <ul> <li>Fixed thread conflict issue when sending messages with PublishAsync. (#80)</li> <li>Fixed kafka received message sava failed may caused the mssage loss bug. (#78)</li> <li>Fixed dashboard js syntax issue. (#77)</li> </ul>"},{"location":"about/release-notes/#version-212-2017-12-18","title":"Version 2.1.2 (2017-12-18)","text":"<p>Bug Fixed:</p> <ul> <li>Fixed and improve the performance of mysql processing messages. (#68) (#36)</li> <li>Fixed dashboard manually trigger reconsumption bug. (#67)</li> <li>Fixed mysql 5.5 table initialization bug. (#65)</li> <li>Fixed mysql message queue executor bug. (#66)</li> </ul>"},{"location":"about/release-notes/#version-211-2017-11-28","title":"Version 2.1.1 (2017-11-28)","text":"<p>Bug Fixed:</p> <ul> <li>Fixed 'dotnet.exe' process incomplete quit when shutdown application (Ctrl+C). (#64)</li> <li>Fixed failure to issue as expected of RabbitMQ SubscriberNotFoundException. (#63)</li> <li>Fixed Sent async message in the loop causes an exception. (#62)</li> </ul>"},{"location":"about/release-notes/#version-210-2017-11-17","title":"Version 2.1.0 (2017-11-17)","text":"<p>Features:</p> <ul> <li>Interface display optimization of dashboard.</li> <li>Adds a more friendly display when looks at the message content.</li> <li>Now you can see the exception infomation in the message conent filed when message send or executed failed.</li> <li>Optimize LAN to see Dashboard without authentication.</li> <li>Add IContentSerializer interface, you can customize the serialized message content.</li> <li>Add IMessagePacker interface, you can customize wapper of the message.</li> <li>Upgrade the dependent package.</li> </ul> <p>Bug Fixed:</p> <ul> <li>Fixed dashboard query bugs.</li> <li>Fixed dashboard multilanguage display bugs.</li> <li>Fixed RabbitMQ connection pool bug.</li> <li>Fixed dashboard display bugs on mobile.</li> </ul>"},{"location":"about/release-notes/#version-202-2017-09-29","title":"Version 2.0.2 (2017-09-29)","text":"<p>Bug Fixed:</p> <ul> <li>Fixed asp.net core 2.0 startup error of MySql and PostgreSql. (#44</li> </ul>"},{"location":"about/release-notes/#version-201-2017-09-16","title":"Version 2.0.1 (2017-09-16)","text":"<p>Bug Fixed:</p> <ul> <li>DbContext services bug. (#44)</li> <li>Dependency injection bug. (#45)</li> </ul>"},{"location":"about/release-notes/#version-200-2017-09-01","title":"Version 2.0.0 (2017-09-01)","text":"<p>Features:</p> <ul> <li>Supported .net standard 2.0.</li> <li>Supported PostgreSQL 9.5+.</li> <li>Supported asynchronous function subscriptions.</li> <li><code>ICapPublisher</code> api supported callback subsrciber.</li> </ul> <p>Bug Fixed:</p> <ul> <li>Fixed multiple subscriber subscribe bug. (#38)</li> <li>Fixed model binde bug. (#17) (#18)</li> <li>Fixed database connection disposed bug. (#25)</li> <li>Fixed consumer method injection context bug. (#34)</li> </ul>"},{"location":"about/release-notes/#version-110-2017-08-04","title":"Version 1.1.0 (2017-08-04)","text":"<p>Features:</p> <ul> <li>Support MySQL database persistent message.</li> <li>Add message failed call-back in CapOptions.</li> <li>Remove publish messages API of string name at <code>ICapPublisher</code>.</li> </ul> <p>Bug Fixed:</p> <ul> <li>Fixed can not send message for string type. (#17)</li> <li>Fixed model bind for type like datetime guid always failed. (#18)</li> </ul>"},{"location":"about/release-notes/#version-101-2017-07-25","title":"Version 1.0.1 (2017-07-25)","text":"<p>Features:</p> <ul> <li>ICapPublisher interface added synchronous publish API.</li> <li>Add infinity retry failed processor.</li> </ul>"},{"location":"about/release-notes/#version-100-2017-07-19","title":"Version 1.0.0 (2017-07-19)","text":"<ul> <li>Project published</li> </ul>"},{"location":"user-guide/en/cap/configuration/","title":"Configuration","text":"<p>By default, you specify configurations when registering CAP services in the DI container for an ASP.NET Core project.</p> <pre><code>services.AddCap(config =&gt;\n{\n    // config.XXX\n});\n</code></pre> <p><code>services</code> is an <code>IServiceCollection</code> interface, which can be found in the <code>Microsoft.Extensions.DependencyInjection</code> package.</p>"},{"location":"user-guide/en/cap/configuration/#minimum-configuration-required","title":"Minimum Configuration Required","text":"<p>You must configure at least one transport and one storage. If you want to get started quickly, you can use the following configuration:</p> <pre><code>services.AddCap(capOptions =&gt; \n{\n     capOptions.UseInMemoryQueue();  // Requires the Savorboard.CAP.InMemoryMessageQueue NuGet package.\n     capOptions.UseInMemoryStorage();\n});\n</code></pre> <p>For transport and storage configuration options provided by specific components, see the Transports and Storage sections.</p>"},{"location":"user-guide/en/cap/configuration/#configuration-in-subscribers","title":"Configuration in Subscribers","text":"<p>Subscribers use the <code>[CapSubscribe]</code> attribute to mark themselves as subscribers. They can be located in an ASP.NET Core Controller or Service.</p> <p>When you declare <code>[CapSubscribe]</code>, you can change the behavior of the subscriber by specifying the following parameters.</p>"},{"location":"user-guide/en/cap/configuration/#name","title":"Name","text":"<p>string, required</p> <p>Subscribe to messages by specifying the <code>Name</code> parameter. This corresponds to the name specified when publishing the message through <code>_cap.Publish(\"Name\")</code>.</p> <p>This name corresponds to different items in different message brokers:</p> <ul> <li>In RabbitMQ, it corresponds to the Routing Key.</li> <li>In Kafka, it corresponds to the Topic.</li> <li>In Azure Service Bus, it corresponds to the Subject.</li> <li>In NATS, it corresponds to the Subject.</li> <li>In Redis Streams, it corresponds to the Stream.</li> </ul>"},{"location":"user-guide/en/cap/configuration/#group","title":"Group","text":"<p>string, optional</p> <p>Specify the <code>Group</code> parameter to place subscribers within a separate consumer group, a concept similar to consumer groups in Kafka. If this parameter is not specified, the current assembly name (<code>DefaultGroupName</code>) is used as the default.</p> <p>Subscribers with the same <code>Name</code> but set to different groups will all receive messages. Conversely, if subscribers with the same <code>Name</code> are set to the same group, only one will receive the message.</p> <p>It also makes sense for subscribers with different <code>Names</code> to be set to different groups; they can have independent threads for execution. Conversely, if subscribers with different <code>Names</code> are set to the same group, they will share consumption threads.</p> <p>Group corresponds to different items in different message brokers:</p> <ul> <li>In RabbitMQ, it corresponds to Queue.</li> <li>In Kafka, it corresponds to Consumer Group.</li> <li>In Azure Service Bus, it corresponds to Subscription Name.</li> <li>In NATS, it corresponds to Queue Group.</li> <li>In Redis Streams, it corresponds to Consumer Group.</li> </ul>"},{"location":"user-guide/en/cap/configuration/#groupconcurrent","title":"GroupConcurrent","text":"<p>byte, optional</p> <p>Set the parallelism of concurrent execution for subscribers by specifying the value of the <code>GroupConcurrent</code> parameter. Concurrent execution means that it needs to run on an independent thread, so if you do not specify the <code>Group</code> parameter, CAP will automatically create a Group using the value of <code>Name</code>.</p> <p>Note</p> <p>If you have multiple subscribers configured with the same Group and have also set the <code>GroupConcurrent</code> value for them, the degree of parallelism is the sum of the values in the group. This setting applies only to new messages; retried messages are not subject to the concurrency limit.</p>"},{"location":"user-guide/en/cap/configuration/#custom-configuration","title":"Custom Configuration","text":"<p>The <code>CapOptions</code> class is used to store configuration information. By default, all options have default values. Sometimes you may need to customize them.</p>"},{"location":"user-guide/en/cap/configuration/#defaultgroupname","title":"DefaultGroupName","text":"<p>Default: cap.queue.{assembly name}</p> <p>The default consumer group name. It corresponds to different names in different transports. You can customize this value to customize the names in different transports for easy viewing.</p> <p>Mapping</p> <p>Maps to Queue Names in RabbitMQ. Maps to Consumer Group Id in Apache Kafka. Maps to Subscription Name in Azure Service Bus. Maps to Queue Group Name in NATS. Maps to Consumer Group in Redis Streams.</p>"},{"location":"user-guide/en/cap/configuration/#groupnameprefix","title":"GroupNamePrefix","text":"<p>Default: Null</p> <p>Add unified prefixes to consumer group names. https://github.com/dotnetcore/CAP/pull/780</p>"},{"location":"user-guide/en/cap/configuration/#topicnameprefix","title":"TopicNamePrefix","text":"<p>Default: Null</p> <p>Add unified prefixes to topic/queue names. https://github.com/dotnetcore/CAP/pull/780</p>"},{"location":"user-guide/en/cap/configuration/#version","title":"Version","text":"<p>Default: v1</p> <p>Used to specify a version for a message to isolate messages of different versions across services. This is useful for A/B testing or multi-service version scenarios. The following are application scenarios that require versioning:</p> <p>Business Iteration and Backward Compatibility</p> <p>Due to rapid iteration of business logic, the message data structure may change during service integration. Sometimes we add or modify data structures to accommodate new requirements. If you have a brand new system, this is not a problem. However, if your system is already deployed to production and serving customers, new features can become incompatible with old data structures when released online, which can cause serious issues. To work around this problem, you would need to clear all message queues and persistent messages before restarting the application, which is obviously unacceptable for production environments.</p> <p>Multiple Server Versions</p> <p>Sometimes, the server needs to provide multiple sets of interfaces to support different versions of the client application. The data structures for the same interface interactions between different app versions and the server may differ, so the server typically provides different routing addresses to accommodate different client versions.</p> <p>Different Instances Using the Same Storage Table/Collection</p> <p>If you want multiple service instances to share the same database, you can isolate database tables for different instances by specifying different table names. This can be achieved through CAP configuration by setting different table name prefixes.</p> <p>Check out the blog to learn more about the Version feature: https://www.cnblogs.com/savorboard/p/cap-2-4.html</p>"},{"location":"user-guide/en/cap/configuration/#failedretryinterval","title":"FailedRetryInterval","text":"<p>Default: 60 sec</p> <p>During the message sending process, if message transmission fails, CAP will retry sending. This configuration option specifies the interval between each retry attempt.</p> <p>During the message consumption process, if the consumer method fails, CAP will retry execution. This configuration option specifies the interval between each retry attempt.</p> <p>Retry &amp; Interval</p> <p>By default, if a failure occurs during send or consume operations, retry will begin after 4 minutes (FallbackWindowLookbackSeconds) to avoid potential issues caused by message state delays.   Send and consume failures are retried 3 times immediately. After the initial 3 attempts, retries follow a polling schedule, at which point the FailedRetryInterval configuration takes effect.</p> <p>Multi-instance Concurrent Retries</p> <p>Version 7.1.0 introduced database-based distributed locks to solve the problem of concurrent database fetches during retry operations across multiple instances. You must explicitly set <code>UseStorageLock</code> to true to enable this.</p>"},{"location":"user-guide/en/cap/configuration/#usestoragelock","title":"UseStorageLock","text":"<p>Default: false</p> <p>If set to true, we will use a database-based distributed lock to handle concurrent data fetches by retry processes across multiple instances. This will generate the cap.lock table in the database.</p>"},{"location":"user-guide/en/cap/configuration/#collectorcleaninginterval","title":"CollectorCleaningInterval","text":"<p>Default: 300 sec</p> <p>The interval at which the collector deletes expired messages.</p>"},{"location":"user-guide/en/cap/configuration/#schedulerbatchsize","title":"SchedulerBatchSize","text":"<p>Default: 1000</p> <p>Maximum number of delayed or queued messages fetched per scheduler cycle.</p>"},{"location":"user-guide/en/cap/configuration/#consumerthreadcount","title":"ConsumerThreadCount","text":"<p>Default: 1</p> <p>Number of consumer threads. When this value is greater than 1, the order of message execution cannot be guaranteed.</p>"},{"location":"user-guide/en/cap/configuration/#failedretrycount","title":"FailedRetryCount","text":"<p>Default: 50</p> <p>Maximum number of retries. When this count is reached, retries will stop. You can modify this parameter to set the maximum retry attempts.</p>"},{"location":"user-guide/en/cap/configuration/#fallbackwindowlookbackseconds","title":"FallbackWindowLookbackSeconds","text":"<p>Default: 240 sec</p> <p>Configures the retry processor to pick up messages with <code>Scheduled</code> or <code>Failed</code> status within the lookback time window.</p>"},{"location":"user-guide/en/cap/configuration/#failedthresholdcallback","title":"FailedThresholdCallback","text":"<p>Default: NULL</p> <p>Type: <code>Action&lt;FailedInfo&gt;</code></p> <p>Failure threshold callback. This action is invoked when retry attempts reach the value set by <code>FailedRetryCount</code>. You can use this callback to receive notifications and take manual intervention. For example, send an email or notification. </p>"},{"location":"user-guide/en/cap/configuration/#succeedmessageexpiredafter","title":"SucceedMessageExpiredAfter","text":"<p>Default: 24*3600 sec (1 day)</p> <p>Expiration time (in seconds) for successfully sent or consumed messages. When a message is sent or consumed successfully, it will be removed from the database after <code>SucceedMessageExpiredAfter</code> seconds. You can set the expiration time by modifying this value.</p>"},{"location":"user-guide/en/cap/configuration/#failedmessageexpiredafter","title":"FailedMessageExpiredAfter","text":"<p>Default: 15*24*3600 sec (15 days)</p> <p>Expiration time (in seconds) for failed messages. When a message fails to send or consume, it will be removed from the database after <code>FailedMessageExpiredAfter</code> seconds. You can set the expiration time by modifying this value.</p>"},{"location":"user-guide/en/cap/configuration/#removed-usedispatchingpergroup","title":"[Removed] UseDispatchingPerGroup","text":"<p>Default: false</p> <p>Removed in version 8.2, now default behavior</p> <p>If multiple consumers are within the same group, each consumer group pushes received messages to its own dispatching pipeline channel. Each channel has a thread count set to the <code>ConsumerThreadCount</code> value.</p>"},{"location":"user-guide/en/cap/configuration/#obsolete-enableconsumerprefetch","title":"[Obsolete] EnableConsumerPrefetch","text":"<p>Default: false (Before version 7.0, the default was true)</p> <p>This option has been renamed to <code>EnableSubscriberParallelExecute</code>. Please use the new option instead.</p>"},{"location":"user-guide/en/cap/configuration/#enablesubscriberparallelexecute","title":"EnableSubscriberParallelExecute","text":"<p>Default: false</p> <p>If set to <code>true</code>, CAP will prefetch a batch of messages from the broker and buffer them, then execute the subscriber method. After execution completes, it fetches the next batch for processing.</p> <p>Precautions</p> <p>Setting this to true may cause issues. If the subscriber method executes slowly and takes a long time, the retry thread may pick up messages that have not yet been executed. The retry thread picks up messages from 4 minutes ago (FallbackWindowLookbackSeconds) by default. If the consumer side has more than 4 minutes (FallbackWindowLookbackSeconds) of message backlog, those messages will be picked up again and executed again.</p>"},{"location":"user-guide/en/cap/configuration/#subscriberparallelexecutethreadcount","title":"SubscriberParallelExecuteThreadCount","text":"<p>Default: <code>Environment.ProcessorCount</code></p> <p>Specifies the number of threads for parallel task execution when <code>EnableSubscriberParallelExecute</code> is enabled.</p>"},{"location":"user-guide/en/cap/configuration/#subscriberparallelexecutebufferfactor","title":"SubscriberParallelExecuteBufferFactor","text":"<p>Default: 1</p> <p>Multiplier used to determine the buffered capacity size during parallel subscriber execution when <code>EnableSubscriberParallelExecute</code> is enabled. The buffer capacity is calculated by multiplying this factor with <code>SubscriberParallelExecuteThreadCount</code>, which represents the number of threads allocated for parallel processing.</p>"},{"location":"user-guide/en/cap/configuration/#enablepublishparallelsend","title":"EnablePublishParallelSend","text":"<p>Default: false (In versions 7.2 &lt;= Version &lt; 8.1, the default is true)</p> <p>By default, sent messages are placed into a single in-memory channel and then processed linearly. If set to true, message sending tasks will be processed in parallel by the .NET thread pool, which will greatly improve sending performance.</p>"},{"location":"user-guide/en/cap/filter/","title":"Filter","text":"<p>Subscriber filters are similar to ASP.NET MVC filters and are mainly used to perform additional work before and after the subscriber method executes, such as transaction management or logging.</p>"},{"location":"user-guide/en/cap/filter/#creating-a-subscriber-filter","title":"Creating a Subscriber Filter","text":""},{"location":"user-guide/en/cap/filter/#create-filter","title":"Create Filter","text":"<p>Create a new filter class that inherits from the <code>SubscribeFilter</code> abstract class.</p> <pre><code>public class MyCapFilter : SubscribeFilter\n{\n    public override Task OnSubscribeExecutingAsync(ExecutingContext context)\n    {\n        // Execute before the subscriber method runs\n    }\n\n    public override Task OnSubscribeExecutedAsync(ExecutedContext context)\n    {\n        // Execute after the subscriber method completes\n    }\n\n    public override Task OnSubscribeExceptionAsync(ExceptionContext context)\n    {\n        // Handle exceptions during subscriber method execution\n    }\n}\n</code></pre> <p>In some scenarios, if you want to terminate the subscriber method execution, you can throw an exception in <code>OnSubscribeExecutingAsync</code>, and choose to handle the exception in <code>OnSubscribeExceptionAsync</code>.</p> <p>To ignore exceptions, set <code>context.ExceptionHandled = true</code> in <code>ExceptionContext</code>:</p> <pre><code>public override Task OnSubscribeExceptionAsync(ExceptionContext context)\n{\n    context.ExceptionHandled = true;\n}\n</code></pre>"},{"location":"user-guide/en/cap/filter/#registering-a-filter","title":"Registering a Filter","text":"<p>Use <code>AddSubscribeFilter&lt;&gt;</code> to register a filter.</p> <pre><code>services.AddCap(opt =&gt;\n{\n    // ...\n}).AddSubscribeFilter&lt;MyCapFilter&gt;();\n</code></pre> <p>Currently, multiple filters are not supported.</p>"},{"location":"user-guide/en/cap/idempotence/","title":"Idempotence","text":"<p>Idempotence (which you can read a formal definition of on Wikipedia) in messaging systems means that a message redelivery can be handled without resulting in an unintended state.</p>"},{"location":"user-guide/en/cap/idempotence/#delivery-guarantees","title":"Delivery Guarantees<sup>1</sup>","text":"<p>Before discussing idempotency, let's discuss message delivery guarantees on the consumer side.</p> <p>Since CAP doesn't use MS DTC or other 2PC (Two-Phase Commit) distributed transaction mechanisms, there is an inherent limitation: messages are delivered at least once. Specifically, in a message-based system, there are three possibilities:</p> <ul> <li>Exactly Once (*)  </li> <li>At Most Once </li> <li>At Least Once  </li> </ul> <p>Exactly Once has a (*) next to it because, in the general case, it is simply not possible.</p>"},{"location":"user-guide/en/cap/idempotence/#at-most-once","title":"At Most Once","text":"<p>The At Most Once delivery guarantee ensures that you receive all messages either once or not at all.</p> <p>This type of delivery guarantee can arise from your messaging system and your code performing actions in the following order:</p> <pre><code>1. Remove message from queue\n2. Start work transaction\n3. Handle message (your code)\n4. Success?\n    Yes:\n        1. Commit work transaction\n    No: \n        1. Roll back work transaction\n        2. Put message back into the queue\n</code></pre> <p>In the best case scenario, this works well \u2013 your messages will be received, work transactions will be committed, and you will be happy.</p> <p>However, things can fail \u2013 especially if you do a lot of work. For example, consider what happens if anything fails after step (1), and then \u2013 when you try to execute step (4)/(2) (i.e., put the message back into the queue) \u2013 the network becomes temporarily unavailable, the message broker restarts, or the host machine reboots due to a system update.</p> <p>This might be acceptable if that's what you want, but most things in CAP revolve around the concept of DURABLE messages \u2013 messages whose contents are as important as the data in your database.</p>"},{"location":"user-guide/en/cap/idempotence/#at-least-once","title":"At Least Once","text":"<p>The At Least Once delivery guarantee ensures that you receive all messages one or more times if something fails.</p> <p>This requires a slight change in the order of execution and requires that the message queue system supports transactions, either through the traditional begin-commit-rollback protocol (MSMQ does this) or through a receive-ack-nack protocol (RabbitMQ, Azure Service Bus, etc. do this).</p> <p>Consider this approach:</p> <pre><code>1. Grab lease on message in queue\n2. Start work transaction\n3. Handle message (your code)\n4. Success?\n    Yes: \n        1. Commit work transaction\n        2. Delete message from queue\n    No: \n        1. Roll back work transaction\n        2. Release lease on message\n</code></pre> <p>If the \"lease\" grabbed in step (1) has an appropriate timeout associated with it, then we are guaranteed that no matter how wrong things go, we will only actually remove the message from the queue (step 4/2) if we have successfully committed our \"work transaction\".</p>"},{"location":"user-guide/en/cap/idempotence/#what-is-a-work-transaction","title":"What is a \"Work Transaction\"?","text":"<p>It depends on what you're doing \ud83d\ude04 Maybe it's a transaction in a relational database (which traditionally have good support for this), maybe it's a transaction in a document database that supports transactions (like RavenDB or PostgreSQL), or maybe it's a conceptual transaction representing the work you perform as a consequence of handling a message, e.g., updating documents in MongoDB, moving files in the file system, or modifying in-memory data structures.</p> <p>The fact that the \"work transaction\" is conceptual makes it impossible to support Exactly Once delivery \u2013 it's simply not generally possible to commit or roll back a \"work transaction\" and a \"queue transaction\" (the protocol with the message queue system) atomically and consistently.</p>"},{"location":"user-guide/en/cap/idempotence/#idempotence-in-cap","title":"Idempotence in CAP","text":"<p>In CAP, the At Least Once delivery guarantee is used.</p> <p>Since CAP uses a temporary storage medium (database table), At Most Once could theoretically be achieved, but to strictly guarantee that messages are not lost, we do not provide related functions or configurations.</p>"},{"location":"user-guide/en/cap/idempotence/#why-we-dont-provide-achieve-idempotency","title":"Why We Don't Provide (Achieve) Idempotency","text":"<ol> <li> <p>Message successfully written, but Consumer method execution failed.  </p> <p>There are many reasons why the Consumer method might fail. Without knowing the specific scenario, it's unclear whether retrying blindly or not retrying is the correct choice. For example, if the consumer is a debit service and the debit execution succeeds but fails to write the debit log, CAP will consider the consumer failed and retry. If the client doesn't guarantee idempotency, the framework will retry, inevitably leading to serious consequences like multiple debits.</p> </li> <li> <p>Consumer method execution succeeded, but the same message is received again.  </p> <p>This scenario is also possible. If the Consumer has already executed successfully but for some reason (e.g., broker recovery), the same message is received again, CAP will treat it as a new message. Message will be executed again by the Consumer. Because it is a new message, CAP cannot ensure idempotency at this point.</p> </li> <li> <p>Current data storage mode cannot guarantee idempotency.  </p> <p>Since the CAP message table for successfully consumed messages is deleted after 1 hour, historical messages cannot be verified for idempotency. If the broker has been maintained or manually processed some messages for some reason, there's no way to verify if they were already processed.</p> </li> <li> <p>Industry practices.</p> <p>Many event-driven frameworks require users to ensure idempotent operations, such as ENode, RocketMQ, etc.</p> </li> </ol> <p>From an implementation perspective, CAP could provide some less stringent idempotency, but strict idempotency cannot be guaranteed.</p>"},{"location":"user-guide/en/cap/idempotence/#naturally-idempotent-message-processing","title":"Naturally Idempotent Message Processing","text":"<p>Generally, the best way to handle message redeliveries is to make the processing of each message naturally idempotent.</p> <p>Natural idempotence occurs when processing a message consists of calling an idempotent method on a domain object, like:</p> <pre><code>obj.MarkAsDeleted();\n</code></pre> <p>or</p> <pre><code>obj.UpdatePeriod(message.NewPeriod);\n</code></pre> <p>You can use <code>INSERT ON DUPLICATE KEY UPDATE</code> provided by the database to achieve this easily.</p>"},{"location":"user-guide/en/cap/idempotence/#explicitly-handling-redeliveries","title":"Explicitly Handling Redeliveries","text":"<p>Another way to make message processing idempotent is to explicitly track IDs of processed messages and then handle redeliveries in your code.</p> <p>Assuming you track message IDs using an <code>IMessageTracker</code> that uses the same transactional data store as the rest of your work, your code might look like this:</p> <pre><code>readonly IMessageTracker _messageTracker;\n\npublic SomeMessageHandler(IMessageTracker messageTracker)\n{\n    _messageTracker = messageTracker;\n}\n\n[CapSubscribe]\npublic async Task Handle(SomeMessage message) \n{\n    if (await _messageTracker.HasProcessed(message.Id))\n    {\n        return;\n    }\n\n    // Do the actual work here\n    // ...\n\n    // Record that this message has been processed\n    await _messageTracker.MarkAsProcessed(message.Id);\n}\n</code></pre> <p>For the <code>IMessageTracker</code> implementation, you can use a message ID storage system like Redis or a database with a corresponding processing state.</p> <ol> <li> <p>The chapter refers to the Delivery guarantees of rebus, which I think is described very good.\u00a0\u21a9</p> </li> </ol>"},{"location":"user-guide/en/cap/messaging/","title":"Message","text":"<p>The data sent using the <code>ICapPublisher</code> interface is called a <code>Message</code>.</p> <p>TimeoutException thrown in consumer using HTTPClient</p> <p>By default, if the consumer throws an <code>OperationCanceledException</code> (including <code>TaskCanceledException</code>), it is considered normal user behavior, and the exception is ignored. However, if you use <code>HttpClient</code> in the consumer method and configure a request timeout, you may need to handle exceptions separately and re-throw non-<code>OperationCanceledException</code> exceptions due to a design issue in <code>HttpClient</code>. Refer to issue #1368 for more details.</p>"},{"location":"user-guide/en/cap/messaging/#compensating-transaction","title":"Compensating Transaction","text":"<p>Wiki: Compensating Transaction</p> <p>In some cases, consumers need to return an execution result to notify the publisher, allowing the publisher to perform compensation actions. This process is called message compensation.</p> <p>Typically, you can notify the upstream system by publishing a new message in the consumer code. CAP simplifies this by allowing you to specify the <code>callbackName</code> parameter when publishing a message. This feature is generally applicable to point-to-point consumption. Here is an example:</p> <p>For instance, in an e-commerce application, an order's initial status is \"pending.\" The status is updated to \"succeeded\" when the product quantity is successfully deducted; otherwise, it is marked as \"failed.\"</p> <pre><code>// =============  Publisher =================\n\n_capBus.Publish(\"place.order.qty.deducted\", \n    contentObj: new { OrderId = 1234, ProductId = 23255, Qty = 1 }, \n    callbackName: \"place.order.mark.status\");    \n\n// publisher using `callbackName` to subscribe consumer result\n\n[CapSubscribe(\"place.order.mark.status\")]\npublic void MarkOrderStatus(JsonElement param)\n{\n    var orderId = param.GetProperty(\"OrderId\").GetInt32();\n    var isSuccess = param.GetProperty(\"IsSuccess\").GetBoolean();\n\n    if(isSuccess){\n        // mark order status to succeeded\n    }\n    else{\n       // mark order status to failed\n    }\n}\n\n// =============  Consumer ===================\n\n[CapSubscribe(\"place.order.qty.deducted\")]\npublic object DeductProductQty(JsonElement param)\n{\n    var orderId = param.GetProperty(\"OrderId\").GetInt32();\n    var productId = param.GetProperty(\"ProductId\").GetInt32();\n    var qty = param.GetProperty(\"Qty\").GetInt32();\n\n    //business logic \n\n    return new { OrderId = orderId, IsSuccess = true };\n}\n</code></pre>"},{"location":"user-guide/en/cap/messaging/#controlling-callback-response","title":"Controlling Callback Response","text":"<p>You can inject the <code>CapHeader</code> parameter in the subscription method using the <code>[FromCap]</code> attribute and use its methods to add extra headers to the callback context or terminate the callback.</p> <p>Example:</p> <pre><code>[CapSubscribe(\"place.order.qty.deducted\")]\npublic object DeductProductQty(JsonElement param, [FromCap] CapHeader header)\n{\n    var orderId = param.GetProperty(\"OrderId\").GetInt32();\n    var productId = param.GetProperty(\"ProductId\").GetInt32();\n    var qty = param.GetProperty(\"Qty\").GetInt32();\n\n    // Add additional headers to the response message\n    header.AddResponseHeader(\"some-message-info\", \"this is the test\");\n    // Or add a callback to the response\n    header.AddResponseHeader(DotNetCore.CAP.Messages.Headers.CallbackName, \"place.order.qty.deducted-callback\");\n\n    // If you no longer want to follow the sender's specified callback and want to modify it, use the RewriteCallback method.\n    header.RewriteCallback(\"new-callback-name\");\n\n    // If you want to terminate/stop, or no longer respond to the sender, call RemoveCallback to remove the callback.\n    header.RemoveCallback();\n\n    return new { OrderId = orderId, IsSuccess = true };\n}\n</code></pre>"},{"location":"user-guide/en/cap/messaging/#heterogeneous-system-integration","title":"Heterogeneous system integration","text":"<p>In version 3.0+, we reconstructed the message structure. We used the Header in the message protocol in the message queue to transmit some additional information, so that we can do it in the Body without modifying or packaging the user\u2019s original The message data format and content are sent.</p> <p>This approach facilitates better integration with heterogeneous systems. Compared to previous versions, users no longer need to understand the internal message structure used by CAP to complete integration tasks.</p> <p>Now we divide the message into Header and Body for transmission.</p> <p>The data in the body is the content of the original message sent by the user, that is, the content sent by calling the Publish method. We do not perform any packaging, but send it to the message queue after serialization.</p> <p>In the Header, we need to pass some additional information so that the CAP can extract the key features for operation when the message is received.</p> <p>The following is the content that needs to be written into the header of the message when sending a message in a heterogeneous system:</p> Key DataType Description cap-msg-id long Message Id, Generated by snowflake algorithm cap-msg-name string The name of the message cap-msg-type string The type of message, <code>typeof(T).FullName</code>(not required) cap-senttime string sending time (not required) cap-kafka-key string Partitioning by Kafka Key"},{"location":"user-guide/en/cap/messaging/#custom-headers","title":"Custom headers","text":"<p>To consume messages sent without CAP headers, Azure Service Bus, Kafka, and RabbitMQ consumers can inject a minimal set of headers using the <code>CustomHeadersBuilder</code> property as shown below (RabbitMQ example): <pre><code>container.AddCap(x =&gt;\n{\n    x.UseRabbitMQ(z =&gt;\n    {\n        z.ExchangeName = \"TestExchange\";\n        z.CustomHeadersBuilder = (msg, sp) =&gt;\n        [\n            new(DotNetCore.CAP.Messages.Headers.MessageId, sp.GetRequiredService&lt;ISnowflakeId&gt;().NextId().ToString()),\n            new(DotNetCore.CAP.Messages.Headers.MessageName, msg.RoutingKey)\n        ];\n    });\n});\n</code></pre></p> <p>After adding <code>cap-msg-id</code> and <code>cap-msg-name</code>, CAP consumers can receive messages sent directly from external systems, such as the RabbitMQ management tool when using RabbitMQ as a transport.</p> <p>To publish messages with CAP headers:</p> <pre><code>var headers = new Dictionary&lt;string, string?&gt;()\n{\n    { \"cap-kafka-key\", request.OrderId }\n};\n_publisher.Publish&lt;OrderRequest&gt;(\"OrderRequest\", request, headers);\n</code></pre>"},{"location":"user-guide/en/cap/messaging/#scheduling","title":"Scheduling","text":"<p>After CAP receives a message, it sends the message to Transport (RabbitMQ, Kafka...), which handles the transportation.</p> <p>When you send a message using the <code>ICapPublisher</code> interface, CAP dispatches it to the corresponding Transport. Currently, bulk messaging is not supported.</p> <p>For more information on transports, see the Transports section.</p>"},{"location":"user-guide/en/cap/messaging/#storage","title":"Storage","text":"<p>CAP stores messages after receiving them. For more information on storage, see the Storage section.</p>"},{"location":"user-guide/en/cap/messaging/#retry","title":"Retry","text":"<p>Retrying is a crucial aspect of the CAP architecture. CAP retries messages that fail to send or consume, employing several retry strategies throughout its design.</p>"},{"location":"user-guide/en/cap/messaging/#send-retry","title":"Send Retry","text":"<p>When the broker crashes, connection fails, or an abnormality occurs during message sending, CAP retries the send. It performs 3 immediate retries, then after 4 minutes (FallbackWindowLookbackSeconds), it retries every minute with a +1 increment. When the total number of retries reaches 50, CAP stops retrying.</p> <p>You can adjust the total number of retries by setting FailedRetryCount in CapOptions or use FailedThresholdCallback to receive notifications when the maximum retry count is reached.</p> <p>Retries will stop when the maximum is reached. You can see the failure reason in Dashboard and choose whether to manually retry.</p>"},{"location":"user-guide/en/cap/messaging/#consumption-retry","title":"Consumption Retry","text":"<p>When the Consumer receives a message, the consumer method is executed and will retry if an exception occurs. This retry strategy is the same as the send retry.</p> <p>Version 7.1.0 introduced database-based distributed locks to handle concurrent database fetches during retry operations across multiple instances. You need to explicitly configure the <code>UseStorageLock</code> option to true.</p> <p>Whether sending or consumption fails, the exception message is stored in the cap-exception field within the message header. You can find it in the Content field's JSON in the database table.</p>"},{"location":"user-guide/en/cap/messaging/#data-cleanup","title":"Data Cleanup","text":"<p>The database message table has an <code>ExpiresAt</code> field indicating the message expiration time. When a message is sent successfully, its status changes to <code>Successed</code>, and <code>ExpiresAt</code> is set to 1 day later. </p> <p>When consumption fails, the message status changes to <code>Failed</code> and <code>ExpiresAt</code> is set to 15 days later (you can customize this using the FailedMessageExpiredAfter configuration option).</p> <p>By default, messages in the table are deleted every 5 minutes to prevent performance degradation from excessive data. The cleanup process is performed when the <code>ExpiresAt</code> field is not empty and is less than the current time. </p> <p>That is, messages with <code>Failed</code> status (by default, they have been retried 50 times) will also be cleaned up after 15 days if you do not manually intervene.</p> <p>You can customize the cleanup interval time using the CollectorCleaningInterval configuration option.</p>"},{"location":"user-guide/en/cap/serialization/","title":"Serialization","text":"<p>We provide the <code>ISerializer</code> interface to support message serialization. By default, JSON is used to serialize messages and store them in the database.</p>"},{"location":"user-guide/en/cap/serialization/#custom-serialization","title":"Custom Serialization","text":"<pre><code>public class YourSerializer : ISerializer\n{\n    Task&lt;TransportMessage&gt; SerializeAsync(Message message)\n    {\n\n    }\n\n    Task&lt;Message&gt; DeserializeAsync(TransportMessage transportMessage, Type valueType)\n    {\n\n    }\n}\n</code></pre> <p>Then register your serializer implementation in the container:</p> <pre><code>services.AddSingleton&lt;ISerializer, YourSerializer&gt;();\n\nservices.AddCap( /* ... */ );\n</code></pre>"},{"location":"user-guide/en/cap/transactions/","title":"Transaction","text":""},{"location":"user-guide/en/cap/transactions/#distributed-transactions","title":"Distributed Transactions?","text":"<p>CAP does not provide out-of-the-box MS DTC or 2PC (Two-Phase Commit) based distributed transactions. Instead, we provide a solution to handle problems encountered in distributed transactions.</p> <p>In a distributed environment, using 2PC or DTC-based distributed transactions can be expensive due to communication overhead, which affects performance. Additionally, distributed transactions based on 2PC or DTC are subject to the CAP theorem \u2013 when network partitioning occurs, you must sacrifice availability (the A in CAP).</p> <p>A distributed transaction is a very complex process with many moving parts that can fail. Moreover, if these parts run on different machines or in different data centers, the process of committing a transaction can become very long and unreliable.</p> <p>This can seriously affect user experience and overall system bandwidth. So one of the best ways to solve distributed transaction problems is to avoid them completely.<sup>1</sup></p> <p>For handling distributed transactions, CAP uses the \"Eventual Consistency and Compensation\" approach.</p>"},{"location":"user-guide/en/cap/transactions/#eventual-consistency-and-compensation","title":"Eventual Consistency and Compensation <sup>1</sup>","text":"<p>By far, one of the most feasible models of handling consistency across microservices is eventual consistency.</p> <p>This model doesn\u2019t enforce distributed ACID transactions across microservices. Instead, it proposes to use some mechanisms of ensuring that the system would be eventually consistent at some point in the future.</p>"},{"location":"user-guide/en/cap/transactions/#a-case-for-eventual-consistency","title":"A Case for Eventual Consistency","text":"<p>For example, suppose we need to solve the following task:</p> <ul> <li>register a user profile  </li> <li>do some automated background check that the user can actually access the system</li> </ul> <p>Second task is to ensure, for example, that this user wasn\u2019t banned from our servers for some reason.</p> <p>But it could take time, and we\u2019d like to extract it to a separate microservice. It wouldn\u2019t be reasonable to keep the user waiting for so long just to know that he was registered successfully.</p> <p>One way to solve it would be with a message-driven approach including compensation. Let\u2019s consider the following architecture:</p> <ul> <li>the user microservice tasked with registering a user profile  </li> <li>the validation microservice tasked with doing a background check  </li> <li>the messaging platform that supports persistent queues  </li> </ul> <p>The messaging platform could ensure that the messages sent by the microservices are persisted. Then they would be delivered at a later time if the receiver wasn't currently available</p>"},{"location":"user-guide/en/cap/transactions/#best-case-scenario","title":"Best case scenario","text":"<p>In this architecture, best case scenario would be:</p> <ul> <li>the user microservice registers a user, saving information about him in its local database</li> <li>the user microservice marks this user with a flag. It could signify that this user hasn\u2019t yet been validated and doesn\u2019t have access to full system functionality</li> <li>a confirmation of registration is sent to the user with a warning that not all functionality of the system is accessible right away</li> <li>the user microservice sends a message to the validation microservice to do the background check of a user</li> <li>the validation microservice runs the background check and sends a message to the user microservice with the results of the check</li> <li>if the results are positive, the user microservice unblocks the user</li> <li>if the results are negative, the user microservice deletes the user account</li> </ul> <p>After we\u2019ve gone through all these steps, the system should be in a consistent state. However, for some period of time, user entity appeared to be in an incomplete state.</p> <p>The last step, when the user microservice removes the invalid account, is a compensation phase.</p>"},{"location":"user-guide/en/cap/transactions/#failure-scenarios","title":"Failure Scenarios","text":"<p>Now let\u2019s consider some failure scenarios:</p> <ul> <li>if the validation microservice is not accessible, then the messaging platform with its persistent queue functionality ensures that the validation microservice would receive this message at some later time</li> <li>suppose the messaging platform fails, then the user microservice tries to send the message again at some later time, for example, by scheduled batch-processing of all users that were not yet validated</li> <li>if the validation microservice receives the message, validates the user but can\u2019t send the answer back due to the messaging platform failure, the validation microservice also retries sending the message at some later time</li> <li>if one of the messages got lost, or some other failure happened, the user microservice finds all non-validated users by scheduled batch-processing and sends requests for validation again</li> </ul> <p>Even if some of the messages were issued multiple times, this wouldn\u2019t affect the consistency of the data in the microservices\u2019 databases.</p> <p>By carefully considering all possible failure scenarios, we can ensure that our system would satisfy the conditions of eventual consistency. At the same time, we wouldn\u2019t need to deal with the costly distributed transactions.</p> <p>But we have to be aware that ensuring eventual consistency is a complex task. It doesn\u2019t have a single solution for all cases.</p> <ol> <li> <p>This chapter is quoted from: https://www.baeldung.com/transactions-across-microservices \u21a9\u21a9</p> </li> </ol>"},{"location":"user-guide/en/getting-started/contributing/","title":"Contributing","text":"<p>One of the easiest ways to contribute is to participate in discussions and address issues. </p> <p>If you have any questions or problems, please report them on the CAP repository:</p> <p> Report Issue  Active Issues </p>"},{"location":"user-guide/en/getting-started/contributing/#submitting-changes","title":"Submitting Changes","text":"<p>You can also contribute by submitting pull requests with code changes.</p> <p>Pull requests let you tell others about changes you've pushed to a GitHub repository. Once a pull request is opened, you can discuss and review the potential changes with collaborators and add follow-up commits before the changes are merged into the repository.</p>"},{"location":"user-guide/en/getting-started/contributing/#additional-resources","title":"Additional Resources","text":"<ul> <li> <p>Filtering issues and pull requests</p> </li> <li> <p>Using search to filter issues and pull requests</p> </li> </ul>"},{"location":"user-guide/en/getting-started/introduction/","title":"Introduction","text":"<p>CAP is an EventBus and a solution for solving distributed transaction problems in microservices or SOA systems. It helps you create a microservices system that is scalable, reliable, and easy to modify.</p> <p>In Microsoft's eShop microservices sample project, CAP is recommended as the EventBus for production environments.</p> <p>What is EventBus?</p> <p>An EventBus is a mechanism that allows different components to communicate with each other without knowing each other. A component can send an Event to the EventBus without knowing who will pick it up or how many others will. Components can also listen to Events on an EventBus without knowing who sent them. This way, components can communicate without depending on each other. Also, it's very easy to substitute a component \u2013 as long as the new component understands the events being sent and received, other components will never know about the substitution.</p> <p>Compared to other service buses or event buses, CAP has its own characteristics. It does not require users to implement or inherit any interface when sending or processing messages, providing very high flexibility. We believe that convention is greater than configuration, so CAP is very simple to use, very friendly to beginners, and lightweight.</p> <p>CAP is modular in design and highly scalable. You have many options to choose from, including message queues, storage, serialization, and more. Many system elements can be replaced with custom implementations.</p>"},{"location":"user-guide/en/getting-started/introduction/#related-videos","title":"Related videos","text":"<p>Video: bilibili Tutorial</p> <p>Video: Youtube Tutorial</p> <p>Video: Youtube Tutorial - @CodeOpinion </p> <p>Video: Tencent Tutorial</p>"},{"location":"user-guide/en/getting-started/introduction/#related-articles","title":"Related articles","text":"<p>Article: Introduction and how to use</p> <p>Article: New features in version 7.0</p> <p>Article: New features in version 6.0</p> <p>Article: New features in version 5.0</p> <p>Article: New features in version 3.0</p> <p>Article: New features in version 2.6</p> <p>Article: New features in version 2.5</p> <p>Article: New features in version 2.4</p> <p>Article: New features in version 2.3</p> <p>Article: .NET Core Community The first thousand-star project was born: CAP</p>"},{"location":"user-guide/en/getting-started/quick-start/","title":"Quick Start","text":"<p>Learn how to build a microservices event bus architecture using CAP. This offers advantages over directly integrating message queues and provides many out-of-the-box features.</p>"},{"location":"user-guide/en/getting-started/quick-start/#installation","title":"Installation","text":"<pre><code>PM&gt; Install-Package DotNetCore.CAP\n</code></pre>"},{"location":"user-guide/en/getting-started/quick-start/#integrated-in-aspnet-core","title":"Integrated in ASP.NET Core","text":"<p>For a quick start, we use memory-based event storage and message transport.</p> <pre><code>PM&gt; Install-Package DotNetCore.CAP.InMemoryStorage\nPM&gt; Install-Package Savorboard.CAP.InMemoryMessageQueue\n</code></pre> <p>In <code>Startup.cs</code>, add the following configuration:</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    services.AddCap(x =&gt;\n    {\n        x.UseInMemoryStorage();\n        x.UseInMemoryMessageQueue();\n    });\n}\n</code></pre>"},{"location":"user-guide/en/getting-started/quick-start/#publishing-a-message","title":"Publishing a Message","text":"<pre><code>public class PublishController : Controller\n{\n    [Route(\"~/send\")]\n    public IActionResult SendMessage([FromServices] ICapPublisher capBus)\n    {\n        capBus.Publish(\"test.show.time\", DateTime.Now);\n\n        return Ok();\n    }\n}\n</code></pre>"},{"location":"user-guide/en/getting-started/quick-start/#publishing-a-delayed-message","title":"Publishing a Delayed Message","text":"<pre><code>public class PublishController : Controller\n{\n    [Route(\"~/send/delay\")]\n    public IActionResult SendDelayMessage([FromServices] ICapPublisher capBus)\n    {\n        capBus.PublishDelay(TimeSpan.FromSeconds(100), \"test.show.time\", DateTime.Now);\n\n        return Ok();\n    }\n}\n</code></pre>"},{"location":"user-guide/en/getting-started/quick-start/#publishing-with-extra-headers","title":"Publishing with Extra Headers","text":"<pre><code>var header = new Dictionary&lt;string, string&gt;()\n{\n    [\"my.header.first\"] = \"first\",\n    [\"my.header.second\"] = \"second\"\n};\n\ncapBus.Publish(\"test.show.time\", DateTime.Now, header);\n</code></pre>"},{"location":"user-guide/en/getting-started/quick-start/#processing-a-message","title":"Processing a Message","text":"<pre><code>public class ConsumerController : Controller\n{\n    [NonAction]\n    [CapSubscribe(\"test.show.time\")]\n    public void ReceiveMessage(DateTime time)\n    {\n        Console.WriteLine(\"message time is: \" + time);\n    }\n}\n</code></pre>"},{"location":"user-guide/en/getting-started/quick-start/#processing-with-extra-headers","title":"Processing with Extra Headers","text":"<pre><code>[CapSubscribe(\"test.show.time\")]\npublic void ReceiveMessage(DateTime time, [FromCap] CapHeader header)\n{\n    Console.WriteLine(\"message time is: \" + time);\n    Console.WriteLine(\"message first header: \" + header[\"my.header.first\"]);\n    Console.WriteLine(\"message second header: \" + header[\"my.header.second\"]);\n}\n</code></pre>"},{"location":"user-guide/en/getting-started/quick-start/#summary","title":"Summary","text":"<p>One of the most powerful advantages of asynchronous messaging over direct message queue integration is reliability. Failures in one part of the system don't propagate or cause the entire system to crash. Messages are stored inside CAP to ensure message reliability, and strategies such as retries are used to achieve eventual consistency of data between services.</p>"},{"location":"user-guide/en/monitoring/consul/","title":"Consul","text":"<p>Consul is a distributed service mesh tool to connect, secure, and configure services across any runtime platform and public or private cloud.</p>"},{"location":"user-guide/en/monitoring/consul/#consul-configuration-for-dashboard","title":"Consul Configuration for Dashboard","text":"<p>CAP's Dashboard uses Consul for service discovery to retrieve data from other nodes. You can switch to the Servers page to view other nodes.</p> <p></p> <p>Click the <code>Switch</code> button to switch to a different node. CAP will use a proxy to retrieve the data from that node.</p> <p>The following is a configuration example that you need to configure on each node:</p> <pre><code>services.AddCap(x =&gt;\n{\n    x.UseMySql(Configuration.GetValue&lt;string&gt;(\"ConnectionString\"));\n    x.UseRabbitMQ(\"localhost\");\n    x.UseDashboard();\n    x.UseConsulDiscovery(_ =&gt;\n    {\n        _.DiscoveryServerHostName = \"localhost\";\n        _.DiscoveryServerPort = 8500;\n        _.CurrentNodeHostName = Configuration.GetValue&lt;string&gt;(\"ASPNETCORE_HOSTNAME\");\n        _.CurrentNodePort = Configuration.GetValue&lt;int&gt;(\"ASPNETCORE_PORT\");\n        _.NodeId = Configuration.GetValue&lt;string&gt;(\"NodeId\");\n        _.NodeName = Configuration.GetValue&lt;string&gt;(\"NodeName\");\n    });\n});\n</code></pre> <p>Running Consul 1.6.2:</p> <pre><code>consul agent -dev\n</code></pre> <p>Windows 10 with ASP.NET Core 3.1:</p> <pre><code>set ASPNETCORE_HOSTNAME=localhost&amp;&amp; set ASPNETCORE_PORT=5001&amp;&amp; dotnet run --urls=http://localhost:5001 NodeId=1 NodeName=CAP-1 ConnectionString=\"Server=localhost;Database=aaa;UserId=xxx;Password=xxx;\"\nset ASPNETCORE_HOSTNAME=localhost&amp;&amp; set ASPNETCORE_PORT=5002&amp;&amp; dotnet run --urls=http://localhost:5002 NodeId=2 NodeName=CAP-2 ConnectionString=\"Server=localhost;Database=bbb;UserId=xxx;Password=xxx;\"\n</code></pre>"},{"location":"user-guide/en/monitoring/dashboard/","title":"Dashboard","text":"<p>CAP provides a Dashboard for viewing messages. The features provided by the Dashboard make it easy to view and manage messages.</p> <p>Usage Limit</p> <p>The Dashboard is only supported for ASP.NET Core. Console applications are not supported.</p>"},{"location":"user-guide/en/monitoring/dashboard/#enable-dashboard","title":"Enable Dashboard","text":"<p>By default, the Dashboard middleware is not launched. To enable Dashboard functionality, add the following code to your configuration:</p> <pre><code>services.AddCap(x =&gt;\n{\n    // ...\n\n    // Register Dashboard\n    x.UseDashboard();\n});\n</code></pre> <p>By default, you can access the Dashboard at the URL <code>http://localhost:xxx/cap</code>.</p>"},{"location":"user-guide/en/monitoring/dashboard/#dashboard-configuration","title":"Dashboard Configuration","text":"<ul> <li>PathMatch</li> </ul> <p>Default: '/cap'</p> <p>Change the path of the Dashboard by modifying this configuration option.</p> <ul> <li>StatsPollingInterval</li> </ul> <p>Default: 2000ms</p> <p>Configures the polling interval for the Dashboard frontend to get the status from the /stats interface.</p> <ul> <li>AllowAnonymousExplicit</li> </ul> <p>Default: true</p> <p>Explicitly allows anonymous access for the CAP dashboard API by passing AllowAnonymous to the ASP.NET Core global authorization filter.</p> <ul> <li>AuthorizationPolicy</li> </ul> <p>Default: null</p> <p>Authorization policy for the Dashboard. Required if <code>AllowAnonymousExplicit</code> is false.</p>"},{"location":"user-guide/en/monitoring/dashboard/#custom-authentication","title":"Custom Authentication","text":"<p>From version 8.0.0, the CAP Dashboard leverages ASP.NET Core authentication mechanisms, allowing extensibility through custom authorization policies and ASP.NET Core authentication and authorization middlewares. For more details on ASP.NET Core authentication, see the official documentation.</p> <p>You can view the examples below in the <code>Sample.Dashboard.Auth</code> sample project.</p>"},{"location":"user-guide/en/monitoring/dashboard/#example-anonymous-access","title":"Example: Anonymous Access","text":"<pre><code>services.AddCap(cap =&gt;\n    {\n        cap.UseDashboard(d =&gt;\n        {\n            d.AllowAnonymousExplicit = true;\n        });\n        cap.UseInMemoryStorage();\n        cap.UseInMemoryMessageQueue();\n    });\n</code></pre>"},{"location":"user-guide/en/monitoring/dashboard/#example-open-id-connect","title":"Example: Open ID Connect","text":"<pre><code>services\n    .AddAuthorization(options =&gt;\n        { \n            options.AddPolicy(DashboardAuthorizationPolicy, policy =&gt; policy\n                .AddAuthenticationSchemes(OpenIdConnectDefaults.AuthenticationScheme)\n                .RequireAuthenticatedUser());\n        })\n        .AddAuthentication(opt =&gt; opt.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme)\n        .AddCookie()\n        .AddOpenIdConnect(options =&gt;\n        {\n            ...\n        });\n\n    services.AddCap(cap =&gt;\n    {\n        cap.UseDashboard(d =&gt;\n        {\n            d.AuthorizationPolicy = DashboardAuthorizationPolicy;\n        });\n        cap.UseInMemoryStorage();\n        cap.UseInMemoryMessageQueue();\n    });\n</code></pre>"},{"location":"user-guide/en/monitoring/dashboard/#example-custom-authentication-scheme","title":"Example: Custom Authentication Scheme","text":"<pre><code>const string MyDashboardAuthenticationPolicy = \"MyDashboardAuthenticationPolicy\";\n\nservices.AddAuthorization(options =&gt;\n    { \n        options.AddPolicy(MyDashboardAuthenticationPolicy, policy =&gt; policy\n            .AddAuthenticationSchemes(MyDashboardAuthenticationSchemeDefaults.Scheme)\n            .RequireAuthenticatedUser());\n    })\n    .AddAuthentication()\n    .AddScheme&lt;MyDashboardAuthenticationSchemeOptions, MyDashboardAuthenticationHandler&gt;(MyDashboardAuthenticationSchemeDefaults.Scheme, null);\n\nservices.AddCap(cap =&gt;\n    {\n        cap.UseDashboard(d =&gt;\n        {\n            d.AuthorizationPolicy = MyDashboardAuthenticationPolicy;\n        });\n        cap.UseInMemoryStorage();\n        cap.UseInMemoryMessageQueue();\n    });\n</code></pre>"},{"location":"user-guide/en/monitoring/diagnostics/","title":"Diagnostics","text":"<p>Diagnostics provides a set of features that make it easy to document critical operations that occur during application execution, their execution time, etc., allowing administrators to find the root cause of problems, especially in production environments.</p>"},{"location":"user-guide/en/monitoring/diagnostics/#tracing","title":"Tracing","text":"<p>CAP provides support for <code>DiagnosticSource</code> with a listener name of <code>CapDiagnosticListener</code>.</p> <p>Diagnostics provides the following tracing event information:</p> <ul> <li>Before the message is persisted</li> <li>After the message is persisted</li> <li>Message persistence exception</li> <li>Before the message is sent to the message queue</li> <li>After the message is sent to the message queue</li> <li>Message sending exception to the message queue</li> <li>Messages saved from message queue consumption before persistence</li> <li>After messages are saved from message queue consumption</li> <li>Before the subscriber method is executed</li> <li>After the subscriber method is executed</li> <li>Subscriber method execution exception</li> </ul> <p>Related objects can be found in the <code>DotNetCore.CAP.Diagnostics</code> namespace.</p>"},{"location":"user-guide/en/monitoring/diagnostics/#tracing-with-apache-skywalking","title":"Tracing with Apache Skywalking","text":"<p>Skywalking's C# client provides support for CAP Diagnostics. You can use SkyAPM-dotnet for tracking.</p> <p>Read the README to integrate it into your project.</p> <p>Example tracking images:</p> <p></p> <p></p>"},{"location":"user-guide/en/monitoring/diagnostics/#other-apm-support","title":"Other APM Support","text":"<p>Currently, we only support Skywalking. If you want to support CAP diagnostic events in other APMs, you can refer to the code here for implementation. We also welcome Pull Requests.</p>"},{"location":"user-guide/en/monitoring/diagnostics/#metrics","title":"Metrics","text":"<p>Metrics are numerical measurements reported over time. They are typically used to monitor application health and generate alerts. For example, a web service might track the number of requests it receives each second, how many milliseconds it takes to respond, and how many responses return an error to the user.</p> <p>CAP 7.0 is support for <code>EventSource</code>, and the counters name is <code>DotNetCore.CAP.EventCounter</code>.</p> <p>CAP provides the following metrics:</p> <ul> <li>Publish rate pre seconds</li> <li>Consume rate pre seconds</li> <li>Invoke Subscriber rate pre seconds</li> <li>Subscriber elpased time mean pre seconds </li> </ul>"},{"location":"user-guide/en/monitoring/diagnostics/#monitor-with-dotnet-counters","title":"Monitor with dotnet-counters","text":"<p>dotnet-counters is a performance monitoring tool for ad-hoc health monitoring and first-level performance investigation. It can observe performance counter values that are published via the EventCounter API or the Meter API. </p> <p>Use the following commands to monitor metrics in CAP:</p> <pre><code>dotnet-counters ps\ndotnet-counters monitor --process-id=25496 --counters=DotNetCore.CAP.EventCounter\n</code></pre> <p>process-id\uff1a The ID of the CAP process to collect counter data from.</p> <p></p>"},{"location":"user-guide/en/monitoring/diagnostics/#monitor-with-dashboard","title":"Monitor with dashboard","text":"<p>You can configure <code>x.UseDashboard()</code> to open the dashboard to view Metrics graph charts.</p> <p></p> <p>In the Realtime Metric Graph, the time axis will scroll in real time over time so that you can see the rate of publishing and consuming messages per second, And the consumer execution time is \"dotted\" on the Y1 axis (Y0 axis is the rates, and the Y1 axis is the execution elpsed time).</p>"},{"location":"user-guide/en/monitoring/kubernetes/","title":"Kubernetes","text":"<p>Kubernetes, also known as K8s, is an open-source system for automating deployment, scaling, and management of containerized applications.</p>"},{"location":"user-guide/en/monitoring/kubernetes/#kubernetes-in-the-dashboard","title":"Kubernetes in the Dashboard","text":"<p>The Dashboard has supported Kubernetes as a service discovery mechanism since version 7.2.0. You can navigate to the Nodes page, select a Kubernetes namespace, and CAP will list all Services within that namespace. After clicking the Switch button, the Dashboard will check if the CAP service of that node is available. If it is, the Dashboard will proxy to the switched node to display data.</p> <p>Here is a configuration example:</p> <pre><code>services.AddCap(x =&gt;\n{\n    // ...\n    x.UseDashboard();\n    x.UseK8sDiscovery();\n});\n</code></pre>"},{"location":"user-guide/en/monitoring/kubernetes/#usek8sdiscovery-configuration","title":"UseK8sDiscovery Configuration","text":"<p>This configuration option controls whether the Dashboard/Nodes page lists every K8s <code>Service</code> by default. If set to <code>True</code>, only services with the <code>dotnetcore.cap.visibility: show</code> label will be listed. See the Kubernetes Labels Configuration section for more information about labels.</p> <ul> <li>ShowOnlyExplicitVisibleNodes </li> </ul> <p>Default: false</p> <pre><code>services.AddCap(x =&gt;\n{\n    // ...\n    x.UseK8sDiscovery(opt =&gt;\n    {\n        opt.ShowOnlyExplicitVisibleNodes = true;\n    });\n});\n</code></pre> <p>The component automatically detects whether it is running inside a Kubernetes cluster. If it is, the Pod must be granted Kubernetes API permissions. Refer to the next section.</p>"},{"location":"user-guide/en/monitoring/kubernetes/#assigning-pod-access-to-kubernetes-api","title":"Assigning Pod Access to Kubernetes API","text":"<p>If the ServiceAccount associated with your Deployment does not have access to the Kubernetes API, you must grant <code>namespaces</code> and <code>services</code> resources with <code>get</code> and <code>list</code> permissions.</p> <p>Here is an example YAML. First, create a ServiceAccount and ClusterRole with the appropriate permissions, then bind them using ClusterRoleBinding. Finally, use <code>serviceAccountName: api-access</code> in your Deployment.</p> <pre><code>apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: api-access\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: ns-svc-reader\nrules:\n- apiGroups: [\"\"]\n  resources: [\"namespaces\", \"services\"]\n  verbs: [\"get\", \"watch\", \"list\"]\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: read-pods\nsubjects:\n- kind: ServiceAccount\n  name: api-access\n  namespace: default\nroleRef:\n  kind: ClusterRole\n  name: ns-svc-reader\n  apiGroup: rbac.authorization.k8s.io\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: api-access-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: api-access-app\n  template:\n    metadata:\n      labels:\n        app: api-access-app\n    spec:\n      serviceAccountName: api-access\n      containers:\n      - name: api-access-container\n        image: your_image\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: api-access-service\nspec:\n  selector:\n    app: api-access-app\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n</code></pre> <p>From version <code>8.3.0</code> and onwards you can use a <code>Role</code> instead of <code>ClusterRole</code> to allow discovery of services only inside the namespace that the dashboard is running. Kubernetes Roles has limited jurisdiction inside the namespace. In the above example just remove ClusterRole and ClusterRoleBinding and instead use the following: </p> <pre><code>apiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: ns-svc-reader\nrules:\n- apiGroups: [\"\"]\n  resources: [\"services\"]\n  verbs: [\"get\", \"watch\", \"list\"]\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: read-pods\nsubjects:\n- kind: ServiceAccount\n  name: api-access\n  namespace: default\nroleRef:\n  kind: ClusterRole\n  name: ns-svc-reader\n  apiGroup: rbac.authorization.k8s.io\n</code></pre>"},{"location":"user-guide/en/monitoring/kubernetes/#kubernetes-labels-configuration","title":"Kubernetes Labels Configuration","text":"<p>The list of Nodes showed in the dashboard can be controlled by adding labels to the to your kubernetes services. </p> <ul> <li> <p><code>dotnetcore.cap.visibility</code> label is used to show or hide a service from the list. </p> <p>Allowed Values: show | hide</p> <p>Examples: <code>dotnetcore.cap.visibility: show</code> or <code>dotnetcore.cap.visibility: hide</code></p> </li> </ul> <p>By default every k8s service is listed with the first port found in the service. However if more ports are present on the service you can select the wanted by using the following labels: </p> <ul> <li> <p><code>dotnetcore.cap.portName</code> label is used to filter the wanted port of the service. </p> <p>Allowed Values: string</p> <p>Examples: <code>dotnetcore.cap.portName: grpc</code> or <code>dotnetcore.cap.portName: http</code></p> </li> </ul> <p>If not found any port with the given name, it will try to match the next label portIndex</p> <ul> <li> <p><code>dotnetcore.cap.portIndex</code> label is used to filter the wanted port of the service. This filter is taken into consideration only if no label portName is set or a non matching portName is set.</p> <p>Allowed Values: number represented as string ex: '2' or '14'</p> <p>Examples: <code>dotnetcore.cap.portIndex: '1'</code> or <code>dotnetcore.cap.portIndex: '3'</code></p> </li> </ul> <p>If the provided index is outside of bounds then it will fallback to the first port (index:0)</p>"},{"location":"user-guide/en/monitoring/kubernetes/#using-dashboard-standalone","title":"Using Dashboard Standalone","text":"<p>You can use the Dashboard standalone without configuring CAP, in this case, the Dashboard can be deployed as a separate Pod in the Kubernetes cluster just for data viewing. The service to be viewed no longer needs to configure the <code>cap.UseK8sDiscovery()</code> option.</p> <pre><code>services.AddCapDashboardStandalone();\n</code></pre> <p>Similarly, you need to configure the access for the ServiceAccount for this Pod.</p>"},{"location":"user-guide/en/monitoring/opentelemetry/","title":"OpenTelemetry","text":"<p>https://opentelemetry.io/</p> <p>OpenTelemetry is a collection of tools, APIs, and SDKs that helps you instrument, generate, collect, and export telemetry data (metrics, logs, and traces). This data helps you analyze your software's performance and behavior.nTelemetry </p> <p>https://opentelemetry.io/</p> <p>OpenTelemetry is a collection of tools, APIs, and SDKs. Use it to instrument, generate, collect, and export telemetry data (metrics, logs, and traces) to help you analyze your software\u2019s performance and behavior.</p>"},{"location":"user-guide/en/monitoring/opentelemetry/#integration","title":"Integration","text":"<p>You can find information about using OpenTelemetry in console applications or ASP.NET Core here. Here we mainly describe how to trace CAP data to OpenTelemetry.</p>"},{"location":"user-guide/en/monitoring/opentelemetry/#configuration","title":"Configuration","text":"<p>Install the CAP OpenTelemetry package into your project:</p> <pre><code>dotnet add package DotNetCore.CAP.OpenTelemetry\n</code></pre> <p>OpenTelemetry data comes from Diagnostics. Add the CAP instrumentation to your OpenTelemetry configuration:</p> <pre><code>services.AddOpenTelemetryTracing((builder) =&gt; builder\n    .AddAspNetCoreInstrumentation()\n    .AddCapInstrumentation()    // &lt;-- Add this line\n    .AddZipkinExporter()\n);\n</code></pre> <p>If you don't use a framework that handles this automatically (like ASP.NET Core), make sure you enable a listener. For example:</p> <p><pre><code>ActivitySource.AddActivityListener(new ActivityListener()\n{\n    ShouldListenTo = _ =&gt; true,\n    Sample = (ref ActivityCreationOptions&lt;ActivityContext&gt; _) =&gt; ActivitySamplingResult.AllData,\n    ActivityStarted = activity =&gt; Console.WriteLine($\"{activity.ParentId}:{activity.Id} - Start\"),\n    ActivityStopped = activity =&gt; Console.WriteLine($\"{activity.ParentId}:{activity.Id} - Stop\")\n});\n</code></pre> Here is a diagram of CAP's tracking data in Zipkin:</p> <p></p>"},{"location":"user-guide/en/monitoring/opentelemetry/#context-propagation","title":"Context Propagation","text":"<p>CAP supports Context Propagation by injecting <code>traceparent</code> and <code>baggage</code> headers when sending messages and restoring the context from those headers when receiving messages.</p> <p>CAP uses the configured <code>Propagators.DefaultTextMapPropagator</code> propagator, which is usually set to both <code>TraceContextPropagator</code> and <code>BaggagePropagator</code> by the dotnet OpenTelemetry SDK, but can be configured in your client program. For example, to opt out of Baggage propagation, you can call:</p> <pre><code>OpenTelemetry.Sdk.SetDefaultTextMapPropagator(\n    new TraceContextPropagator());\n</code></pre> <p>For more details, see the dotnet OpenTelemetry.Api README.</p>"},{"location":"user-guide/en/samples/eshoponcontainers/","title":"eShopOnContainers","text":"<p>eShopOnContainers is a sample application written in C# running on .NET Core that uses a microservice architecture and Domain Driven Design.</p> <p>A .NET Core reference application powered by Microsoft, based on a simplified microservices architecture with Docker containers.</p> <p>This reference application is cross-platform on both server and client sides, thanks to .NET Core services that can run on Linux or Windows containers depending on your Docker host, and Xamarin for mobile apps running on Android, iOS, or Windows/UWP, plus any browser for client web apps.</p> <p>The architecture demonstrates a microservice-oriented implementation with multiple autonomous microservices (each owning its own data/database) and implementing different approaches within each microservice (simple CRUD vs. DDD/CQRS patterns). It uses HTTP as the communication protocol between client apps and microservices, and supports asynchronous communication for data propagation across services based on Integration Events and an Event Bus (a lightweight message broker that you can choose between RabbitMQ or Azure Service Bus) plus other features in the roadmap.</p>"},{"location":"user-guide/en/samples/eshoponcontainers/#eshoponcontainers-with-cap","title":"eShopOnContainers with CAP","text":"<p>You can see how to use CAP in eShopOnContainers in the GitHub repository:</p> <p>https://github.com/yang-xiaodong/eShopOnContainers</p>"},{"location":"user-guide/en/samples/faq/","title":"FAQ","text":"<p>Is there an IM group (e.g., Tencent QQ group) to learn and chat about CAP?</p> <p>There is not. Instead of spending time in IM groups, I encourage developers to develop independent thinking skills and solve problems using the documentation. You can also create issues or send emails if problems persist.</p> <p>Does each application need a separate database for producer and consumer in CAP?</p> <p>Not necessarily. A recommendation is to use a dedicated database for each application. However, see the Q&amp;A below for alternatives.</p> <p>How can I use the same database for different applications?</p> <p>Define a table prefix name in the <code>ConfigureServices</code> method.</p> <p>Code example:</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    services.AddCap(x =&gt;\n    {\n        x.UseKafka(\"\");\n        x.UseMySql(opt =&gt;\n        {\n            opt.ConnectionString = \"connection string\";\n            opt.TableNamePrefix = \"appone\"; // Use different table name prefix here\n        });\n    });\n}\n</code></pre> <p>Can CAP avoid using the database for event storage? I just want to send messages.</p> <p>Not yet. CAP's purpose is to ensure consistency in microservice or SOA architectures. The solution is based on ACID features of the database. There's no point in a simple message queue wrapper without database support.</p> <p>If the consumer fails, can I roll back the SQL executed by the producer?</p> <p>No, you cannot roll back. CAP provides eventual consistency, not immediate rollback.</p> <p>Consider a scenario where you call a third-party payment service. If you successfully call Alipay's interface but your own code fails afterward, will Alipay roll back? If not, what should you do? The same principle applies here.</p>"},{"location":"user-guide/en/samples/github/","title":"GitHub Samples","text":"<p>You can find sample code in the GitHub repository:</p> <p>https://github.com/dotnetcore/CAP/tree/master/samples</p> <p>CAP + Aspire + Azure Service Bus + Azure SQL:</p> <p>https://github.com/NikiforovAll/cap-aspire</p>"},{"location":"user-guide/en/storage/general/","title":"General","text":"<p>CAP requires a storage medium with persistence capabilities to store event messages in databases or other NoSQL facilities. CAP uses this approach to protect against message loss in any environment or network issues. Reliability of messages is the cornerstone of distributed transactions, so messages must never be lost.</p>"},{"location":"user-guide/en/storage/general/#persistence","title":"Persistence","text":""},{"location":"user-guide/en/storage/general/#before-sent","title":"Before Sent","text":"<p>Before the message enters the message queue, CAP persists the message in a local database table. This ensures that the message is not lost when the message queue is unavailable or a network error occurs.</p> <p>To ensure the reliability of this mechanism, CAP uses the same database transactions as the business code to ensure that business operations and CAP messages are consistent during persistence. If any exception occurs during message persistence, the database will roll back.</p>"},{"location":"user-guide/en/storage/general/#after-sent","title":"After Sent","text":"<p>After the message enters the message queue, CAP starts the persistence function of the message queue. Here's how CAP messages are persisted in RabbitMQ and Kafka.</p> <p>For message persistence in RabbitMQ, CAP uses a consumer queue with message persistence, though exceptions may occur.</p> <p>Ready for Production?</p> <p>By default, queues registered by CAP in RabbitMQ are persistent. For production use, we recommend that you start all consumers once to create persistent queues. This ensures all queues are created before messages are sent.</p> <p>Since Kafka has built-in message persistence using files, it automatically ensures that messages are properly persisted without loss once they enter Kafka.</p>"},{"location":"user-guide/en/storage/general/#storage","title":"Storage","text":""},{"location":"user-guide/en/storage/general/#supported-storages","title":"Supported storages","text":"<p>CAP supports the following types of transaction-enabled databases for storage:</p> <ul> <li>SQL Server</li> <li>MySQL</li> <li>PostgreSql</li> <li>MongoDB</li> <li>In-Memory Storage</li> </ul> <p>After CAP is started, two tables are generated in used storage, by default the name is <code>Cap.Published</code> and <code>Cap.Received</code>.</p>"},{"location":"user-guide/en/storage/general/#storage-data-structure","title":"Storage Data Structure","text":"<p>Table structure of Published :</p> NAME DESCRIPTION TYPE Id Message Id int Version Message Version string Name Topic Name string Content Json Content string Added Added Time DateTime ExpiresAt Expire time DateTime Retries Retry times int StatusName Status Name string <p>Table structure of Received :</p> NAME DESCRIPTION TYPE Id Message Id int Version Message Version string Name Topic Name string Group Group Name string Content Json Content string Added Added Time DateTime ExpiresAt Expire time DateTime Retries Retry times int StatusName Status Name string <p>Table structure of Lock (Optional):</p> NAME DESCRIPTION TYPE Key Lock Id string Instance Acquired instance of lock string LastLockTime Last acquired lock time DateTime"},{"location":"user-guide/en/storage/general/#wapper-object","title":"Wapper Object","text":"<p>When CAP sends a message, it will store original message object in a second package in the <code>Content</code> field. </p> <p>The following is the Wapper Object data structure of Content field.</p> NAME DESCRIPTION TYPE Id Message Id string Timestamp Message created time string Content Message content string CallbackName Consumer callback topic name string <p>The <code>Id</code> field is generate using the mongo objectid algorithm.</p>"},{"location":"user-guide/en/storage/general/#community-supported-extensions","title":"Community-supported extensions","text":"<p>Thanks to the community for supporting CAP, the following is the implementation of community-supported storage</p> <ul> <li> <p>SQLite (@colinin) \uff1ahttps://github.com/colinin/DotNetCore.CAP.Sqlite </p> </li> <li> <p>LiteDB (@maikebing) \uff1ahttps://github.com/maikebing/CAP.Extensions</p> </li> <li> <p>SQLite &amp; Oracle (@cocosip) \uff1ahttps://github.com/cocosip/CAP-Extensions </p> </li> </ul>"},{"location":"user-guide/en/storage/in-memory-storage/","title":"In-Memory Storage","text":"<p>In-memory storage is commonly used in development and test environments. However, if you use memory-based storage, you lose the reliability guarantee of local transaction messages.</p>"},{"location":"user-guide/en/storage/in-memory-storage/#configuration","title":"Configuration","text":"<p>To use in-memory storage, you need to install the following package from NuGet:</p> <pre><code>PM&gt; Install-Package DotNetCore.CAP.InMemoryStorage\n</code></pre> <p>Next, add configuration items to the <code>ConfigureServices</code> method of <code>Startup.cs</code>.</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n\n    services.AddCap(x =&gt;\n    {\n        x.UseInMemoryStorage();\n        // x.UseXXX ...\n    });\n}\n</code></pre> <p>CAP will clean successful messages from memory every 5 minutes.</p>"},{"location":"user-guide/en/storage/in-memory-storage/#publish-with-transaction","title":"Publish with transaction","text":"<p>In-memory storage does not support transactional message publishing.</p>"},{"location":"user-guide/en/storage/mongodb/","title":"MongoDB","text":"<p>MongoDB is a cross-platform, document-oriented database program. Classified as a NoSQL database, MongoDB uses JSON-like documents with dynamic schema.</p> <p>CAP has supported MongoDB since version 2.3. MongoDB supports ACID transactions starting from version 4.0, so CAP requires MongoDB 4.0 or higher. Additionally, MongoDB must be deployed as a cluster because ACID transactions require a replica set.</p> <p>For a quick development of the MongoDB 4.0+ cluster for the development environment, you can refer to this article.</p>"},{"location":"user-guide/en/storage/mongodb/#configuration","title":"Configuration","text":"<p>To use MongoDB storage, you need to install the following package from NuGet:</p> <pre><code>PM&gt; Install-Package DotNetCore.CAP.MongoDB\n</code></pre> <p>Next, add configuration items to the <code>ConfigureServices</code> method of <code>Startup.cs</code>.</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n\n    services.AddCap(x =&gt;\n    {\n        x.UseMongoDB(opt=&gt;{\n            //MongoDBOptions\n        });\n        // x.UseXXX ...\n    });\n}\n</code></pre>"},{"location":"user-guide/en/storage/mongodb/#mongodb-options","title":"MongoDB Options","text":"NAME DESCRIPTION TYPE DEFAULT DatabaseName Database name string cap DatabaseConnection Database connection string string mongodb://localhost:27017 ReceivedCollection Database received message collection name string cap.received PublishedCollection Database published message collection name string cap.published"},{"location":"user-guide/en/storage/mongodb/#publish-with-transaction","title":"Publish with transaction","text":"<p>The following example shows how to integrate CAP with MongoDB for local transactions:</p> <pre><code>// NOTE: Before testing, you need to create the database and collection first.\n// MongoDB cannot automatically create databases and collections within transactions,\n// so you must create them separately. For example, insert a record to auto-create the collection.\n\n// var mycollection = _client.GetDatabase(\"test\")\n//          .GetCollection&lt;BsonDocument&gt;(\"test.collection\");\n// mycollection.InsertOne(new BsonDocument { { \"test\", \"test\" } });\n\nusing (var session = _client.StartTransaction(_capBus, autoCommit: false))\n{\n    var collection = _client.GetDatabase(\"test\")\n            .GetCollection&lt;BsonDocument&gt;(\"test.collection\");\n\n    collection.InsertOne(session, new BsonDocument { { \"hello\", \"world\" } });\n\n    _capBus.Publish(\"sample.rabbitmq.mongodb\", DateTime.Now);\n\n    session.CommitTransaction();\n}\n</code></pre>"},{"location":"user-guide/en/storage/mysql/","title":"MySQL","text":"<p>MySQL is an open-source relational database management system. CAP fully supports MySQL. </p>"},{"location":"user-guide/en/storage/mysql/#configuration","title":"Configuration","text":"<p>To use MySQL storage, you need to install the following package from NuGet: <pre><code>PM&gt; Install-Package DotNetCore.CAP.MySql\n</code></pre></p> <p>Next, add configuration items to the <code>ConfigureServices</code> method of <code>Startup.cs</code>.</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n\n    services.AddCap(x =&gt;\n    {\n        x.UseMySql(opt=&gt;{\n            //MySqlOptions\n        });\n        // x.UseXXX ...\n    });\n}\n</code></pre>"},{"location":"user-guide/en/storage/mysql/#mysqloptions","title":"MySqlOptions","text":"NAME DESCRIPTION TYPE DEFAULT TableNamePrefix CAP table name prefix string cap ConnectionString Database connection string string null"},{"location":"user-guide/en/storage/mysql/#publish-with-transaction","title":"Publish with transaction","text":""},{"location":"user-guide/en/storage/mysql/#adonet-with-transaction","title":"ADO.NET with Transaction","text":"<pre><code>private readonly ICapPublisher _capBus;\n\nusing (var connection = new MySqlConnection(AppDbContext.ConnectionString))\n{\n    using (var transaction = connection.BeginTransaction(_capBus, autoCommit: false))\n    {\n        // Your business code\n        connection.Execute(\"insert into test(name) values('test')\", \n            transaction: (IDbTransaction)transaction.DbTransaction);\n\n        _capBus.Publish(\"sample.rabbitmq.mysql\", DateTime.Now);\n\n        transaction.Commit();\n    }\n}\n</code></pre>"},{"location":"user-guide/en/storage/mysql/#entity-framework-with-transaction","title":"Entity Framework with Transaction","text":"<pre><code>private readonly ICapPublisher _capBus;\n\nusing (var trans = dbContext.Database.BeginTransaction(_capBus, autoCommit: false))\n{\n    dbContext.Persons.Add(new Person() { Name = \"ef.transaction\" });\n\n    _capBus.Publish(\"sample.rabbitmq.mysql\", DateTime.Now);\n\n    dbContext.SaveChanges();\n    trans.Commit();\n}\n</code></pre>"},{"location":"user-guide/en/storage/postgresql/","title":"PostgreSQL","text":"<p>PostgreSQL is an open-source relational database management system. CAP fully supports PostgreSQL. </p>"},{"location":"user-guide/en/storage/postgresql/#configuration","title":"Configuration","text":"<p>To use PostgreSQL storage, you need to install the following package from NuGet:</p> <pre><code>PM&gt; Install-Package DotNetCore.CAP.PostgreSql\n</code></pre> <p>Next, add configuration items to the <code>ConfigureServices</code> method of <code>Startup.cs</code>.</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n\n    services.AddCap(x =&gt;\n    {\n        x.UsePostgreSql(opt=&gt;{\n            //PostgreSqlOptions\n        }); \n        // x.UseXXX ...\n    });\n}\n</code></pre>"},{"location":"user-guide/en/storage/postgresql/#postgresqloptions","title":"PostgreSqlOptions","text":"NAME DESCRIPTION TYPE DEFAULT Schema Database schema string cap ConnectionString Database connection string string DataSource Data source NpgsqlDataSource"},{"location":"user-guide/en/storage/postgresql/#publish-with-transaction","title":"Publish with transaction","text":""},{"location":"user-guide/en/storage/postgresql/#adonet-with-transaction","title":"ADO.NET with Transaction","text":"<pre><code>private readonly ICapPublisher _capBus;\n\nusing (var connection = new NpgsqlConnection(\"ConnectionString\"))\n{\n    using (var transaction = connection.BeginTransaction(_capBus, autoCommit: false))\n    {\n        // Your business code\n        connection.Execute(\"insert into test(name) values('test')\", \n            transaction: (IDbTransaction)transaction.DbTransaction);\n\n        _capBus.Publish(\"sample.rabbitmq.mysql\", DateTime.Now);\n\n        transaction.Commit();\n    }\n}\n</code></pre>"},{"location":"user-guide/en/storage/postgresql/#entity-framework-with-transaction","title":"Entity Framework with Transaction","text":"<pre><code>private readonly ICapPublisher _capBus;\n\nusing (var trans = dbContext.Database.BeginTransaction(_capBus, autoCommit: false))\n{\n    dbContext.Persons.Add(new Person() { Name = \"ef.transaction\" });\n\n    _capBus.Publish(\"sample.rabbitmq.mysql\", DateTime.Now);\n\n    dbContext.SaveChanges();\n    trans.Commit();\n}\n</code></pre>"},{"location":"user-guide/en/storage/sqlserver/","title":"SQL Server","text":"<p>SQL Server is a relational database management system developed by Microsoft. CAP fully supports SQL Server. </p> <p>Warning</p> <p>We currently use <code>Microsoft.Data.SqlClient</code> as the database driver, which is the future of SQL Server drivers. We have deprecated <code>System.Data.SqlClient</code> and recommend upgrading to the new driver.</p>"},{"location":"user-guide/en/storage/sqlserver/#configuration","title":"Configuration","text":"<p>To use SQL Server storage, you need to install the following package from NuGet:</p> <pre><code>PM&gt; Install-Package DotNetCore.CAP.SqlServer\n</code></pre> <p>Next, add configuration items to the <code>ConfigureServices</code> method of <code>Startup.cs</code>.</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n\n    services.AddCap(x =&gt;\n    {\n        x.UseSqlServer(opt=&gt;{\n            //SqlServerOptions\n        }); \n        // x.UseXXX ...\n    });\n}\n</code></pre>"},{"location":"user-guide/en/storage/sqlserver/#sqlserveroptions","title":"SqlServerOptions","text":"NAME DESCRIPTION TYPE DEFAULT Schema Database schema string Cap ConnectionString Database connection string string"},{"location":"user-guide/en/storage/sqlserver/#publish-with-transaction","title":"Publish with transaction","text":""},{"location":"user-guide/en/storage/sqlserver/#adonet-with-transaction","title":"ADO.NET with Transaction","text":"<pre><code>private readonly ICapPublisher _capBus;\n\nusing (var connection = new SqlConnection(\"ConnectionString\"))\n{\n    using (var transaction = connection.BeginTransaction(_capBus, autoCommit: false))\n    {\n        // Your business code\n        connection.Execute(\"insert into test(name) values('test')\", \n            transaction: (IDbTransaction)transaction.DbTransaction);\n\n        _capBus.Publish(\"sample.rabbitmq.mysql\", DateTime.Now);\n\n        transaction.Commit();\n    }\n}\n</code></pre>"},{"location":"user-guide/en/storage/sqlserver/#entity-framework-with-transaction","title":"Entity Framework with Transaction","text":"<pre><code>private readonly ICapPublisher _capBus;\n\nusing (var trans = dbContext.Database.BeginTransaction(_capBus, autoCommit: false))\n{\n    dbContext.Persons.Add(new Person() { Name = \"ef.transaction\" });\n\n    _capBus.Publish(\"sample.rabbitmq.mysql\", DateTime.Now);\n\n    dbContext.SaveChanges();\n    trans.Commit();\n}\n</code></pre>"},{"location":"user-guide/en/transport/aws-sqs/","title":"Amazon SQS","text":"<p>AWS SQS is a fully managed message queuing service that enables you to decouple and scale microservices, distributed systems, and serverless applications.</p> <p>AWS SNS is a highly available, durable, secure, fully managed pub/sub messaging service that enables you to decouple microservices, distributed systems, and serverless applications.</p>"},{"location":"user-guide/en/transport/aws-sqs/#how-cap-uses-aws-sns-and-sqs","title":"How CAP Uses AWS SNS and SQS","text":""},{"location":"user-guide/en/transport/aws-sqs/#sns","title":"SNS","text":"<p>Because CAP works based on the topic pattern, it requires AWS SNS, which simplifies the publish-subscribe architecture for messaging.</p> <p>When CAP starts, all subscription names are registered as SNS topics. You will see a list of all registered topics in the AWS management console.</p> <p>SNS does not support certain characters such as <code>.</code>, <code>:</code> in topic names, so CAP replaces them. It replaces <code>.</code> with <code>-</code> and <code>:</code> with <code>_</code>.</p> <p>Precautions</p> <p>Amazon SNS currently limits published messages to a maximum size of 256 KB.</p> <p>For example, you have the following two subscriber methods in your current project</p> <p><pre><code>[CapSubscribe(\"sample.sns.foo\")]\npublic void TestFoo(DateTime value)\n{\n}\n\n[CapSubscribe(\"sample.sns.bar\")]\npublic void TestBar(DateTime value)\n{\n}\n</code></pre> After CAP startups, you will see in SNS management console:</p> <p></p>"},{"location":"user-guide/en/transport/aws-sqs/#sqs","title":"SQS","text":"<p>For each consumer group, CAP will create a corresponding SQS queue. The queue name is the value of <code>DefaultGroup</code> in the configuration options, and the queue type is Standard.</p> <p>The SQS queue will subscribe to the SNS topic as shown below:</p> <p></p> <p>Precautions</p> <p>Due to AWS SNS limitations, when you remove a subscription method, CAP will not automatically delete the topics or queues in AWS SNS or SQS. You need to delete them manually.</p>"},{"location":"user-guide/en/transport/aws-sqs/#configuration","title":"Configuration","text":"<p>To use AWS SQS as a transporter, you need to install the following package from NuGet:</p> <pre><code>Install-Package DotNetCore.CAP.AmazonSQS\n</code></pre> <p>Next, add configuration items to the <code>ConfigureServices</code> method of <code>Startup.cs</code>:</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n\n    services.AddCap(x =&gt;\n    {\n        x.UseAmazonSQS(opt=&gt;\n        {\n            //AmazonSQSOptions\n        });\n        // x.UseXXX ...\n    });\n}\n</code></pre>"},{"location":"user-guide/en/transport/aws-sqs/#amazonsqs-options","title":"AmazonSQS Options","text":"<p>The SQS configuration parameters provided directly by the CAP:</p> NAME DESCRIPTION TYPE DEFAULT Region AWS Region Amazon.RegionEndpoint Credentials AWS AK SK Information Amazon.Runtime.AWSCredentials <p>If your application runs on AWS EC2, you don't need to set credentials. Instead, you can directly apply an IAM policy to the EC2 instance.</p> <p>Credentials require SNS and SQS IAM permissions.</p>"},{"location":"user-guide/en/transport/azure-service-bus/","title":"Azure Service Bus","text":"<p>Microsoft Azure Service Bus is a fully managed enterprise integration message broker. Service Bus is most commonly used to decouple applications and services, and is a reliable and secure platform for asynchronous data and state transfer.</p> <p>Azure Service Bus can be used in CAP as a message transporter.</p>"},{"location":"user-guide/en/transport/azure-service-bus/#configuration","title":"Configuration","text":"<p>Requirement</p> <p>For the Service Bus pricing tier, CAP requires \"Standard\" or \"Premium\" to support Topic functionality.</p> <p>To use Azure Service Bus as a message transporter, you need to install the following package from NuGet:</p> <pre><code>PM&gt; Install-Package DotNetCore.CAP.AzureServiceBus\n</code></pre> <p>Next, add configuration items to the <code>ConfigureServices</code> method of <code>Startup.cs</code>:</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n\n    services.AddCap(x =&gt;\n    {\n        x.UseAzureServiceBus(opt=&gt;\n        {\n            //AzureServiceBusOptions\n        });\n        // x.UseXXX ...\n    });\n}\n</code></pre>"},{"location":"user-guide/en/transport/azure-service-bus/#azure-service-bus-options","title":"Azure Service Bus Options","text":"<p>The Azure Service Bus configuration options provided by CAP:</p> NAME DESCRIPTION TYPE DEFAULT ConnectionString Endpoint address string TopicPath Topic entity path string cap EnableSessions Enable Service bus sessions bool false MaxConcurrentSessions The maximum number of concurrent sessions that the processor can handle. Not applicable when EnableSessions is false. int 8 SessionIdleTimeout The maximum time to wait for a new message before the session is closed. If not specified, 60 seconds will be used by Azure Service Bus. TimeSpan null SubscriptionAutoDeleteOnIdle Automatically delete subscription after a certain idle interval. TimeSpan TimeSpan.MaxValue SubscriptionMessageLockDuration The amount of time the message is locked by a given receiver so that no other receiver receives the same message. TimeSpan 60 seconds SubscriptionDefaultMessageTimeToLive The default message time to live value for a subscription. This is the duration after which the message expires. TimeSpan TimeSpan.MaxValue SubscriptionMaxDeliveryCount The maximum number of times a message is delivered to the subscription before it is dead-lettered. int 10 MaxAutoLockRenewalDuration The maximum duration within which the lock will be renewed automatically. This value should be greater than the longest message lock duration. TimeSpan 5 minutes ManagementTokenProvider Token provider ITokenProvider null AutoCompleteMessages Gets a value that indicates whether the processor should automatically complete messages after the message handler has completed processing bool false CustomHeadersBuilder Adds custom and/or mandatory Headers for incoming messages from heterogeneous systems. <code>Func&lt;Message, IServiceProvider, List&lt;KeyValuePair&lt;string, string&gt;&gt;&gt;?</code> null Namespace Namespace of Servicebus , Needs to be set when using with TokenCredential Property string null DefaultCorrelationHeaders Adds additional correlation properties to all correlation filters. IDictionary Dictionary.Empty SQLFilters Custom SQL Filters by name and expression on Topic Subscribtion List&gt; null"},{"location":"user-guide/en/transport/azure-service-bus/#sessions","title":"Sessions","text":"<p>When sessions are enabled (see the <code>EnableSessions</code> option above), every message sent will have a session ID. To control the session ID, include an extra header with the name <code>AzureServiceBusHeaders.SessionId</code> when publishing events:</p> <pre><code>ICapPublisher capBus = ...;\nstring yourEventName = ...;\nYourEventType yourEvent = ...;\n\nDictionary&lt;string, string&gt; extraHeaders = new Dictionary&lt;string, string&gt;();\nextraHeaders.Add(AzureServiceBusHeaders.SessionId, &lt;your-session-id&gt;);\n\ncapBus.Publish(yourEventName, yourEvent, extraHeaders);\n</code></pre> <p>If no session ID header is present, the message ID will be used as the session ID.</p>"},{"location":"user-guide/en/transport/azure-service-bus/#heterogeneous-systems","title":"Heterogeneous Systems","text":"<p>Sometimes you might want to listen to a message published by an external system. In this case, you need to add a set of two mandatory headers for CAP compatibility, as shown below:</p> <pre><code>c.UseAzureServiceBus(asb =&gt;\n{\n    asb.ConnectionString = ...\n    asb.CustomHeadersBuilder = (msg, sp) =&gt;\n    [\n        new(DotNetCore.CAP.Messages.Headers.MessageId, sp.GetRequiredService&lt;ISnowflakeId&gt;().NextId().ToString()),\n        new(DotNetCore.CAP.Messages.Headers.MessageName, msg.RoutingKey)\n    ];\n});\n</code></pre>"},{"location":"user-guide/en/transport/azure-service-bus/#sql-filters","title":"SQL Filters","text":"<p>You can set SQL filters on the subscription level to get desired messages without having custom logic on the business side. For more information, see Azure Service Bus SQL Filters.</p> <p><code>SQLFilters</code> is a list of <code>KeyValuePair&lt;string, string&gt;</code>, where the key is the filter name and the value is the SQL expression.</p> <pre><code>c.UseAzureServiceBus(asb =&gt;\n{\n    asb.ConnectionString = ...\n    asb.SQLFilters = new List&lt;KeyValuePair&lt;string, string&gt;&gt; {\n\n            new KeyValuePair&lt;string,string&gt;(\"IOTFilter\",\"FromIOTHub='true'\"),  // The message will be handled if ApplicationProperties contains IOTFilter and value is true\n            new KeyValuePair&lt;string,string&gt;(\"SequenceFilter\",\"sys.enqueuedSequenceNumber &gt;= 300\")\n        };\n});\n</code></pre>"},{"location":"user-guide/en/transport/general/","title":"Transports","text":"<p>Transports move data between different parts of the system \u2013 between message producers and message brokers, between message brokers and the entity database, and even between message brokers and external systems.</p>"},{"location":"user-guide/en/transport/general/#supported-transports","title":"Supported transports","text":"<p>CAP supports several transport methods:</p> <ul> <li>RabbitMQ</li> <li>Kafka</li> <li>Azure Service Bus</li> <li>Amazon SQS</li> <li>NATS</li> <li>In-Memory Queue</li> <li>Redis Streams</li> <li>Apache Pulsar</li> </ul>"},{"location":"user-guide/en/transport/general/#selecting-a-transport","title":"Selecting a Transport","text":"Feature RabbitMQ Kafka Azure Service Bus In-Memory Use Case Reliable message transmission Real-time data processing Cloud integration Testing and development Distributed \u2714 \u2714 \u2714 \u274c Persistence \u2714 \u2714 \u2714 \u274c Performance Medium High Medium High <p>For more comparisons:</p> <ul> <li>Azure Service Bus vs RabbitMQ</li> <li>Kafka vs RabbitMQ</li> </ul> <p>Thanks to the community for contributing to CAP! The following transport extensions are community-supported:</p> <ul> <li> <p>ActiveMQ (@Lukas Zhang): https://github.com/lukazh</p> </li> <li> <p>RedisMQ (@\u6728\u6728): https://github.com/difudotnet/CAP.RedisMQ.Extensions</p> </li> <li> <p>ZeroMQ (@maikebing): https://github.com/maikebing/CAP.Extensions</p> </li> <li> <p>MQTT (@john jiang): https://github.com/jinzaz/jinzaz.CAP.MQTT</p> </li> </ul>"},{"location":"user-guide/en/transport/in-memory-queue/","title":"In-Memory Queue","text":"<p>In-Memory Queue is a memory-based message queue provided by the community.</p>"},{"location":"user-guide/en/transport/in-memory-queue/#configuration","title":"Configuration","text":"<p>To use in-memory queue as a message transporter, you need to install the following package from NuGet:</p> <pre><code>PM&gt; Install-Package Savorboard.CAP.InMemoryMessageQueue\n</code></pre> <p>Next, add configuration options to the <code>ConfigureServices</code> method of <code>Startup.cs</code>:</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n\n    services.AddCap(x =&gt;\n    {\n        x.UseInMemoryMessageQueue();\n        // x.UseXXX ...\n    });\n}\n</code></pre>"},{"location":"user-guide/en/transport/kafka/","title":"Apache Kafka","text":"<p>Apache Kafka is an open-source event streaming platform developed by LinkedIn and donated to the Apache Software Foundation. It is written in Scala and Java.</p> <p>Kafka can be used in CAP as a message transporter. </p>"},{"location":"user-guide/en/transport/kafka/#configuration","title":"Configuration","text":"<p>To use Kafka as a transporter, you need to install the following package from NuGet:</p> <pre><code>PM&gt; Install-Package DotNetCore.CAP.Kafka\n</code></pre> <p>Then you can add configuration items to the <code>ConfigureServices</code> method of <code>Startup.cs</code>.</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n\n    services.AddCap(x =&gt;\n    {\n        x.UseKafka(opt=&gt;{\n            //KafkaOptions\n        });\n        // x.UseXXX ...\n    });\n}\n</code></pre>"},{"location":"user-guide/en/transport/kafka/#kafka-options","title":"Kafka Options","text":"<p>The Kafka configuration parameters provided directly by the CAP:</p> NAME DESCRIPTION TYPE DEFAULT Servers Broker server address string MainConfig librdkafka configuration parameters Dictionary See below ConnectionPoolSize connection pool size int 10 CustomHeadersBuilder Custom subscribe headers Func&lt;&gt; N/A RetriableErrorCodes Retriable error codes when ConsumeException IList See code TopicOptions The configuraiton of NumPartitions and ReplicationFactor KafkaTopicOptions -1"},{"location":"user-guide/en/transport/kafka/#kafka-main-configuration-options","title":"Kafka Main Configuration Options","text":"<p>If you need additional native Kafka configuration options, you can set them in the <code>MainConfig</code> configuration option:</p> <pre><code>services.AddCap(capOptions =&gt; \n{\n    capOptions.UseKafka(kafkaOption=&gt;\n    {\n        // kafka options.\n        // kafkaOptions.MainConfig.Add(\"\", \"\");\n    });\n});\n</code></pre> <p><code>MainConfig</code> is a configuration dictionary. You can find a list of supported configuration options at the following link:</p> <p>https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md</p> <p>To prevent CAP from creating topics automatically, disable topic auto creation:</p> <pre><code>services.AddCap(capOptions =&gt;\n{\n    capOptions.UseKafka(kafkaOption =&gt;\n    {\n        kafkaOption.MainConfig.Add(\"allow.auto.create.topics\", \"false\");\n    });\n});\n</code></pre>"},{"location":"user-guide/en/transport/kafka/#custom-headers-builder-options","title":"Custom Headers Builder Options","text":"<p>When messages are sent from a heterogeneous system, CAP requires additional headers to be defined. By providing this parameter, you can set custom headers to ensure the subscriber works correctly.</p> <p>You can find the description of heterogeneous system integration here.</p> <p>Sometimes, if you want to add additional context information from the broker to messages, you can also do this through this option. For example, you can add information such as offset or partition.</p> <p>Example:</p> <pre><code>x.UseKafka(opt =&gt;\n{\n    //...\n\n    opt.CustomHeadersBuilder = (kafkaResult, sp) =&gt; new List&lt;KeyValuePair&lt;string, string&gt;&gt;\n    {\n        new KeyValuePair&lt;string, string&gt;(\"my.kafka.offset\", kafkaResult.Offset.ToString()),\n        new KeyValuePair&lt;string, string&gt;(\"my.kafka.partition\", kafkaResult.Partition.ToString())\n    };\n});\n</code></pre> <p>Then you can retrieve the headers you added like this:</p> <pre><code>[CapSubscribe(\"sample.kafka.postgrsql\")]\npublic void HeadersTest(DateTime value, [FromCap]CapHeader header)\n{\n    var offset = header[\"my.kafka.offset\"];\n    var partition = header[\"my.kafka.partition\"];\n}\n</code></pre>"},{"location":"user-guide/en/transport/nats/","title":"NATS","text":"<p>NATS is a simple, secure and performant communications system for digital systems, services and devices. NATS is part of the Cloud Native Computing Foundation (CNCF).</p> <p>Warning</p> <p>Since version 5.2+, CAP features are implemented based on JetStream, so JetStream must be explicitly enabled on the server.</p> <p>You must enable JetStream by specifying the <code>--jetstream</code> parameter when starting the NATS server to use CAP properly.</p>"},{"location":"user-guide/en/transport/nats/#configuration","title":"Configuration","text":"<p>To use NATS as a transporter, you need to install the following package from NuGet:</p> <pre><code>PM&gt; Install-Package DotNetCore.CAP.NATS\n</code></pre> <p>Then you can add configuration items to the <code>ConfigureServices</code> method of <code>Startup.cs</code>.</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    services.AddCap(capOptions =&gt;\n    {\n        capOptions.UseNATS(natsOptions=&gt;{\n            //NATS Options\n        });\n    });\n}\n</code></pre>"},{"location":"user-guide/en/transport/nats/#nats-options","title":"NATS Options","text":"<p>NATS configuration parameters provided directly by the CAP:</p> NAME DESCRIPTION TYPE DEFAULT Options NATS client configuration Options Options Servers Server url/urls used to connect to the NATs server. string NULL ConnectionPoolSize number of connections pool uint 10 DeliverPolicy The point in the stream to receive messages from (\u26a0\ufe0f Removed from version 8.1.0, use <code>ConsumerOptions</code> instead.) enum DeliverPolicy.New StreamOptions \ud83c\udd95 Stream configuration Action NULL ConsumerOptions \ud83c\udd95 Consumer configuration Action NULL CustomHeadersBuilder Custom subscribe headers See the blow NULL"},{"location":"user-guide/en/transport/nats/#nats-configuration-options","title":"NATS Configuration Options","text":"<p>If you need additional native NATS configuration options, you can set them in the <code>Options</code> option:</p> <pre><code>services.AddCap(capOptions =&gt; \n{\n    capOptions.UseNATS(natsOptions=&gt;\n    {\n        // NATS options.\n        natsOptions.Options.Url=\"\";\n    });\n});\n</code></pre> <p><code>Options</code> is a NATS.Client <code>ConfigurationOptions</code>. You can find more details at this link.</p>"},{"location":"user-guide/en/transport/nats/#custom-headers-builder-option","title":"Custom Headers Builder Option","text":"<p>When messages are sent from a heterogeneous system, CAP requires additional headers to be defined. By providing this parameter, you can set custom headers to ensure the subscriber works correctly.</p> <p>You can find the description of Header Information here.</p> <p>Example:</p> <pre><code>x.UseNATS(aa =&gt;\n{\n    aa.CustomHeadersBuilder = (e, sp) =&gt;\n    [\n        new(DotNetCore.CAP.Messages.Headers.MessageId, sp.GetRequiredService&lt;ISnowflakeId&gt;().NextId().ToString()),\n        new(DotNetCore.CAP.Messages.Headers.MessageName, e.Message.Subject)\n    ];\n});\n</code></pre>"},{"location":"user-guide/en/transport/pulsar/","title":"Apache Pulsar","text":"<p>Apache Pulsar is a cloud-native, distributed messaging and streaming platform originally created at Yahoo! and now a top-level Apache Software Foundation project.</p> <p>Pulsar can be used in CAP as a message transporter. </p>"},{"location":"user-guide/en/transport/pulsar/#configuration","title":"Configuration","text":"<p>To use Pulsar as a transporter, you need to install the following package from NuGet:</p> <pre><code>PM&gt; Install-Package DotNetCore.CAP.Pulsar\n</code></pre> <p>Then you can add configuration items to the <code>ConfigureServices</code> method of <code>Startup.cs</code>.</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n\n    services.AddCap(x =&gt;\n    {\n        x.UsePulsar(opt =&gt; {\n            //Pulsar options\n        });\n        // x.UseXXX ...\n    });\n}\n</code></pre>"},{"location":"user-guide/en/transport/pulsar/#pulsar-options","title":"Pulsar Options","text":"<p>The Pulsar configuration parameters provided directly by the CAP:</p> NAME DESCRIPTION TYPE DEFAULT ServiceUrl Broker server address string TlsOptions Tls configuration object"},{"location":"user-guide/en/transport/rabbitmq/","title":"RabbitMQ","text":"<p>RabbitMQ is an open-source message broker software that implements the Advanced Message Queuing Protocol (AMQP) and has been extended with a plug-in architecture to support additional protocols such as Streaming Text Oriented Messaging Protocol (STOMP), Message Queuing Telemetry Transport (MQTT), and others.</p> <p>RabbitMQ can be used in CAP as a message transporter. </p> <p>Important Notes</p> <p>When using RabbitMQ, the consumer integrated with the CAP application will automatically create a persistent queue after it starts for the first time. Subsequent messages will be normally transmitted to the queue and consumed.</p> <p>However, if you have never started the consumer, the queue will not be created. In this case, if you publish messages first, the RabbitMQ exchange will discard the messages until the consumer is started and the queue is created.</p>"},{"location":"user-guide/en/transport/rabbitmq/#configuration","title":"Configuration","text":"<p>To use RabbitMQ as a transporter, you need to install the following package from NuGet:</p> <pre><code>PM&gt; Install-Package DotNetCore.CAP.RabbitMQ\n</code></pre> <p>Next, add configuration items to the <code>ConfigureServices</code> method of <code>Startup.cs</code>.</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n\n    services.AddCap(x =&gt;\n    {\n        x.UseRabbitMQ(opt=&gt;\n        {\n            //RabbitMQOptions\n        });\n        // x.UseXXX ...\n    });\n}\n</code></pre>"},{"location":"user-guide/en/transport/rabbitmq/#rabbitmq-options","title":"RabbitMQ Options","text":"<p>The RabbitMQ configuration parameters provided directly by CAP:</p> NAME DESCRIPTION TYPE DEFAULT HostName Broker host address string localhost UserName Broker user name string guest Password Broker password string guest VirtualHost Broker virtual host string / Port Port int -1 ExchangeName Default exchange name string cap.default.topic QueueArguments Extra queue <code>x-arguments</code> QueueArgumentsOptions N/A QueueOptions Change Options for created queue QueueRabbitOptions { Durable=true, Exclusive=false, AutoDelete=false } ConnectionFactoryOptions RabbitMQClient native connection options ConnectionFactory N/A CustomHeadersBuilder Custom subscribe headers See the blow N/A PublishConfirms Enable publish confirms bool false BasicQosOptions Specify Qos of message prefetch BasicQos N/A"},{"location":"user-guide/en/transport/rabbitmq/#connectionfactory-option","title":"ConnectionFactory Option","text":"<p>If you need more native <code>ConnectionFactory</code> configuration options, you can set it by 'ConnectionFactoryOptions' option:</p> <pre><code>services.AddCap(x =&gt;\n{\n    x.UseRabbitMQ(o =&gt;\n    {\n        o.HostName = \"localhost\";\n        o.ConnectionFactoryOptions = opt =&gt; { \n            //rabbitmq client ConnectionFactory config\n        };\n    });\n});\n</code></pre>"},{"location":"user-guide/en/transport/rabbitmq/#customheadersbuilder-option","title":"CustomHeadersBuilder Option","text":"<p>When the message is sent from the RabbitMQ management console or a heterogeneous system, CAP requires additional headers to be defined. By providing this parameter, you can set custom headers to ensure the subscriber works correctly.</p> <p>You can find the description of Header Information here.</p> <p>Example\uff1a</p> <pre><code>x.UseRabbitMQ(aa =&gt;\n{\n    aa.CustomHeadersBuilder = (msg, sp) =&gt;\n    [\n        new(DotNetCore.CAP.Messages.Headers.MessageId, sp.GetRequiredService&lt;ISnowflakeId&gt;().NextId().ToString()),\n        new(DotNetCore.CAP.Messages.Headers.MessageName, msg.RoutingKey)\n    ];\n});\n</code></pre>"},{"location":"user-guide/en/transport/rabbitmq/#how-to-connect-to-a-cluster","title":"How to Connect to a Cluster","text":"<p>Use a comma-separated connection string like this:</p> <pre><code>x=&gt; x.UseRabbitMQ(\"localhost:5672,localhost:5673,localhost:5674\")\n</code></pre>"},{"location":"user-guide/en/transport/redis-streams/","title":"Redis Streams","text":"<p>Redis is an open-source, BSD-licensed, in-memory data structure store used as a database, cache, and message broker.</p> <p>Redis Streams is a new data type introduced in Redis 5.0 that models a log data structure in an abstract way using an append-only data structure.</p> <p>Redis Streams can be used in CAP as a message transporter. </p>"},{"location":"user-guide/en/transport/redis-streams/#configuration","title":"Configuration","text":"<p>To use Redis Streams as a transporter, you need to install the following package from NuGet:</p> <pre><code>PM&gt; Install-Package DotNetCore.CAP.RedisStreams\n</code></pre> <p>Then you can add configuration items to the <code>ConfigureServices</code> method of <code>Startup.cs</code>.</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    services.AddCap(capOptions =&gt;\n    {\n        capOptions.UseRedis(redisOptions=&gt;{\n            //redisOptions\n        });\n    });\n}\n</code></pre>"},{"location":"user-guide/en/transport/redis-streams/#redis-streams-options","title":"Redis Streams Options","text":"<p>Redis Streams configuration parameters provided by CAP:</p> NAME DESCRIPTION TYPE DEFAULT Configuration redis connection configuration (StackExchange.Redis) ConfigurationOptions ConfigurationOptions StreamEntriesCount number of entries returned from a stream while reading uint 10 ConnectionPoolSize number of connections pool uint 10 OnConsumeError callback function that will be invoked when an error occurred during message consumption. Func null #### Redis Configuration Options <p>If you need additional native Redis configuration options, you can set them in the <code>Configuration</code> option:</p> <pre><code>services.AddCap(capOptions =&gt; \n{\n    capOptions.UseRedis(redisOptions=&gt;\n    {\n        // redis options.\n        redisOptions.Configuration.EndPoints.Add(IPAddress.Loopback, 0);\n    });\n});\n</code></pre> <p><code>Configuration</code> is a StackExchange.Redis <code>ConfigurationOptions</code>. You can find more details at this link.</p>"},{"location":"user-guide/en/transport/redis-streams/#streams-cleanup-notes","title":"Streams Cleanup Notes","text":"<p>Since Redis Streams does not support deleting all messages that have been acknowledged by all groups (see Redis issue), you should consider using a script to periodically delete old messages.</p>"},{"location":"user-guide/zh/cap/configuration/","title":"\u914d\u7f6e","text":"<p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f60\u5728\u5411DI\u5bb9\u5668\u4e2d\u6ce8\u518cCAP\u670d\u52a1\u7684\u65f6\u5019\u6307\u5b9a\u6b64\u914d\u7f6e\u3002</p> <pre><code>services.AddCap(config=&gt; {\n    // config.XXX \n});\n</code></pre> <p>\u5176\u4e2d <code>services</code> \u4ee3\u8868\u7684\u662f <code>IServiceCollection</code> \u63a5\u53e3\u5bf9\u8c61\uff0c\u5b83\u4f4d\u4e8e <code>Microsoft.Extensions.DependencyInjection</code> \u4e0b\u9762\u3002 </p>"},{"location":"user-guide/zh/cap/configuration/#_2","title":"\u4ec0\u4e48\u662f\u6700\u4f4e\u914d\u7f6e\uff1f","text":"<p>\u6700\u7b80\u5355\u7684\u56de\u7b54\u5c31\u662f\uff0c\u81f3\u5c11\u4f60\u8981\u914d\u7f6e\u4e00\u4e2a\u4f20\u8f93\u5668\u548c\u4e00\u4e2a\u5b58\u50a8\uff0c\u5982\u679c\u4f60\u60f3\u5feb\u901f\u5f00\u59cb\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u914d\u7f6e\uff1a</p> <pre><code>services.AddCap(config =&gt; \n{\n     config.UseInMemoryMessageQueue(); //\u9700\u8981\u5f15\u7528 Savorboard.CAP.InMemoryMessageQueue \u5305\n     config.UseInMemoryStorage();\n});\n</code></pre> <p>\u6709\u5173\u5177\u4f53\u7684\u4f20\u8f93\u5668\u914d\u7f6e\u548c\u5b58\u50a8\u914d\u7f6e\uff0c\u4f60\u53ef\u4ee5\u67e5\u770b Transports \u7ae0\u8282\u548c Persistent \u7ae0\u8282\u4e2d\u5177\u4f53\u7ec4\u4ef6\u63d0\u4f9b\u7684\u914d\u7f6e\u9879\u3002</p>"},{"location":"user-guide/zh/cap/configuration/#_3","title":"\u8ba2\u9605\u8005\u4e2d\u7684\u914d\u7f6e","text":"<p>\u8ba2\u9605\u8005\u4f7f\u7528 <code>[CapSubscribe]</code> \u8fd9\u4e2aAttribute\u6765\u6807\u8bb0\u6210\u4e3a\u4e00\u4e2a\u8ba2\u9605\u8005\uff0c\u8ba2\u9605\u8005\u53ef\u4ee5\u4f4d\u4e8e ASP.NET Core \u7684 Controller \u6216 Service \u4e2d\u3002</p> <p>\u5f53\u4f60\u5728\u58f0\u660e <code>[CapSubscribe]</code> \u65f6\u5019\uff0c\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u4ee5\u4e0b\u53c2\u6570\u6765\u6539\u53d8\u8ba2\u9605\u8005\u7684\u884c\u4e3a\u3002</p>"},{"location":"user-guide/zh/cap/configuration/#name","title":"Name","text":"<p>string, \u5fc5\u987b\u9879</p> <p>\u901a\u8fc7\u6307\u5b9a <code>Name</code> \u53c2\u6570\u6765\u8ba2\u9605\u6d88\u606f\uff0c\u5176\u5bf9\u5e94\u53d1\u5e03\u6d88\u606f\u65f6\u901a\u8fc7 Publish(\"Name\") \u6307\u5b9a\u7684\u540d\u79f0\u3002</p> <p>\u8be5\u540d\u79f0\u5728\u4e0d\u540c\u7684 Broker \u6709\u4e0d\u540c\u7684\u5bf9\u5e94\u9879\u3002</p> <ul> <li>\u5728 RabbitMQ \u4e2d\u5bf9\u5e94 Routing Key\u3002</li> <li>\u5728 Kafka \u4e2d\u5bf9\u5e94 Topic\u3002</li> <li>\u5728 AzureServiceBus \u4e2d\u5bf9\u5e94 Subject\u3002</li> <li>\u5728 NATS \u4e2d\u5bf9\u5e94 Subject\u3002</li> <li>\u5728 RedisStrems \u4e2d\u5bf9\u5e94 Stream.</li> </ul>"},{"location":"user-guide/zh/cap/configuration/#group","title":"Group","text":"<p>string, \u53ef\u9009\u9879</p> <p>\u901a\u8fc7\u6307\u5b9a <code>Group</code> \u53c2\u6570\u6765\u4f7f\u8ba2\u9605\u8005\u4f4d\u4e8e\u5355\u72ec\u7684\u6d88\u8d39\u8005\u7ec4\u4e2d\uff0c\u6d88\u8d39\u8005\u7ec4\u7684\u6982\u5ff5\u7c7b\u4f3c\u4e8e Kafka \u4e2d\u7684\u6d88\u8d39\u8005\u7ec4\u3002\u5982\u679c\u4e0d\u6307\u5b9a\u6b64\u53c2\u6570\u5c06\u4f7f\u7528\u5f53\u524d\u7a0b\u5e8f\u96c6\u540d\u79f0(<code>DefaultGroupName</code>)\u4f5c\u4e3a\u9ed8\u8ba4\u503c\u3002</p> <p>\u76f8\u540c <code>Name</code> \u7684\u8ba2\u9605\u8005\u8bbe\u7f6e\u4e3a**\u4e0d\u540c\u7684**\u7ec4\u65f6\uff0c\u4ed6\u4eec\u90fd\u4f1a\u6536\u5230\u6d88\u606f\u3002\u76f8\u53cd\u5982\u679c\u76f8\u540c <code>Name</code> \u7684\u8ba2\u9605\u8005\u8bbe\u7f6e**\u76f8\u540c\u7684**\u7ec4\u65f6\uff0c\u53ea\u6709\u4e00\u4e2a\u4f1a\u6536\u5230\u6d88\u606f\u3002</p> <p>\u4e0d\u540c <code>Name</code> \u7684\u8ba2\u9605\u8005\u8bbe\u7f6e\u4e3a**\u4e0d\u540c\u7684**\u7ec4\u65f6\uff0c\u4e5f\u662f\u6709\u610f\u4e49\u7684\uff0c\u4ed6\u4eec\u53ef\u4ee5\u62e5\u6709\u72ec\u7acb\u7684\u7ebf\u7a0b\u6765\u6267\u884c\u3002\u76f8\u53cd\u5982\u679c\u4e0d\u540c <code>Name</code> \u7684\u8ba2\u9605\u8005\u8bbe\u7f6e**\u76f8\u540c\u7684**\u7ec4\u65f6\uff0c\u4ed6\u4eec\u5c06\u5171\u4eab\u6d88\u8d39\u7ebf\u7a0b\u3002</p> <p>Group \u5728\u4e0d\u540c\u7684 Broker \u6709\u4e0d\u540c\u7684\u5bf9\u5e94\u9879\u3002</p> <ul> <li>\u5728 RabbitMQ \u4e2d\u5bf9\u5e94 Queue\u3002</li> <li>\u5728 Kafka \u4e2d\u5bf9\u5e94 Consumer Group\u3002</li> <li>\u5728 AzureServiceBus \u4e2d\u5bf9\u5e94 Subscription Name\u3002</li> <li>\u5728 NATS \u4e2d\u5bf9\u5e94 Queue Group\u3002</li> <li>\u5728 RedisStrems \u4e2d\u5bf9\u5e94 Consuemr Group.</li> </ul>"},{"location":"user-guide/zh/cap/configuration/#groupconcurrent","title":"GroupConcurrent","text":"<p>byte, \u53ef\u9009\u9879</p> <p>\u901a\u8fc7\u6307\u5b9a <code>GroupConcurrent</code> \u53c2\u6570\u7684\u503c\u6765\u8bbe\u7f6e\u8ba2\u9605\u8005\u5e76\u884c\u6267\u884c\u7684\u5e76\u884c\u5ea6\u3002\u5e76\u884c\u6267\u884c\u610f\u5473\u7740\u5176\u9700\u8981\u4f4d\u4e8e\u72ec\u7acb\u7ebf\u7a0b\u4e2d\uff0c\u56e0\u6b64\u5982\u679c\u4f60\u6ca1\u6709\u6307\u5b9a <code>Group</code> \u53c2\u6570\uff0c\u5219 CAP \u5c06\u4f1a\u4ee5 <code>Name</code> \u7684\u503c\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a Group\u3002</p> <p>\u6ce8\u610f</p> <p>\u5982\u679c\u4f60\u6709\u591a\u4e2a\u8ba2\u9605\u8005\u90fd\u8bbe\u7f6e\u4e3a\u4e86\u76f8\u540c\u7684 Group\uff0c\u5e76\u4e14\u4e5f\u7ed9\u8ba2\u9605\u8005\u90fd\u8bbe\u7f6e\u4e86 <code>GroupConcurrent</code> \u7684\u503c\uff0c\u5219\u5e76\u884c\u5ea6\u4e3a\u7ec4\u5185\u503c\u7684\u548c\u3002 \u672c\u8bbe\u7f6e\u53ea\u5bf9\u65b0\u6d88\u606f\u751f\u6548\uff0c\u91cd\u8bd5\u7684\u6d88\u606f\u4e0d\u53d7\u5e76\u884c\u5ea6\u9650\u5236\u3002</p>"},{"location":"user-guide/zh/cap/configuration/#_4","title":"\u81ea\u5b9a\u4e49\u914d\u7f6e\u9879","text":"<p>\u5728 <code>AddCap</code> \u4e2d <code>CapOptions</code> \u5bf9\u8c61\u662f\u7528\u6765\u5b58\u50a8\u914d\u7f6e\u76f8\u5173\u4fe1\u606f\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5b83\u4eec\u90fd\u5177\u6709\u4e00\u4e9b\u9ed8\u8ba4\u503c\uff0c\u6709\u4e9b\u65f6\u5019\u4f60\u53ef\u80fd\u9700\u8981\u81ea\u5b9a\u4e49\u3002</p>"},{"location":"user-guide/zh/cap/configuration/#defaultgroupname","title":"DefaultGroupName","text":"<p>\u9ed8\u8ba4\u503c\uff1acap.queue.{\u7a0b\u5e8f\u96c6\u540d\u79f0}</p> <p>\u9ed8\u8ba4\u7684\u6d88\u8d39\u8005\u7ec4\u7684\u540d\u5b57\uff0c\u5728\u4e0d\u540c\u7684 Transports \u4e2d\u5bf9\u5e94\u4e0d\u540c\u7684\u540d\u5b57\uff0c\u53ef\u4ee5\u901a\u8fc7\u81ea\u5b9a\u4e49\u6b64\u503c\u6765\u81ea\u5b9a\u4e49\u4e0d\u540c Transports \u4e2d\u7684\u540d\u5b57\uff0c\u4ee5\u4fbf\u4e8e\u67e5\u770b\u3002</p> <p>\u6620\u5c04</p> <p>\u5728 RabbitMQ \u4e2d\u6620\u5c04\u5230 Queue Names\u3002 \u5728 Apache Kafka \u4e2d\u6620\u5c04\u5230 Consumer Group Id\u3002 \u5728 Azure Service Bus \u4e2d\u6620\u5c04\u5230 Subscription Name\u3002 \u5728 NATS \u4e2d\u6620\u5c04\u5230 Queue Group Name. \u5728 Redis Streams \u4e2d\u6620\u5c04\u5230 Consumer Group.</p>"},{"location":"user-guide/zh/cap/configuration/#groupnameprefix","title":"GroupNamePrefix","text":"<p>\u9ed8\u8ba4\u503c\uff1aNull</p> <p>\u4e3a\u8ba2\u9605 Group \u7edf\u4e00\u6dfb\u52a0\u524d\u7f00\u3002 https://github.com/dotnetcore/CAP/pull/780</p>"},{"location":"user-guide/zh/cap/configuration/#topicnameprefix","title":"TopicNamePrefix","text":"<p>\u9ed8\u8ba4\u503c\uff1a Null</p> <p>\u4e3a Topic \u7edf\u4e00\u6dfb\u52a0\u524d\u7f00\u3002 https://github.com/dotnetcore/CAP/pull/780</p>"},{"location":"user-guide/zh/cap/configuration/#version","title":"Version","text":"<p>\u9ed8\u8ba4\u503c\uff1av1</p> <p>\u7528\u4e8e\u7ed9\u6d88\u606f\u6307\u5b9a\u7248\u672c\u6765\u9694\u79bb\u4e0d\u540c\u7248\u672c\u670d\u52a1\u7684\u6d88\u606f\uff0c\u5e38\u7528\u4e8eA/B\u6d4b\u8bd5\u6216\u8005\u591a\u670d\u52a1\u7248\u672c\u7684\u573a\u666f\u3002\u4ee5\u4e0b\u662f\u5176\u5e94\u7528\u573a\u666f\uff1a</p> <p>\u4e1a\u52a1\u5feb\u901f\u8fed\u4ee3\uff0c\u9700\u8981\u5411\u524d\u517c\u5bb9</p> <p>\u7531\u4e8e\u4e1a\u52a1\u7684\u5feb\u901f\u8fed\u4ee3\uff0c\u5728\u5404\u4e2a\u670d\u52a1\u96c6\u6210\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6d88\u606f\u7684\u6570\u636e\u7ed3\u6784\u5e76\u4e0d\u662f\u56fa\u5b9a\u4e0d\u53d8\u7684\uff0c\u6709\u4e9b\u65f6\u5019\u6211\u4eec\u4e3a\u4e86\u9002\u5e94\u65b0\u5f15\u5165\u7684\u9700\u6c42\uff0c\u4f1a\u6dfb\u52a0\u6216\u8005\u4fee\u6539\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\u3002\u5982\u679c\u4f60\u662f\u4e00\u5957\u5168\u65b0\u7684\u7cfb\u7edf\u8fd9\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u4f46\u662f\u5982\u679c\u4f60\u7684\u7cfb\u7edf\u5df2\u7ecf\u90e8\u7f72\u5230\u751f\u4ea7\u73af\u5883\u4e86\u5e76\u4e14\u6b63\u5728\u670d\u52a1\u5ba2\u6237\uff0c\u8fd9\u5c31\u4f1a\u5bfc\u81f4\u65b0\u7684\u529f\u80fd\u5728\u4e0a\u7ebf\u7684\u65f6\u5019\u548c\u65e7\u7684\u6570\u636e\u7ed3\u6784\u53d1\u751f\u4e0d\u517c\u5bb9\uff0c\u90a3\u4e48\u8fd9\u4e9b\u6539\u53d8\u53ef\u80fd\u4f1a\u5bfc\u81f4\u51fa\u73b0\u4e25\u91cd\u7684\u95ee\u9898\uff0c\u8981\u60f3\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ea\u80fd\u628a\u6d88\u606f\u961f\u5217\u548c\u6301\u4e45\u5316\u7684\u6d88\u606f\u5168\u90e8\u6e05\u7a7a\uff0c\u7136\u540e\u624d\u80fd\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\uff0c\u8fd9\u5bf9\u4e8e\u751f\u4ea7\u73af\u5883\u6765\u8bf4\u663e\u7136\u662f\u81f4\u547d\u7684\u3002</p> <p>\u591a\u4e2a\u7248\u672c\u7684\u670d\u52a1\u7aef</p> <p>\u6709\u4e9b\u65f6\u5019\uff0cApp\u7684\u670d\u52a1\u7aef\u9700\u8981\u63d0\u4f9b\u591a\u5957\u63a5\u53e3\uff0c\u6765\u652f\u6301\u4e0d\u540c\u7248\u672c\u7684App\uff0c\u8fd9\u4e9b\u4e0d\u540c\u7248\u672c\u7684App\u76f8\u540c\u7684\u63a5\u53e3\u548c\u670d\u52a1\u7aef\u4ea4\u4e92\u7684\u6570\u636e\u7ed3\u6784\u53ef\u80fd\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u901a\u5e38\u60c5\u51b5\u4e0b\u670d\u52a1\u7aef\u63d0\u4f9b\u4e0d\u7528\u7684\u8def\u7531\u5730\u5740\u6765\u9002\u914d\u4e0d\u540c\u7248\u672c\u7684App\u8c03\u7528\u3002</p> <p>\u4e0d\u540c\u5b9e\u4f8b\uff0c\u4f7f\u7528\u76f8\u540c\u7684\u6301\u4e45\u5316\u8868/\u96c6\u5408</p> <p>\u5e0c\u671b\u591a\u4e2a\u4e0d\u540c\u5b9e\u4f8b\u7684\u7a0b\u5e8f\u53ef\u4ee5\u516c\u7528\u76f8\u540c\u7684\u6570\u636e\u5e93\uff0c\u5728 2.4 \u4e4b\u524d\u7684\u7248\u672c\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u4e0d\u540c\u7684\u8868\u540d\u6765\u9694\u79bb\u4e0d\u540c\u5b9e\u4f8b\u7684\u6570\u636e\u5e93\u8868\uff0c\u5373\u5728CAP\u914d\u7f6e\u7684\u65f6\u5019\u901a\u8fc7\u914d\u7f6e\u4e0d\u540c\u7684\u8868\u540d\u524d\u7f00\u6765\u5b9e\u73b0\u3002</p> <p>\u67e5\u770b\u535a\u5ba2\u6765\u4e86\u89e3\u66f4\u591a\u5173\u4e8e Version \u7684\u4fe1\u606f\uff1a https://www.cnblogs.com/savorboard/p/cap-2-4.html</p>"},{"location":"user-guide/zh/cap/configuration/#failedretryinterval","title":"FailedRetryInterval","text":"<p>\u9ed8\u8ba4\u503c\uff1a60 \u79d2</p> <p>\u5728\u6d88\u606f\u53d1\u9001\u7684\u65f6\u5019\uff0c\u5982\u679c\u53d1\u9001\u5931\u8d25\uff0cCAP\u5c06\u4f1a\u5bf9\u6d88\u606f\u8fdb\u884c\u91cd\u8bd5\uff0c\u6b64\u914d\u7f6e\u9879\u7528\u6765\u914d\u7f6e\u6bcf\u6b21\u91cd\u8bd5\u7684\u95f4\u9694\u65f6\u95f4\u3002</p> <p>\u5728\u6d88\u606f\u6d88\u8d39\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u6d88\u8d39\u5931\u8d25\uff0cCAP\u5c06\u4f1a\u5bf9\u6d88\u606f\u8fdb\u884c\u91cd\u8bd5\u6d88\u8d39\uff0c\u6b64\u914d\u7f6e\u9879\u7528\u6765\u914d\u7f6e\u6bcf\u6b21\u91cd\u8bd5\u7684\u95f4\u9694\u65f6\u95f4\u3002</p> <p>\u91cd\u8bd5 &amp; \u95f4\u9694</p> <p>\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u91cd\u8bd5\u5c06\u5728\u53d1\u9001\u548c\u6d88\u8d39\u6d88\u606f\u5931\u8d25\u7684 FallbackWindowLookbackSeconds\uff084\u5206\u949f\u540e\uff09 \u5f00\u59cb\uff0c\u8fd9\u662f\u4e3a\u4e86\u907f\u514d\u8bbe\u7f6e\u6d88\u606f\u72b6\u6001\u5ef6\u8fdf\u5bfc\u81f4\u53ef\u80fd\u51fa\u73b0\u7684\u95ee\u9898\u3002 \u53d1\u9001\u548c\u6d88\u8d39\u6d88\u606f\u7684\u8fc7\u7a0b\u4e2d\u5931\u8d25\u4f1a\u7acb\u5373\u91cd\u8bd5 3 \u6b21\uff0c\u5728 3 \u6b21\u4ee5\u540e\u5c06\u8fdb\u5165\u91cd\u8bd5\u8f6e\u8be2\uff0c\u6b64\u65f6 FailedRetryInterval \u914d\u7f6e\u624d\u4f1a\u751f\u6548\u3002</p> <p>\u591a\u5b9e\u4f8b\u5e76\u53d1\u91cd\u8bd5</p> <p>\u6211\u4eec\u57287.1.0\u7248\u672c\u4e2d\u5f15\u5165\u4e86\u57fa\u4e8e\u6570\u636e\u5e93\u7684\u5206\u5e03\u5f0f\u9501\u4ee5\u5e94\u5bf9\u5728\u591a\u4e2a\u5b9e\u4f8b\u4e0b\u5bf9\u6570\u636e\u5e93\u91cd\u8bd5\u7684\u5e76\u53d1\u6570\u636e\u83b7\u53d6\u95ee\u9898\uff0c\u4f60\u9700\u8981\u663e\u5f0f\u914d\u7f6e <code>UseStorageLock</code> \u4e3a true\u3002</p>"},{"location":"user-guide/zh/cap/configuration/#usestoragelock","title":"UseStorageLock","text":"<p>\u9ed8\u8ba4\u503c: false</p> <p>\u5982\u679c\u8bbe\u7f6e\u4e3atrue\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u57fa\u4e8e\u6570\u636e\u5e93\u7684\u5206\u5e03\u5f0f\u9501\u4ee5\u5e94\u5bf9\u91cd\u8bd5\u8fdb\u7a0b\u5728\u591a\u4e2a\u5b9e\u4f8b\u4e0b\u5bf9\u6570\u636e\u5e93\u6570\u636e\u7684\u5e76\u53d1\u83b7\u53d6\u95ee\u9898\u3002\u8fd9\u5c06\u4f1a\u5728\u6570\u636e\u5e93\u751f\u6210 cap.lock \u8868\u3002</p>"},{"location":"user-guide/zh/cap/configuration/#consumerthreadcount","title":"ConsumerThreadCount","text":"<p>\u9ed8\u8ba4\u503c\uff1a1</p> <p>\u6d88\u8d39\u8005\u7ebf\u7a0b\u5e76\u884c\u5904\u7406\u6d88\u606f\u7684\u7ebf\u7a0b\u6570\uff0c\u5f53\u8fd9\u4e2a\u503c\u5927\u4e8e1\u65f6\uff0c\u5c06\u4e0d\u80fd\u4fdd\u8bc1\u6d88\u606f\u6267\u884c\u7684\u987a\u5e8f\u3002</p>"},{"location":"user-guide/zh/cap/configuration/#collectorcleaninginterval","title":"CollectorCleaningInterval","text":"<p>\u9ed8\u8ba4\u503c\uff1a300 \u79d2</p> <p>\u6536\u96c6\u5668\u5220\u9664\u5df2\u7ecf\u8fc7\u671f\u6d88\u606f\u7684\u65f6\u95f4\u95f4\u9694\u3002</p>"},{"location":"user-guide/zh/cap/configuration/#schedulerbatchsize","title":"SchedulerBatchSize","text":"<p>\u9ed8\u8ba4\u503c\uff1a1000</p> <p>\u8c03\u5ea6\u5668\u6bcf\u6b21\u5faa\u73af\u83b7\u53d6\u7684\u5ef6\u8fdf\u6216\u6392\u961f\u6d88\u606f\u7684\u6700\u5927\u6570\u91cf\u3002</p>"},{"location":"user-guide/zh/cap/configuration/#failedretrycount","title":"FailedRetryCount","text":"<p>\u9ed8\u8ba4\u503c\uff1a50</p> <p>\u91cd\u8bd5\u7684\u6700\u5927\u6b21\u6570\u3002\u5f53\u8fbe\u5230\u6b64\u8bbe\u7f6e\u503c\u65f6\uff0c\u5c06\u4e0d\u4f1a\u518d\u7ee7\u7eed\u91cd\u8bd5\uff0c\u901a\u8fc7\u6539\u53d8\u6b64\u53c2\u6570\u6765\u8bbe\u7f6e\u91cd\u8bd5\u7684\u6700\u5927\u6b21\u6570\u3002</p>"},{"location":"user-guide/zh/cap/configuration/#fallbackwindowlookbackseconds","title":"FallbackWindowLookbackSeconds","text":"<p>\u9ed8\u8ba4\u503c\uff1a240 \u79d2</p> <p>\u914d\u7f6e\u91cd\u8bd5\u5904\u7406\u5668\u62fe\u53d6 <code>Scheduled</code> \u6216 <code>Failed</code> \u72b6\u6001\u6d88\u606f\u7684\u56de\u9000\u65f6\u95f4\u7a97\u3002</p>"},{"location":"user-guide/zh/cap/configuration/#failedthresholdcallback","title":"FailedThresholdCallback","text":"<p>\u9ed8\u8ba4\u503c\uff1aNULL</p> <p>\u7c7b\u578b\uff1a<code>Action&lt;FailedInfo&gt;</code></p> <p>\u91cd\u8bd5\u9608\u503c\u7684\u5931\u8d25\u56de\u8c03\u3002\u5f53\u91cd\u8bd5\u8fbe\u5230 FailedRetryCount \u8bbe\u7f6e\u7684\u503c\u7684\u65f6\u5019\uff0c\u5c06\u8c03\u7528\u6b64 Action \u56de\u8c03\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u6b64\u56de\u8c03\u6765\u63a5\u6536\u5931\u8d25\u8fbe\u5230\u6700\u5927\u7684\u901a\u77e5\uff0c\u4ee5\u505a\u51fa\u4eba\u5de5\u4ecb\u5165\u3002\u4f8b\u5982\u53d1\u9001\u90ae\u4ef6\u6216\u8005\u77ed\u4fe1\u3002</p>"},{"location":"user-guide/zh/cap/configuration/#succeedmessageexpiredafter","title":"SucceedMessageExpiredAfter","text":"<p>\u9ed8\u8ba4\u503c\uff1a24*3600 \u79d2\uff081\u5929\u540e\uff09</p> <p>\u6210\u529f\u6d88\u606f\u7684\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\u3002 \u5f53\u6d88\u606f\u53d1\u9001\u6216\u8005\u6d88\u8d39\u6210\u529f\u65f6\u5019\uff0c\u5728\u65f6\u95f4\u8fbe\u5230 <code>SucceedMessageExpiredAfter</code> \u79d2\u65f6\u5019\u5c06\u4f1a\u4ece Persistent \u4e2d\u5220\u9664\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u6b64\u503c\u6765\u8bbe\u7f6e\u8fc7\u671f\u7684\u65f6\u95f4\u3002</p>"},{"location":"user-guide/zh/cap/configuration/#failedmessageexpiredafter","title":"FailedMessageExpiredAfter","text":"<p>\u9ed8\u8ba4\u503c\uff1a15*24*3600 \u79d2\uff0815\u5929\u540e\uff09</p> <p>\u5931\u8d25\u6d88\u606f\u7684\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\u3002 \u5f53\u6d88\u606f\u53d1\u9001\u6216\u8005\u6d88\u8d39\u5931\u8d25\u65f6\u5019\uff0c\u5728\u65f6\u95f4\u8fbe\u5230 <code>FailedMessageExpiredAfter</code> \u79d2\u65f6\u5019\u5c06\u4f1a\u4ece Persistent \u4e2d\u5220\u9664\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u6b64\u503c\u6765\u8bbe\u7f6e\u8fc7\u671f\u7684\u65f6\u95f4\u3002</p>"},{"location":"user-guide/zh/cap/configuration/#usedispatchingpergroup","title":"[\u5df2\u79fb\u9664] UseDispatchingPerGroup","text":"<p>\u9ed8\u8ba4\u503c: false</p> <p>\u7248\u672c 8.2.0 \u4e2d\u79fb\u9664\uff0c\u5df2\u662f\u9ed8\u8ba4\u884c\u4e3a\u3002</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cCAP\u4f1a\u5c06\u6240\u6709\u6d88\u8d39\u8005\u7ec4\u7684\u6d88\u606f\u90fd\u5148\u653e\u7f6e\u5230\u5185\u5b58\u540c\u4e00\u4e2aChannel\u4e2d\uff0c\u7136\u540e\u7ebf\u6027\u5904\u7406\u3002 \u5982\u679c\u8bbe\u7f6e\u4e3a true\uff0c\u5219\u6bcf\u4e2a\u6d88\u8d39\u8005\u7ec4\u90fd\u4f1a\u6839\u636e <code>ConsumerThreadCount</code> \u8bbe\u7f6e\u7684\u503c\u521b\u5efa\u5355\u72ec\u7684\u7ebf\u7a0b\u8fdb\u884c\u5904\u7406\u3002</p> <p>\u5728\u540c\u65f6\u914d\u5408\u4f7f\u7528 <code>EnableConsumerPrefetch</code> \u65f6\uff0c\u8bf7\u53c2\u8003 issue #1399 \u4ee5\u6e05\u6670\u5176\u9884\u671f\u884c\u4e3a\u3002</p>"},{"location":"user-guide/zh/cap/configuration/#enableconsumerprefetch","title":"[\u5df2\u8fc7\u65f6] EnableConsumerPrefetch","text":"<p>\u9ed8\u8ba4\u503c: false\uff0c \u5728 7.0 \u7248\u672c\u4e4b\u524d\u9ed8\u8ba4\u884c\u4e3a true</p> <p>\u8be5\u914d\u7f6e\u9879\u5df2\u88ab\u91cd\u547d\u540d\u4e3a <code>EnableSubscriberParallelExecute</code>\uff0c\u8bf7\u4f7f\u7528\u65b0\u9009\u9879\u3002</p>"},{"location":"user-guide/zh/cap/configuration/#enablesubscriberparallelexecute","title":"EnableSubscriberParallelExecute","text":"<p>\u9ed8\u8ba4\u503c: false</p> <p>\u5982\u679c\u8bbe\u7f6e\u4e3a <code>true</code>\uff0cCAP\u5c06\u63d0\u524d\u4eceBroker\u62c9\u53d6\u4e00\u6279\u6d88\u606f\u7f6e\u4e8e\u5185\u5b58\u7f13\u51b2\u533a\uff0c\u7136\u540e\u6267\u884c\u8ba2\u9605\u65b9\u6cd5\uff1b\u5f53\u8ba2\u9605\u65b9\u6cd5\u6267\u884c\u5b8c\u6210\u540e\uff0c\u62c9\u53d6\u4e0b\u4e00\u6279\u6d88\u606f\u81f3\u4e8e\u7f13\u51b2\u533a\u7136\u540e\u6267\u884c\u3002</p> <p>\u6ce8\u610f\u4e8b\u9879</p> <p>\u8bbe\u7f6e\u4e3a true \u53ef\u80fd\u4f1a\u4ea7\u751f\u4e00\u4e9b\u95ee\u9898\uff0c\u5f53\u8ba2\u9605\u65b9\u6cd5\u6267\u884c\u8fc7\u6162\u8017\u65f6\u592a\u4e45\u65f6\uff0c\u4f1a\u5bfc\u81f4\u91cd\u8bd5\u7ebf\u7a0b\u62fe\u53d6\u5230\u8fd8\u672a\u6267\u884c\u7684\u7684\u6d88\u606f\u3002\u91cd\u8bd5\u7ebf\u7a0b\u9ed8\u8ba4\u62fe\u53d64\u5206\u949f\u524d\uff08FallbackWindowLookbackSeconds \u914d\u7f6e\u9879\uff09\u7684\u6d88\u606f\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u6d88\u8d39\u7aef\u79ef\u538b\u4e86\u8d85\u8fc74\u5206\u949f\uff08FallbackWindowLookbackSeconds \u914d\u7f6e\u9879\uff09\u7684\u6d88\u606f\u5c31\u4f1a\u88ab\u91cd\u65b0\u62fe\u53d6\u5230\u518d\u6b21\u6267\u884c</p>"},{"location":"user-guide/zh/cap/configuration/#subscriberparallelexecutethreadcount","title":"SubscriberParallelExecuteThreadCount","text":"<p>Default: <code>Environment.ProcessorCount</code></p> <p>\u5f53\u542f\u7528 <code>EnableSubscriberParallelExecute</code> \u65f6, \u53ef\u901a\u8fc7\u6b64\u53c2\u6570\u6267\u884c\u5e76\u884c\u5904\u7406\u7684\u7ebf\u7a0b\u6570\uff0c\u9ed8\u8ba4\u503c\u4e3a\u5904\u7406\u5668\u4e2a\u6570\u3002</p>"},{"location":"user-guide/zh/cap/configuration/#subscriberparallelexecutebufferfactor","title":"SubscriberParallelExecuteBufferFactor","text":"<p>Default: 1</p> <p>\u5f53\u542f\u7528 <code>EnableSubscriberParallelExecute</code> \u65f6, \u901a\u8fc7\u6b64\u53c2\u6570\u8bbe\u7f6e\u7f13\u51b2\u533a\u548c\u7ebf\u7a0b\u6570\u7684\u56e0\u5b50\u7cfb\u6570\uff0c\u4e5f\u5c31\u662f\u7f13\u51b2\u533a\u5927\u5c0f\u7b49\u4e8e <code>SubscriberParallelExecuteThreadCount</code> \u4e58 <code>SubscriberParallelExecuteBufferFactor</code>.</p>"},{"location":"user-guide/zh/cap/configuration/#enablepublishparallelsend","title":"EnablePublishParallelSend","text":"<p>\u9ed8\u8ba4\u503c: false</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53d1\u9001\u7684\u6d88\u606f\u90fd\u5148\u653e\u7f6e\u5230\u5185\u5b58\u540c\u4e00\u4e2aChannel\u4e2d\uff0c\u7136\u540e\u7ebf\u6027\u5904\u7406\u3002 \u5982\u679c\u8bbe\u7f6e\u4e3a true\uff0c\u5219\u53d1\u9001\u6d88\u606f\u7684\u4efb\u52a1\u5c06\u7531.NET\u7ebf\u7a0b\u6c60\u5e76\u884c\u5904\u7406\uff0c\u8fd9\u4f1a\u5927\u5927\u63d0\u9ad8\u53d1\u9001\u7684\u901f\u5ea6\u3002</p>"},{"location":"user-guide/zh/cap/filter/","title":"\u8fc7\u6ee4\u5668","text":"<p>\u4ece 5.1.0 \u7248\u672c\u540e\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u5bf9\u8ba2\u9605\u8005\u8fc7\u6ee4\u5668\u7684\u652f\u6301\uff0c\u4ee5\u4f7f\u5728\u67d0\u4e9b\u573a\u666f\uff08\u5982\u4e8b\u52a1\u5904\u7406\uff0c\u65e5\u5fd7\u8bb0\u5f55\u7b49\uff09\u4e2d\u53d8\u5f97\u5bb9\u6613\u3002</p>"},{"location":"user-guide/zh/cap/filter/#_2","title":"\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668","text":""},{"location":"user-guide/zh/cap/filter/#_3","title":"\u6dfb\u52a0\u8fc7\u6ee4\u5668","text":"<p>\u521b\u5efa\u4e00\u4e2a\u8fc7\u6ee4\u5668\u7c7b\uff0c\u5e76\u7ee7\u627f <code>SubscribeFilter</code> \u62bd\u8c61\u7c7b\u3002</p> <pre><code>public class MyCapFilter: SubscribeFilter\n{\n    public override Task OnSubscribeExecutingAsync(ExecutingContext context)\n    {\n        // \u8ba2\u9605\u65b9\u6cd5\u6267\u884c\u524d\n    }\n\n    public override Task OnSubscribeExecutedAsync(ExecutedContext context)\n    {\n        // \u8ba2\u9605\u65b9\u6cd5\u6267\u884c\u540e\n    }\n\n    public override Task OnSubscribeExceptionAsync(ExceptionContext context)\n    {\n        // \u8ba2\u9605\u65b9\u6cd5\u6267\u884c\u5f02\u5e38\n    }\n}\n</code></pre> <p>\u5728\u4e00\u4e9b\u573a\u666f\u4e2d\uff0c\u5982\u679c\u60f3\u7ec8\u6b62\u8ba2\u9605\u8005\u65b9\u6cd5\u6267\u884c\uff0c\u53ef\u4ee5\u5728 <code>OnSubscribeExecutingAsync</code> \u4e2d\u629b\u51fa\u5f02\u5e38\uff0c\u5e76\u4e14\u5728 <code>OnSubscribeExceptionAsync</code> \u4e2d\u9009\u62e9\u5ffd\u7565\u8be5\u5f02\u5e38\u3002</p> <p>\u901a\u8fc7\u5728 <code>ExceptionContext</code> \u4e2d\u8bbe\u7f6e <code>context.ExceptionHandled = true</code> \u6765\u5ffd\u7565\u5f02\u5e38\u3002</p> <pre><code>public override Task OnSubscribeExceptionAsync(ExceptionContext context)\n{\n    context.ExceptionHandled = true;\n}\n</code></pre>"},{"location":"user-guide/zh/cap/filter/#_4","title":"\u914d\u7f6e\u8fc7\u6ee4\u5668","text":"<pre><code>services.AddCap(opt =&gt;\n{\n    // ***\n}.AddSubscribeFilter&lt;MyCapFilter&gt;();\n</code></pre> <p>\u76ee\u524d\uff0c \u6211\u4eec\u8fd8\u4e0d\u652f\u6301\u540c\u65f6\u6dfb\u52a0\u591a\u4e2a\u8fc7\u6ee4\u5668\u3002</p> <p>\u8fc7\u6ee4\u5668\u4e2d\u4f7f\u7528 AsyncLocal \u7684\u95ee\u9898</p> <p>\u6211\u4eec\u4e0d\u5efa\u8bae\u5728\u8fc7\u6ee4\u5668\u4e2d\u4f7f\u7528AsyncLocal\uff0c\u56e0\u4e3a\u8fc7\u6ee4\u5668\u7684\u751f\u547d\u5468\u671f\u4e3aScoped\uff0c\u6240\u4ee5\u76f4\u63a5\u5b9a\u4e49\u4e34\u65f6\u53d8\u91cf\u5373\u53ef\u5728\u6574\u4e2a\u6267\u884c\u5468\u671f\u5185\u5171\u4eab\u53d8\u91cf\u503c\u3002 \u7136\u540e\uff0c\u5982\u679c\u7531\u4e8e\u4e00\u4e9b\u4f60\u65e0\u6cd5\u63a7\u5236\u7684\u539f\u56e0\u8981\u4f7f\u7528\uff0c\u7531\u4e8eAsyncLocal\u7684\u8bbe\u8ba1\u95ee\u9898\uff0c\u5219\u53ef\u5c06\u5f02\u6b65\u8fc7\u6ee4\u5668\u4f5c\u4e3a\u540c\u6b65\u4f7f\u7528\uff0c\u4e5f\u5c31\u662f\u7ee7\u627f\u7684\u65b9\u6cd5\u6784\u9020\u4e2d\u4e0d\u6dfb\u52a0 async \u5173\u952e\u5b57\u3002</p>"},{"location":"user-guide/zh/cap/idempotence/","title":"\u5e42\u7b49\u6027","text":"<p>\u5e42\u7b49\u6027\uff08\u4f60\u53ef\u4ee5\u5728Wikipedia\u8bfb\u5230\u5173\u4e8e\u5e42\u7b49\u6027\u7684\u5b9a\u4e49\uff09\uff0c\u5f53\u6211\u4eec\u8c08\u8bba\u5e42\u7b49\u65f6\uff0c\u4e00\u822c\u662f\u6307\u53ef\u4ee5\u91cd\u590d\u5904\u7406\u4f20\u9012\u7684\u6d88\u606f\uff0c\u800c\u4e0d\u4f1a\u4ea7\u751f\u610f\u5916\u7684\u7ed3\u679c\u3002</p>"},{"location":"user-guide/zh/cap/idempotence/#_2","title":"\u4ea4\u4ed8\u4fdd\u8bc1","text":"<p>\u5728\u8bf4\u5e42\u7b49\u6027\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u8bf4\u4e0b\u5173\u4e8e\u6d88\u8d39\u7aef\u7684\u6d88\u606f\u4ea4\u4ed8\u3002</p> <p>\u7531\u4e8eCAP\u4e0d\u662f\u4f7f\u7528\u7684 MS DTC \u6216\u5176\u4ed6\u7c7b\u578b\u76842PC\u5206\u5e03\u5f0f\u4e8b\u52a1\u673a\u5236\uff0c\u6240\u4ee5\u5b58\u5728\u81f3\u5c11\u6d88\u606f\u4e25\u683c\u4ea4\u4ed8\u4e00\u6b21\u7684\u95ee\u9898\uff0c\u5177\u4f53\u7684\u8bf4\u5728\u57fa\u4e8e\u6d88\u606f\u7684\u7cfb\u7edf\u4e2d\uff0c\u5b58\u5728\u4ee5\u4e0b\u4e09\u79cd\u53ef\u80fd\uff1a</p> <ul> <li>Exactly Once(*) \uff08\u4ec5\u6709\u4e00\u6b21\uff09</li> <li>At Most Once \uff08\u6700\u591a\u4e00\u6b21\uff09</li> <li>At Least Once \uff08\u6700\u5c11\u4e00\u6b21\uff09</li> </ul> <p>\u5e26 * \u53f7\u8868\u793a\u5728\u5b9e\u9645\u573a\u666f\u4e2d\uff0c\u5f88\u96be\u8fbe\u5230\u3002</p>"},{"location":"user-guide/zh/cap/idempotence/#at-most-once","title":"At Most Once","text":"<p>\u6700\u591a\u4e00\u6b21\u4ea4\u4ed8\u4fdd\u8bc1\uff0c\u6db5\u76d6\u4e86\u4fdd\u8bc1\u4e00\u6b21\u6216\u6839\u672c\u4e0d\u63a5\u6536\u6240\u6709\u6d88\u606f\u7684\u60c5\u51b5\u3002</p> <p>\u8fd9\u79cd\u7c7b\u578b\u7684\u4f20\u9012\u4fdd\u8bc1\u53ef\u80fd\u6765\u81ea\u4f60\u7684\u6d88\u606f\u7cfb\u7edf\uff0c\u4f60\u7684\u4ee3\u7801\u6309\u4ee5\u4e0b\u987a\u5e8f\u6267\u884c\u5176\u64cd\u4f5c\uff1a</p> <pre><code>1. \u4ece\u961f\u5217\u79fb\u9664\u6d88\u606f\n2. \u5f00\u59cb\u4e00\u4e2a\u5de5\u4f5c\u4e8b\u52a1\n3. \u5904\u7406\u6d88\u606f ( \u4f60\u7684\u4ee3\u7801 )\n4. \u662f\u5426\u6210\u529f ?\n    Yes:\n        1. \u63d0\u4ea4\u5de5\u4f5c\u4e8b\u52a1\n    No: \n        1. \u56de\u6eda\u5de5\u4f5c\u4e8b\u52a1\n        2. \u5c06\u6d88\u606f\u53d1\u56de\u5230\u961f\u5217\u3002\n</code></pre> <p>\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4eec\u5de5\u4f5c\u7684\u5f88\u597d\uff0c\u5de5\u4f5c\u4e8b\u52a1\u5c06\u88ab\u63d0\u4ea4\u3002</p> <p>\u7136\u800c\uff0c\u6709\u4e9b\u65f6\u5019\u5e76\u4e0d\u80fd\u603b\u662f\u6210\u529f\uff0c\u6bd4\u5982\u5728 1 \u4e4b\u540e\u51fa\u73b0\u5f02\u5e38\uff0c\u6216\u8005\u662f\u4f60\u5728\u5c06\u6d88\u606f\u653e\u56de\u5230\u961f\u5217\u4e2d\u51fa\u73b0\u7f51\u7edc\u95ee\u9898\u7531\u6216\u8005\u5b95\u673a\u91cd\u542f\u7b49\u60c5\u51b5\u3002</p> <p>\u4f7f\u7528\u8fd9\u4e2a\u534f\u8bae\uff0c\u4f60\u5c06\u5192\u7740\u4e22\u5931\u6d88\u606f\u7684\u98ce\u9669\uff0c\u5982\u679c\u53ef\u4ee5\u63a5\u53d7\uff0c\u90a3\u5c31\u6ca1\u6709\u5173\u7cfb\u3002</p>"},{"location":"user-guide/zh/cap/idempotence/#at-least-once","title":"At Least Once","text":"<p>\u8fd9\u4e2a\u4ea4\u4ed8\u4fdd\u8bc1\u5305\u542b\u4f60\u6536\u5230\u81f3\u5c11\u4e00\u6b21\u7684\u6d88\u606f\uff0c\u5f53\u51fa\u73b0\u6545\u969c\u65f6\uff0c\u53ef\u80fd\u4f1a\u6536\u5230\u591a\u6b21\u6d88\u606f\u3002</p> <p>\u5b83\u9700\u8981\u7a0d\u5fae\u6539\u53d8\u6211\u4eec\u6267\u884c\u6b65\u9aa4\u7684\u987a\u5e8f\uff0c\u5b83\u8981\u6c42\u6d88\u606f\u961f\u5217\u7cfb\u7edf\u652f\u6301\u4e8b\u52a1\u6216ACK\u673a\u5236\uff0c\u6bd4\u5982\u4f20\u7edf\u7684 begin-commit-rollback \u534f\u8bae\uff08MSMQ\u662f\u8fd9\u6837\uff09\uff0c\u6216\u8005\u662f receive-ack-nack \u534f\u8bae\uff08RabbitMQ\uff0cAzure Service Bus\u7b49\u662f\u8fd9\u6837\u7684\uff09\u3002</p> <p>\u5927\u81f4\u6b65\u9aa4\u5982\u4e0b:</p> <pre><code>1. \u62a2\u5360\u961f\u5217\u4e2d\u7684\u6d88\u606f\u3002\n2. \u5f00\u59cb\u4e00\u4e2a\u5de5\u4f5c\u4e8b\u52a1\n3. \u5904\u7406\u6d88\u606f ( \u4f60\u7684\u4ee3\u7801 )\n4. \u662f\u5426\u6210\u529f ?\n    Yes: \n        1. \u63d0\u4ea4\u5de5\u4f5c\u4e8b\u52a1\n        2. \u4ece\u961f\u5217\u5220\u9664\u6d88\u606f\n    No: \n        1. \u56de\u6eda\u5de5\u4f5c\u4e8b\u52a1\n        2. \u4ece\u961f\u5217\u91ca\u653e\u62a2\u5360\u7684\u6d88\u606f\n</code></pre> <p>\u5f53\u51fa\u73b0\u5931\u8d25\u6216\u8005\u62a2\u5360\u6d88\u606f\u8d85\u65f6\u7684\u65f6\u5019\uff0c\u6211\u4eec\u603b\u662f\u80fd\u591f\u518d\u6b21\u63a5\u6536\u5230\u6d88\u606f\u4ee5\u4fdd\u8bc1\u6211\u4eec\u5de5\u4f5c\u4e8b\u52a1\u63d0\u4ea4\u6210\u529f\u3002</p>"},{"location":"user-guide/zh/cap/idempotence/#_3","title":"\u4ec0\u4e48\u662f \u201c\u5de5\u4f5c\u4e8b\u52a1\u201d ?","text":"<p>\u4e0a\u9762\u6240\u8bf4\u7684\u201c\u5de5\u4f5c\u4e8b\u52a1\u201d\u5e76\u4e0d\u662f\u7279\u6307\u5173\u7cfb\u578b\u6570\u636e\u5e93\u4e2d\u7684\u4e8b\u52a1\uff0c\u8fd9\u91cc\u7684\u5de5\u4f5c\u4e8b\u52a1\u662f\u4e00\u4e2a\u6982\u5ff5\uff0c\u4e5f\u5c31\u662f\u8bf4\u6267\u884c\u4ee3\u7801\u7684\u539f\u5b50\u6027\u3002</p> <p>\u6bd4\u5982\u5b83\u53ef\u4ee5\u662f\u4f20\u7edf\u7684RDMS\u4e8b\u52a1\uff0c\u4e5f\u6216\u8005\u662f MongoDB \u4e8b\u52a1\u6216\u8005\u662f\u4e00\u4e2a\u4ea4\u6613\u7b49\u3002</p> <p>\u5728\u8fd9\u91cc\u5b83\u4ee3\u8868\u4e00\u4e2a\u6267\u884c\u5355\u5143\uff0c\u8fd9\u4e2a\u6267\u884c\u5355\u5143\u662f\u4e00\u4e2a\u6982\u5ff5\u6027\u7684\u4e8b\u5b9e\u4ee5\u652f\u6301\u524d\u9762\u63d0\u5230\u7684\u4ec5\u4ea4\u4ed8\u4e00\u6b21\u7684\u8fd9\u79cd\u95ee\u9898\u3002</p> <p>\u901a\u5e38\uff0c\u4e0d\u53ef\u80fd\u505a\u5230\u6d88\u606f\u7684\u4e8b\u52a1\u548c\u5de5\u4f5c\u4e8b\u52a1\u6765\u5f62\u6210\u539f\u5b50\u6027\u8fdb\u884c\u63d0\u4ea4\u6216\u8005\u56de\u6eda\u3002</p>"},{"location":"user-guide/zh/cap/idempotence/#cap","title":"CAP \u4e2d\u7684\u5e42\u7b49\u6027","text":"<p>\u5728CAP\u4e2d\uff0c\u6211\u4eec\u91c7\u7528\u7684\u4ea4\u4ed8\u4fdd\u8bc1\u4e3a At Least Once\u3002</p> <p>\u7531\u4e8e\u6211\u4eec\u5177\u6709\u4e34\u65f6\u5b58\u50a8\u4ecb\u8d28\uff08\u6570\u636e\u5e93\u8868\uff09\uff0c\u4e5f\u8bb8\u53ef\u4ee5\u505a\u5230 At Most Once, \u4f46\u662f\u4e3a\u4e86\u4e25\u683c\u4fdd\u8bc1\u6d88\u606f\u4e0d\u4f1a\u4e22\u5931\uff0c\u6211\u4eec\u6ca1\u6709\u63d0\u4f9b\u76f8\u5173\u529f\u80fd\u6216\u914d\u7f6e\u3002</p>"},{"location":"user-guide/zh/cap/idempotence/#_4","title":"\u4e3a\u4ec0\u4e48\u6ca1\u6709\u5b9e\u73b0\u5e42\u7b49\uff1f","text":"<p>1\u3001\u6d88\u606f\u5199\u5165\u6210\u529f\u4e86\uff0c\u4f46\u662f\u6b64\u65f6\u6267\u884cConsumer\u65b9\u6cd5\u5931\u8d25\u4e86</p> <p>\u6267\u884cConsumer\u65b9\u6cd5\u5931\u8d25\u7684\u539f\u56e0\u6709\u975e\u5e38\u591a\uff0c\u6211\u5982\u679c\u4e0d\u77e5\u9053\u5177\u4f53\u7684\u573a\u666f\u76f2\u76ee\u8fdb\u884c\u91cd\u8bd5\u6216\u8005\u4e0d\u8fdb\u884c\u91cd\u8bd5\u90fd\u662f\u4e0d\u6b63\u786e\u7684\u9009\u62e9\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff1a\u5047\u5982\u6d88\u8d39\u8005\u4e3a\u6263\u6b3e\u670d\u52a1\uff0c\u5982\u679c\u662f\u6267\u884c\u6263\u6b3e\u6210\u529f\u4e86\uff0c\u4f46\u662f\u5728\u5199\u6263\u6b3e\u65e5\u5fd7\u7684\u65f6\u5019\u5931\u8d25\u4e86\uff0c\u6b64\u65f6CAP\u4f1a\u5224\u65ad\u4e3a\u6d88\u8d39\u8005\u6267\u884c\u5931\u8d25\uff0c\u8fdb\u884c\u91cd\u8bd5\u3002\u5982\u679c\u5ba2\u6237\u7aef\u81ea\u5df1\u6ca1\u6709\u4fdd\u8bc1\u5e42\u7b49\u6027\uff0c\u6846\u67b6\u5bf9\u5176\u8fdb\u884c\u91cd\u8bd5\uff0c\u8fd9\u91cc\u52bf\u5fc5\u4f1a\u9020\u6210\u591a\u6b21\u6263\u6b3e\u51fa\u73b0\u4e25\u91cd\u540e\u679c\u3002</p> <p>2\u3001\u6267\u884cConsumer\u65b9\u6cd5\u6210\u529f\u4e86\uff0c\u4f46\u662f\u53c8\u6536\u5230\u4e86\u540c\u6837\u7684\u6d88\u606f</p> <p>\u6b64\u5904\u573a\u666f\u4e5f\u662f\u53ef\u80fd\u5b58\u5728\u7684\uff0c\u5047\u5982\u5f00\u59cb\u7684\u65f6\u5019Consumer\u5df2\u7ecf\u6267\u884c\u6210\u529f\u4e86\uff0c\u4f46\u662f\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\u5982 Broker \u5b95\u673a\u6062\u590d\u7b49\uff0c\u53c8\u6536\u5230\u4e86\u76f8\u540c\u7684\u6d88\u606f\uff0cCAP \u5728\u6536\u5230Broker\u6d88\u606f\u540e\u4f1a\u8ba4\u4e3a\u8fd9\u4e2a\u662f\u4e00\u4e2a\u65b0\u7684\u6d88\u606f\uff0c\u4f1a\u5bf9 Consumer\u518d\u6b21\u6267\u884c\uff0c\u7531\u4e8e\u662f\u65b0\u6d88\u606f\uff0c\u6b64\u65f6 CAP \u4e5f\u662f\u65e0\u6cd5\u505a\u5230\u5e42\u7b49\u7684\u3002</p> <p>3\u3001\u76ee\u524d\u7684\u6570\u636e\u5b58\u50a8\u6a21\u5f0f\u65e0\u6cd5\u505a\u5230\u5e42\u7b49</p> <p>\u7531\u4e8eCAP\u5b58\u6d88\u606f\u7684\u8868\u5bf9\u4e8e\u6210\u529f\u6d88\u8d39\u7684\u6d88\u606f\u4f1a\u4e8e1\u4e2a\u5c0f\u65f6\u540e\u5220\u9664\uff0c\u6240\u4ee5\u5982\u679c\u5bf9\u4e8e\u4e00\u4e9b\u5386\u53f2\u6027\u6d88\u606f\u65e0\u6cd5\u505a\u5230\u5e42\u7b49\u64cd\u4f5c\u3002 \u5386\u53f2\u6027\u6307\u7684\u662f\uff0c\u5047\u5982 Broker\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\u7ef4\u62a4\u4e86\u6216\u8005\u662f\u4eba\u5de5\u5904\u7406\u7684\u4e00\u4e9b\u6d88\u606f\u3002</p> <p>4\u3001\u4e1a\u754c\u505a\u6cd5</p> <p>\u8bb8\u591a\u57fa\u4e8e\u4e8b\u4ef6\u9a71\u52a8\u7684\u6846\u67b6\u90fd\u662f\u8981\u6c42 \u7528\u6237 \u6765\u4fdd\u8bc1\u5e42\u7b49\u6027\u64cd\u4f5c\u7684\uff0c\u6bd4\u5982 ENode, RocketMQ \u7b49\u7b49...</p> <p>\u4ece\u5b9e\u73b0\u7684\u89d2\u5ea6\u6765\u8bf4\uff0cCAP\u53ef\u4ee5\u505a\u4e00\u4e9b\u6bd4\u8f83\u4e0d\u4e25\u683c\u7684\u5e42\u7b49\uff0c\u4f46\u662f\u4e25\u683c\u7684\u5e42\u7b49\u65e0\u6cd5\u505a\u5230\u7684\u3002</p>"},{"location":"user-guide/zh/cap/idempotence/#_5","title":"\u4ee5\u81ea\u7136\u7684\u65b9\u5f0f\u5904\u7406\u5e42\u7b49\u6d88\u606f","text":"<p>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4fdd\u8bc1\u6d88\u606f\u88ab\u6267\u884c\u591a\u6b21\u800c\u4e0d\u4f1a\u4ea7\u751f\u610f\u5916\u7ed3\u679c\u662f\u5f88\u81ea\u7136\u7684\u4e00\u79cd\u65b9\u5f0f\u662f\u91c7\u7528\u64cd\u4f5c\u5bf9\u8c61\u81ea\u5e26\u7684\u4e00\u4e9b\u5e42\u7b49\u529f\u80fd\u3002\u6bd4\u5982\uff1a</p> <p>\u6570\u636e\u5e93\u63d0\u4f9b\u7684 <code>INSERT ON DUPLICATE KEY UPDATE</code> \u6216\u8005\u662f\u91c7\u53d6\u7c7b\u578b\u7684\u7a0b\u5e8f\u5224\u65ad\u884c\u4e3a\u3002</p>"},{"location":"user-guide/zh/cap/idempotence/#_6","title":"\u663e\u5f0f\u5904\u7406\u5e42\u7b49\u6d88\u606f","text":"<p>\u53e6\u5916\u4e00\u79cd\u5904\u7406\u5e42\u7b49\u6027\u7684\u65b9\u5f0f\u5c31\u662f\u5728\u6d88\u606f\u4f20\u9012\u7684\u8fc7\u7a0b\u4e2d\u4f20\u9012ID\uff0c\u7136\u540e\u7531\u5355\u72ec\u7684\u6d88\u606f\u8ddf\u8e2a\u5668\u6765\u5904\u7406\u3002 </p> <p>\u6bd4\u5982\u4f60\u4f7f\u7528\u5177\u6709\u4e8b\u52a1\u6570\u636e\u5b58\u50a8\u7684 IMessageTracker \u6765\u8ddf\u8e2a\u6d88\u606fID\uff0c\u4f60\u7684\u4ee3\u7801\u53ef\u80fd\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a</p> <pre><code>readonly IMessageTracker _messageTracker;\n\npublic SomeMessageHandler(IMessageTracker messageTracker)\n{\n    _messageTracker = messageTracker;\n}\n\n[CapSubscribe]\npublic async Task Handle(SomeMessage message) \n{\n    if (await _messageTracker.HasProcessed(message.Id))\n    {\n        return;\n    }\n\n    // do the work here\n    // ...\n\n    // remember that this message has been processed\n    await _messageTracker.MarkAsProcessed(messageId);\n}\n</code></pre> <p>\u81f3\u4e8e <code>IMessageTracker</code> \u7684\u5b9e\u73b0\uff0c\u53ef\u4ee5\u4f7f\u7528\u8bf8\u5982Redis\u6216\u8005\u6570\u636e\u5e93\u7b49\u5b58\u50a8\u6d88\u606fId\u548c\u5bf9\u5e94\u7684\u5904\u7406\u72b6\u6001\u3002</p>"},{"location":"user-guide/zh/cap/messaging/","title":"\u6d88\u606f","text":"<p>\u4f7f\u7528 <code>ICapPublisher</code> \u63a5\u53e3\u53d1\u9001\u51fa\u53bb\u7684\u6570\u636e\u79f0\u4e4b\u4e3a Message (<code>\u6d88\u606f</code>)\u3002</p>"},{"location":"user-guide/zh/cap/messaging/#_2","title":"\u53d1\u9001 &amp; \u5904\u7406\u6d88\u606f","text":"<p>\u4f60\u53ef\u4ee5\u9605\u8bfb quick-start \u6765\u5b66\u4e60\u5982\u4f55\u53d1\u9001\u548c\u5904\u7406\u6d88\u606f\u3002</p> <p>\u6d88\u8d39\u8005\u4e2d\u4f7f\u7528 HTTPClient \u5f15\u53d1\u7684 TimeoutException</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u6d88\u8d39\u8005\u629b\u51fa <code>OperationCanceledException</code>\uff08\u5305\u62ec <code>TaskCanceledException</code>\uff09\uff0c\u6211\u4eec\u4f1a\u8ba4\u4e3a\u8fd9\u662f\u7528\u6237\u7684\u6b63\u5e38\u884c\u4e3a\u800c\u5bf9\u5f02\u5e38\u8fdb\u884c\u5ffd\u7565\u3002\u5982\u679c\u4f60\u5728\u6d88\u8d39\u8005\u65b9\u6cd5\u4e2d\u4f7f\u7528 HTTPClient \u5e76\u4e14\u8fdb\u884c\u4e86\u914d\u7f6e\u4e86Timeout\u914d\u7f6e\uff0c\u7531\u4e8eHTTP Client\u7684\u8bbe\u8ba1\u95ee\u9898\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u5355\u72ec\u5bf9\u5f02\u5e38\u8fdb\u884c\u5904\u7406\u5e76\u91cd\u65b0\u5f15\u53d1\u975eOperationCanceledException\uff0c\u53c2\u8003 #1368</p>"},{"location":"user-guide/zh/cap/messaging/#_3","title":"\u8865\u507f\u4e8b\u52a1","text":"<p>Compensating transaction</p> <p>\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6d88\u8d39\u8005\u9700\u8981\u8fd4\u56de\u503c\u4ee5\u544a\u8bc9\u53d1\u5e03\u8005\u6267\u884c\u7ed3\u679c\uff0c\u4ee5\u4fbf\u4e8e\u53d1\u5e03\u8005\u5b9e\u65bd\u4e00\u4e9b\u52a8\u4f5c\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\u8fd9\u5c5e\u4e8e\u8865\u507f\u8303\u56f4\u3002</p> <p>\u4f60\u53ef\u4ee5\u5728\u6d88\u8d39\u8005\u6267\u884c\u7684\u4ee3\u7801\u4e2d\u901a\u8fc7\u91cd\u65b0\u53d1\u5e03\u4e00\u4e2a\u65b0\u6d88\u606f\u6765\u901a\u77e5\u4e0a\u6e38\uff0cCAP \u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u5f0f\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002 \u4f60\u53ef\u4ee5\u5728\u53d1\u9001\u7684\u65f6\u5019\u6307\u5b9a <code>callbackName</code> \u6765\u5f97\u5230\u6d88\u8d39\u8005\u7684\u6267\u884c\u7ed3\u679c\uff0c\u901a\u5e38\u8fd9\u4ec5\u9002\u7528\u4e8e\u70b9\u5bf9\u70b9\u7684\u6d88\u8d39\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u793a\u4f8b\u3002</p> <p>\u4f8b\u5982\uff0c\u5728\u4e00\u4e2a\u7535\u5546\u7a0b\u5e8f\u4e2d\uff0c\u8ba2\u5355\u521d\u59cb\u72b6\u6001\u4e3a pending\uff0c\u5f53\u5546\u54c1\u6570\u91cf\u6210\u529f\u6263\u9664\u65f6\u5c06\u72b6\u6001\u6807\u8bb0\u4e3a succeeded \uff0c\u5426\u5219\u4e3a failed\u3002</p> <pre><code>// =============  Publisher =================\n\n_capBus.Publish(\"place.order.qty.deducted\", \n    contentObj: new { OrderId = 1234, ProductId = 23255, Qty = 1 }, \n    callbackName: \"place.order.mark.status\");    \n\n// publisher using `callbackName` to subscribe consumer result\n\n[CapSubscribe(\"place.order.mark.status\")]\npublic void MarkOrderStatus(JsonElement param)\n{\n    var orderId = param.GetProperty(\"OrderId\").GetInt32();\n    var isSuccess = param.GetProperty(\"IsSuccess\").GetBoolean();\n\n    if(isSuccess){\n        // mark order status to succeeded\n    }\n    else{\n       // mark order status to failed\n    }\n}\n\n// =============  Consumer ===================\n\n[CapSubscribe(\"place.order.qty.deducted\")]\npublic object DeductProductQty(JsonElement param)\n{\n    var orderId = param.GetProperty(\"OrderId\").GetInt32();\n    var productId = param.GetProperty(\"ProductId\").GetInt32();\n    var qty = param.GetProperty(\"Qty\").GetInt32();\n\n    //business logic \n\n    return new { OrderId = orderId, IsSuccess = true };\n}\n</code></pre>"},{"location":"user-guide/zh/cap/messaging/#_4","title":"\u63a7\u5236\u56de\u8c03\u54cd\u5e94","text":"<p>\u4f60\u53ef\u4ee5\u901a\u8fc7 <code>[FromCap]</code> \u6807\u8bb0\u5728\u8ba2\u9605\u65b9\u6cd5\u4e2d\u6ce8\u5165 <code>CapHeader</code> \u53c2\u6570\uff0c\u5e76\u5229\u7528\u5176\u63d0\u4f9b\u7684\u65b9\u6cd5\u6765\u5411\u56de\u8c03\u4e0a\u4e0b\u6587\u4e2d\u6dfb\u52a0\u989d\u5916\u7684\u5934\u4fe1\u606f\u6216\u8005\u7ec8\u6b62\u56de\u8c03\u3002</p> <p>\u793a\u4f8b\u5982\u4e0b\uff1a</p> <pre><code>[CapSubscribe(\"place.order.qty.deducted\")]\npublic object DeductProductQty(JsonElement param, [FromCap] CapHeader header)\n{\n    var orderId = param.GetProperty(\"OrderId\").GetInt32();\n    var productId = param.GetProperty(\"ProductId\").GetInt32();\n    var qty = param.GetProperty(\"Qty\").GetInt32();\n\n    // \u6dfb\u52a0\u989d\u5916\u7684\u5934\u4fe1\u606f\u5230\u54cd\u5e94\u6d88\u606f\u4e2d\n    header.AddResponseHeader(\"some-message-info\", \"this is the test\");\n    // \u6216\u518d\u6b21\u6dfb\u52a0\u56de\u8c03\u7684\u56de\u8c03\n    header.AddResponseHeader(DotNetCore.CAP.Messages.Headers.CallbackName, \"place.order.qty.deducted-callback\");\n\n    // \u5982\u679c\u4f60\u4e0d\u518d\u9075\u4ece\u53d1\u9001\u7740\u6307\u5b9a\u7684\u56de\u8c03\uff0c\u60f3\u4fee\u6539\u56de\u8c03\uff0c\u53ef\u901a\u8fc7 RewriteCallback \u65b9\u6cd5\u4fee\u6539\u3002\n    header.RewriteCallback(\"new-callback-name\");\n\n    // \u5982\u679c\u4f60\u60f3\u7ec8\u6b62/\u505c\u6b62\uff0c\u6216\u4e0d\u518d\u7ed9\u53d1\u9001\u65b9\u54cd\u5e94\uff0c\u8c03\u7528 RemoveCallback \u6765\u79fb\u9664\u56de\u8c03\u3002\n    header.RemoveCallback();\n\n    return new { OrderId = orderId, IsSuccess = true };\n}\n</code></pre>"},{"location":"user-guide/zh/cap/messaging/#_5","title":"\u5f02\u6784\u7cfb\u7edf\u96c6\u6210","text":"<p>\u5728 3.0+ \u7248\u672c\u4e2d\uff0c\u6211\u4eec\u5bf9\u6d88\u606f\u7ed3\u6784\u8fdb\u884c\u4e86\u91cd\u6784\uff0c\u6211\u4eec\u5229\u7528\u4e86\u6d88\u606f\u961f\u5217\u4e2d\u6d88\u606f\u534f\u8bae\u4e2d\u7684 Header \u6765\u4f20\u8f93\u4e00\u4e9b\u989d\u5916\u4fe1\u606f\uff0c\u4ee5\u4fbf\u4e8e\u5728 Body \u4e2d\u6211\u4eec\u53ef\u4ee5\u505a\u5230\u4e0d\u9700\u8981\u4fee\u6539\u6216\u5305\u88c5\u4f7f\u7528\u8005\u7684\u539f\u59cb\u6d88\u606f\u6570\u636e\u683c\u5f0f\u548c\u5185\u5bb9\u8fdb\u884c\u53d1\u9001\u3002</p> <p>\u8fd9\u6837\u7684\u505a\u6cd5\u662f\u5408\u7406\u7684\uff0c\u5b83\u6709\u52a9\u4e8e\u5728\u5f02\u6784\u7cfb\u7edf\u4e2d\u8fdb\u884c\u66f4\u597d\u7684\u96c6\u6210\uff0c\u76f8\u5bf9\u4e8e\u4ee5\u524d\u7684\u7248\u672c\u4f7f\u7528\u8005\u4e0d\u9700\u8981\u77e5\u9053CAP\u5185\u90e8\u4f7f\u7528\u7684\u6d88\u606f\u7ed3\u6784\u5c31\u53ef\u4ee5\u5b8c\u6210\u96c6\u6210\u5de5\u4f5c\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u5c06\u6d88\u606f\u5212\u5206\u4e3a Header \u548c Body \u6765\u8fdb\u884c\u4f20\u8f93\u3002</p> <p>Body \u4e2d\u7684\u6570\u636e\u4e3a\u7528\u6237\u53d1\u9001\u7684\u539f\u59cb\u6d88\u606f\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f\u8c03\u7528 Publish \u65b9\u6cd5\u53d1\u9001\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u4e0d\u8fdb\u884c\u4efb\u4f55\u5305\u88c5\u4ec5\u4ec5\u662f\u5e8f\u5217\u5316\u540e\u4f20\u9012\u5230\u6d88\u606f\u961f\u5217\u3002</p> <p>\u5728 Header \u4e2d\uff0c\u6211\u4eec\u9700\u8981\u4f20\u9012\u4e00\u4e9b\u989d\u5916\u4fe1\u606f\u4ee5\u4fbf\u4e8eCAP\u5728\u6536\u5230\u6d88\u606f\u65f6\u80fd\u591f\u63d0\u53d6\u5230\u5173\u952e\u7279\u5f81\u8fdb\u884c\u64cd\u4f5c\u3002</p> <p>\u4ee5\u4e0b\u662f\u5728\u5f02\u6784\u7cfb\u7edf\u4e2d\uff0c\u9700\u8981\u5728\u53d1\u6d88\u606f\u7684\u65f6\u5019\u5411\u6d88\u606f\u7684Header \u4e2d\u5199\u5165\u7684\u5185\u5bb9\uff1a</p> \u952e \u7c7b\u578b \u8bf4\u660e cap-msg-id long \u6d88\u606fId\uff0c \u7531\u96ea\u82b1\u7b97\u6cd5\u751f\u6210 cap-msg-name string \u6d88\u606f\u540d\u79f0\uff0c\u5373 Topic \u540d\u5b57 cap-msg-type string \u6d88\u606f\u7684\u7c7b\u578b, \u5373 typeof(T).FullName (\u975e\u5fc5\u987b) cap-senttime string \u53d1\u9001\u7684\u65f6\u95f4 (\u975e\u5fc5\u987b) <p>\u4ee5 Java \u7cfb\u7edf\u53d1\u9001 RabbitMQ \u4e3a\u4f8b\uff1a</p> <pre><code>Map&lt;String, Object&gt; headers = new HashMap&lt;String, Object&gt;();\nheaders.put(\"cap-msg-id\",  UUID.randomUUID().toString());\nheaders.put(\"cap-msg-name\", routingKey);\n\nchannel.basicPublish(exchangeName, routingKey,\n             new AMQP.BasicProperties.Builder()\n               .headers(headers)\n               .build(),\n               messageBodyBytes);\n// messageBodyBytes = \"\u53d1\u9001\u7684json\".getBytes(Charset.forName(\"UTF-8\"))\n// \u6ce8\u610f messageBody \u9ed8\u8ba4\u4e3a json \u7684 byte[]\uff0c\u5982\u679c\u91c7\u7528\u5176\u4ed6\u7cfb\u5217\u5316\uff0c\u9700\u8981\u5728CAP\u4fa7\u81ea\u5b9a\u4e49\u53cd\u5e8f\u5217\u5316\u5668\n</code></pre>"},{"location":"user-guide/zh/cap/messaging/#_6","title":"\u6d88\u606f\u8c03\u5ea6","text":"<p>CAP \u63a5\u6536\u5230\u6d88\u606f\u4e4b\u540e\u4f1a\u5c06\u6d88\u606f\u53d1\u9001\u5230 Transport, \u7531 Transport \u8fdb\u884c\u8fd0\u8f93\u3002</p> <p>\u5f53\u4f60\u4f7f\u7528 <code>ICapPublisher</code> \u63a5\u53e3\u53d1\u9001\u65f6\uff0cCAP\u5c06\u4f1a\u5c06\u6d88\u606f\u8c03\u5ea6\u5230\u76f8\u5e94\u7684 Transport\u4e2d\u53bb\uff0c\u76ee\u524d\u8fd8\u4e0d\u652f\u6301\u6279\u91cf\u53d1\u9001\u6d88\u606f\u3002</p> <p>\u6709\u5173 Transports \u7684\u66f4\u591a\u4fe1\u606f\uff0c\u53ef\u4ee5\u67e5\u770b Transports \u7ae0\u8282\u3002</p>"},{"location":"user-guide/zh/cap/messaging/#_7","title":"\u6d88\u606f\u5b58\u50a8","text":"<p>CAP \u63a5\u6536\u5230\u6d88\u606f\u4e4b\u540e\u4f1a\u5c06\u6d88\u606f\u8fdb\u884c Persistent\uff08\u6301\u4e45\u5316\uff09\uff0c \u6709\u5173 Persistent \u7684\u66f4\u591a\u4fe1\u606f\uff0c\u53ef\u4ee5\u67e5\u770b Persistent \u7ae0\u8282\u3002</p>"},{"location":"user-guide/zh/cap/messaging/#_8","title":"\u6d88\u606f\u91cd\u8bd5","text":"<p>\u91cd\u8bd5\u5728\u6574\u4e2aCAP\u67b6\u6784\u8bbe\u8ba1\u4e2d\u5177\u6709\u91cd\u8981\u4f5c\u7528\uff0cCAP \u4e2d\u4f1a\u9488\u5bf9\u53d1\u9001\u5931\u8d25\u6216\u8005\u6267\u884c\u5931\u8d25\u7684\u6d88\u606f\u8fdb\u884c\u91cd\u8bd5\u3002\u5728\u6574\u4e2a CAP \u7684\u8bbe\u8ba1\u8fc7\u7a0b\u4e2d\u6709\u4ee5\u4e0b\u51e0\u5904\u91c7\u7528\u7684\u91cd\u8bd5\u7b56\u7565\u3002</p> <p>1\u3001 \u53d1\u9001\u91cd\u8bd5</p> <p>\u5728\u6d88\u606f\u53d1\u9001\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u51fa\u73b0 Broker \u5b95\u673a\u6216\u8005\u8fde\u63a5\u5931\u8d25\u7684\u60c5\u51b5\u4ea6\u6216\u8005\u51fa\u73b0\u5f02\u5e38\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u65f6\u5019 CAP \u4f1a\u5bf9\u53d1\u9001\u7684\u91cd\u8bd5\uff0c\u7b2c\u4e00\u6b21\u91cd\u8bd5\u6b21\u6570\u4e3a 3\uff0c4\u5206\u949f\u540e\u4ee5\u540e\u6bcf\u5206\u949f\u91cd\u8bd5\u4e00\u6b21\uff0c\u8fdb\u884c\u6b21\u6570 +1\uff0c\u5f53\u603b\u6b21\u6570\u8fbe\u523050\u6b21\u540e\uff0cCAP\u5c06\u4e0d\u5bf9\u5176\u8fdb\u884c\u91cd\u8bd5\u3002</p> <p>\u4f60\u53ef\u4ee5\u5728 CapOptions \u4e2d\u8bbe\u7f6e FailedRetryCount \u6765\u8c03\u6574\u9ed8\u8ba4\u91cd\u8bd5\u7684\u603b\u6b21\u6570\uff0c\u6216\u4f7f\u7528 FailedThresholdCallback \u5728\u8fbe\u5230\u6700\u5927\u91cd\u8bd5\u6b21\u6570\u65f6\u6536\u5230\u901a\u77e5\u3002</p> <p>\u5f53\u5931\u8d25\u603b\u6b21\u6570\u8fbe\u5230\u9ed8\u8ba4\u5931\u8d25\u603b\u6b21\u6570\u540e\uff0c\u5c31\u4e0d\u4f1a\u8fdb\u884c\u91cd\u8bd5\u4e86\uff0c\u4f60\u53ef\u4ee5\u5728 Dashboard \u4e2d\u67e5\u770b\u6d88\u606f\u5931\u8d25\u7684\u539f\u56e0\uff0c\u7136\u540e\u8fdb\u884c\u4eba\u5de5\u91cd\u8bd5\u5904\u7406\u3002</p> <p>2\u3001 \u6d88\u8d39\u91cd\u8bd5</p> <p>\u5f53 Consumer \u63a5\u6536\u5230\u6d88\u606f\u65f6\uff0c\u4f1a\u6267\u884c\u6d88\u8d39\u8005\u65b9\u6cd5\uff0c\u5728\u6267\u884c\u6d88\u8d39\u8005\u65b9\u6cd5\u51fa\u73b0\u5f02\u5e38\u65f6\uff0c\u4f1a\u8fdb\u884c\u91cd\u8bd5\u3002\u8fd9\u4e2a\u91cd\u8bd5\u7b56\u7565\u548c\u4e0a\u9762\u7684 \u53d1\u9001\u91cd\u8bd5 \u662f\u76f8\u540c\u7684\u3002</p> <p>\u65e0\u8bba\u53d1\u9001\u5931\u8d25\u6216\u8005\u6d88\u8d39\u5931\u8d25\uff0c\u6211\u4eec\u4f1a\u5c06\u5f02\u5e38\u6d88\u606f\u540c\u65f6\u5b58\u50a8\u5230\u6d88\u606f header \u4e2d\u7684 cap-exception \u5b57\u6bb5\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5728\u6570\u636e\u5e93\u8868\u7684 Content \u5b57\u6bb5\u7684json\u4e2d\u627e\u5230\u3002</p>"},{"location":"user-guide/zh/cap/messaging/#_9","title":"\u6d88\u606f\u6570\u636e\u6e05\u7406","text":"<p>\u6570\u636e\u5e93\u6d88\u606f\u8868\u4e2d\u5177\u6709\u4e00\u4e2a ExpiresAt \u5b57\u6bb5\u8868\u793a\u6d88\u606f\u7684\u8fc7\u671f\u65f6\u95f4\uff0c\u5f53\u6d88\u606f\u53d1\u9001\u6210\u529f\u6216\u8005\u6d88\u8d39\u6210\u529f\u540e\uff0cCAP \u4f1a\u5c06\u6d88\u606f\u72b6\u6001\u4e3a Successed \u7684 ExpiresAt \u8bbe\u7f6e\u4e3a 1\u5929 \u540e\u8fc7\u671f\uff0c\u4f1a\u5c06\u6d88\u606f\u72b6\u6001\u4e3a Failed \u7684 ExpiresAt \u8bbe\u7f6e\u4e3a 15\u5929 \u540e\u8fc7\u671f\uff08\u53ef\u901a\u8fc7 FailedMessageExpiredAfter \u914d\u7f6e)\u3002</p> <p>CAP \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u6bcf\u9694**5\u5206\u949f**\u5c06\u6d88\u606f\u8868\u7684\u6570\u636e\u8fdb\u884c\u6e05\u7406\u5220\u9664\uff0c\u907f\u514d\u6570\u636e\u91cf\u8fc7\u591a\u5bfc\u81f4\u6027\u80fd\u7684\u964d\u4f4e\u3002\u6e05\u7406\u89c4\u5219\u4e3a ExpiresAt \u4e0d\u4e3a\u7a7a\u5e76\u4e14\u5c0f\u4e8e\u5f53\u524d\u65f6\u95f4\u7684\u6570\u636e\u3002 \u4e5f\u5c31\u662f\u8bf4\u72b6\u6001\u4e3aFailed\u7684\u6d88\u606f\uff08\u6b63\u5e38\u60c5\u51b5\u4ed6\u4eec\u5df2\u7ecf\u88ab\u91cd\u8bd5\u4e86 50 \u6b21\uff09\uff0c\u5982\u679c\u4f6015\u5929\u6ca1\u6709\u4eba\u5de5\u4ecb\u5165\u5904\u7406\uff0c\u540c\u6837\u4f1a\u88ab\u6e05\u7406\u6389\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7 CollectorCleaningInterval \u914d\u7f6e\u9879\u6765\u81ea\u5b9a\u4e49\u95f4\u9694\u65f6\u95f4\u3002</p>"},{"location":"user-guide/zh/cap/serialization/","title":"\u5e8f\u5217\u5316","text":"<p>CAP \u63d0\u4f9b\u4e86 <code>ISerializer</code> \u63a5\u53e3\u6765\u652f\u6301\u5bf9\u6d88\u606f\u8fdb\u884c\u5e8f\u5217\u5316\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6211\u4eec\u4f7f\u7528 json \u6765\u5bf9\u6d88\u606f\u8fdb\u884c\u5e8f\u5217\u5316\u5904\u7406\u5e76\u5b58\u50a8\u5230\u6570\u636e\u5e93\u4e2d\u3002</p>"},{"location":"user-guide/zh/cap/serialization/#_2","title":"\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316","text":"<pre><code>public class YourSerializer: ISerializer\n{\n    Task&lt;TransportMessage&gt; SerializeAsync(Message message)\n    {\n\n    }\n\n    Task&lt;Message&gt; DeserializeAsync(TransportMessage transportMessage, Type valueType)\n    {\n\n    }\n}\n</code></pre> <p>\u7136\u540e\u5c06\u4f60\u7684\u5b9e\u73b0\u6ce8\u518c\u5230\u5bb9\u5668\u4e2d:</p> <pre><code>//\u6ce8\u518c\u4f60\u7684\u81ea\u5b9a\u4e49\u5b9e\u73b0\nservices.AddSingleton&lt;ISerializer, YourSerializer&gt;();\n\n// ---\nservices.AddCap \n</code></pre>"},{"location":"user-guide/zh/cap/transactions/","title":"\u4e8b\u52a1","text":""},{"location":"user-guide/zh/cap/transactions/#_2","title":"\u5206\u5e03\u5f0f\u4e8b\u52a1?","text":"<p>CAP \u4e0d\u76f4\u63a5\u63d0\u4f9b\u5f00\u7bb1\u5373\u7528\u7684\u57fa\u4e8e DTC \u6216\u8005 2PC \u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\uff0c\u76f8\u53cd\u6211\u4eec\u63d0\u4f9b\u4e00\u79cd\u53ef\u4ee5\u7528\u4e8e\u89e3\u51b3\u5728\u5206\u5e03\u5f0f\u4e8b\u52a1\u9047\u5230\u7684\u95ee\u9898\u7684\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u3002</p> <p>\u5728\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\uff0c\u7531\u4e8e\u6d89\u53ca\u901a\u8baf\u7684\u5f00\u9500\uff0c\u4f7f\u7528\u57fa\u4e8e2PC\u6216DTC\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u5c06\u975e\u5e38\u6602\u8d35\uff0c\u5728\u6027\u80fd\u65b9\u9762\u4e5f\u540c\u6837\u5982\u6b64\u3002\u53e6\u5916\u7531\u4e8e\u57fa\u4e8e2PC\u6216DTC\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u540c\u6837\u53d7**CAP\u5b9a\u7406**\u7684\u7ea6\u675f\uff0c\u5f53\u53d1\u751f\u7f51\u7edc\u5206\u533a\u65f6\u5b83\u5c06\u4e0d\u5f97\u4e0d\u653e\u5f03\u53ef\u7528\u6027(CAP\u4e2d\u7684A)\u3002</p> <p>\u9488\u5bf9\u4e8e\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5904\u7406\uff0cCAP \u91c7\u7528\u7684\u662f\u201c\u5f02\u6b65\u786e\u4fdd\u201d\u8fd9\u79cd\u65b9\u6848\u3002</p>"},{"location":"user-guide/zh/cap/transactions/#_3","title":"\u5f02\u6b65\u786e\u4fdd","text":"<p>\u5f02\u6b65\u786e\u4fdd\u8fd9\u79cd\u65b9\u6848\u53c8\u53eb\u505a\u672c\u5730\u6d88\u606f\u8868\uff0c\u8fd9\u662f\u4e00\u79cd\u7ecf\u5178\u7684\u65b9\u6848\uff0c\u65b9\u6848\u6700\u521d\u6765\u6e90\u4e8e eBay\uff0c\u53c2\u8003\u8d44\u6599\u89c1\u6bb5\u672b\u94fe\u63a5\u3002\u8fd9\u79cd\u65b9\u6848\u76ee\u524d\u4e5f\u662f\u4f01\u4e1a\u4e2d\u4f7f\u7528\u6700\u591a\u7684\u65b9\u6848\u4e4b\u4e00\u3002</p> <p>\u76f8\u5bf9\u4e8e TCC \u6216\u8005 2PC/3PC \u6765\u8bf4\uff0c\u8fd9\u4e2a\u65b9\u6848\u5bf9\u4e8e\u5206\u5e03\u5f0f\u4e8b\u52a1\u6765\u8bf4\u662f\u6700\u7b80\u5355\u7684\uff0c\u800c\u4e14\u5b83\u662f\u53bb\u4e2d\u5fc3\u5316\u7684\u3002\u5728TCC \u6216\u8005 2PC \u7684\u65b9\u6848\u4e2d\uff0c\u5fc5\u987b\u5177\u6709\u4e8b\u52a1\u534f\u8c03\u5668\u6765\u5904\u7406\u6bcf\u4e2a\u4e0d\u540c\u670d\u52a1\u4e4b\u95f4\u7684\u72b6\u6001\uff0c\u800c\u6b64\u79cd\u65b9\u6848\u4e0d\u9700\u8981\u4e8b\u52a1\u534f\u8c03\u5668\u3002 \u53e6\u5916 2PC/TCC \u8fd9\u79cd\u65b9\u6848\u5982\u679c\u670d\u52a1\u4f9d\u8d56\u8fc7\u591a\uff0c\u4f1a\u5e26\u6765\u7ba1\u7406\u590d\u6742\u6027\u589e\u52a0\u548c\u7a33\u5b9a\u6027\u98ce\u9669\u589e\u5927\u7684\u95ee\u9898\u3002\u8bd5\u60f3\u5982\u679c\u6211\u4eec\u5f3a\u4f9d\u8d56 10 \u4e2a\u670d\u52a1\uff0c9 \u4e2a\u90fd\u6267\u884c\u6210\u529f\u4e86\uff0c\u6700\u540e\u4e00\u4e2a\u6267\u884c\u5931\u8d25\u4e86\uff0c\u90a3\u4e48\u662f\u4e0d\u662f\u524d\u9762 9 \u4e2a\u90fd\u8981\u56de\u6eda\u6389\uff1f\u8fd9\u4e2a\u6210\u672c\u8fd8\u662f\u975e\u5e38\u9ad8\u7684\u3002</p> <p>\u4f46\u662f\uff0c\u5e76\u4e0d\u662f\u8bf4 2PC \u6216\u8005 TCC \u8fd9\u79cd\u65b9\u6848\u4e0d\u597d\uff0c\u56e0\u4e3a\u6bcf\u4e00\u79cd\u65b9\u6848\u90fd\u6709\u5176\u76f8\u5bf9\u4f18\u52bf\u7684\u4f7f\u7528\u573a\u666f\u548c\u4f18\u7f3a\u70b9\uff0c\u8fd9\u91cc\u5c31\u4e0d\u505a\u8fc7\u591a\u4ecb\u7ecd\u4e86\u3002</p> <p>\u4e2d\u6587\uff1ahttp://www.cnblogs.com/savorboard/p/base-an-acid-alternative.html \u82f1\u6587\uff1ahttp://queue.acm.org/detail.cfm?id=1394128</p>"},{"location":"user-guide/zh/getting-started/contributing/","title":"\u8d21\u732e","text":"<p>\u8d21\u732e\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u4e4b\u4e00\u5c31\u662f\u53c2\u4e0e\u8ba8\u8bba\u548cissue\u8ba8\u8bba\u3002</p> <p>\u5982\u679c\u60a8\u6709\u4efb\u4f55\u7591\u95ee\u6216\u95ee\u9898\uff0c\u8bf7\u5728CAP\u4ed3\u5e93\u4e2d\u62a5\u544a\uff1a</p> <p> Report Issue  Active Issues </p>"},{"location":"user-guide/zh/getting-started/contributing/#_2","title":"\u63d0\u4ea4\u66f4\u6539","text":"<p>\u60a8\u8fd8\u53ef\u4ee5\u901a\u8fc7\u63d0\u4ea4\u4ee3\u7801\u66f4\u6539PR\u6765\u505a\u51fa\u8d21\u732e\u3002</p> <p>Pull requests \u53ef\u8ba9\u60a8\u544a\u8bc9\u5176\u4ed6\u4eba\u5df2\u63a8\u9001\u5230GitHub\u4e0a\u5b58\u50a8\u5e93\u7684\u66f4\u6539\u3002 \u6253\u5f00 Pull requests \u540e\uff0c\u60a8\u53ef\u4ee5\u4e0e\u534f\u4f5c\u8005\u8ba8\u8bba\u548c\u5ba1\u67e5\u505a\u51fa\u7684\u66f4\u6539\uff0c\u5e76\u5728\u66f4\u6539\u5408\u5e76\u5230\u5b58\u50a8\u5e93\u4e4b\u524d\u6dfb\u52a0\u540e\u7eed\u63d0\u4ea4\u3002</p>"},{"location":"user-guide/zh/getting-started/contributing/#_3","title":"\u5176\u4ed6\u8d44\u6e90","text":"<ul> <li> <p>issue \u548c pull requests</p> </li> <li> <p>\u4f7f\u7528\u641c\u7d22\u8fc7\u6ee4 issue \u548c pull requests</p> </li> </ul>"},{"location":"user-guide/zh/getting-started/introduction/","title":"\u4ecb\u7ecd","text":"<p>CAP \u662f\u4e00\u4e2aEventBus\uff0c\u540c\u65f6\u4e5f\u662f\u4e00\u4e2a\u5728\u5fae\u670d\u52a1\u6216\u8005SOA\u7cfb\u7edf\u4e2d\u89e3\u51b3\u5206\u5e03\u5f0f\u4e8b\u52a1\u95ee\u9898\u7684\u4e00\u4e2a\u6846\u67b6\u3002\u5b83\u6709\u52a9\u4e8e\u521b\u5efa\u53ef\u6269\u5c55\uff0c\u53ef\u9760\u5e76\u4e14\u6613\u4e8e\u66f4\u6539\u7684\u5fae\u670d\u52a1\u7cfb\u7edf\u3002</p> <p>\u5728\u5fae\u8f6f\u7684 eShop \u5fae\u670d\u52a1\u793a\u4f8b\u9879\u76ee\u4e2d\uff0c\u63a8\u8350\u4f7f\u7528 CAP \u4f5c\u4e3a\u751f\u4ea7\u73af\u5883\u53ef\u7528\u7684 EventBus\u3002</p> <p>\u4ec0\u4e48\u662f EventBus\uff1f</p> <p>\u4e8b\u4ef6\u603b\u7ebf\u662f\u4e00\u79cd\u673a\u5236\uff0c\u5b83\u5141\u8bb8\u4e0d\u540c\u7684\u7ec4\u4ef6\u5f7c\u6b64\u901a\u4fe1\u800c\u4e0d\u5f7c\u6b64\u4e86\u89e3\u3002 \u7ec4\u4ef6\u53ef\u4ee5\u5c06\u4e8b\u4ef6\u53d1\u9001\u5230Eventbus\uff0c\u800c\u65e0\u9700\u77e5\u9053\u662f\u8c01\u6765\u63a5\u542c\u6216\u6709\u591a\u5c11\u5176\u4ed6\u4eba\u6765\u63a5\u542c\u3002 \u7ec4\u4ef6\u4e5f\u53ef\u4ee5\u4fa6\u542cEventbus\u4e0a\u7684\u4e8b\u4ef6\uff0c\u800c\u65e0\u9700\u77e5\u9053\u8c01\u53d1\u9001\u4e86\u4e8b\u4ef6\u3002 \u8fd9\u6837\uff0c\u7ec4\u4ef6\u53ef\u4ee5\u76f8\u4e92\u901a\u4fe1\u800c\u65e0\u9700\u76f8\u4e92\u4f9d\u8d56\u3002 \u540c\u6837\uff0c\u5f88\u5bb9\u6613\u66ff\u6362\u4e00\u4e2a\u7ec4\u4ef6\u3002 \u53ea\u8981\u65b0\u7ec4\u4ef6\u4e86\u89e3\u6b63\u5728\u53d1\u9001\u548c\u63a5\u6536\u7684\u4e8b\u4ef6\uff0c\u5176\u4ed6\u7ec4\u4ef6\u5c31\u6c38\u8fdc\u4e0d\u4f1a\u77e5\u9053.</p> <p>\u76f8\u5bf9\u4e8e\u5176\u4ed6\u7684 Service Bus \u6216\u8005 Event Bus\uff0c CAP \u62e5\u6709\u81ea\u5df1\u7684\u7279\u8272\uff0c\u5b83\u4e0d\u8981\u6c42\u4f7f\u7528\u8005\u53d1\u9001\u6d88\u606f\u6216\u8005\u5904\u7406\u6d88\u606f\u7684\u65f6\u5019\u5b9e\u73b0\u6216\u8005\u7ee7\u627f\u4efb\u4f55\u63a5\u53e3\uff0c\u62e5\u6709\u975e\u5e38\u9ad8\u7684\u7075\u6d3b\u6027\u3002\u6211\u4eec\u4e00\u76f4\u575a\u4fe1\u7ea6\u5b9a\u5927\u4e8e\u914d\u7f6e\uff0c\u6240\u4ee5CAP\u4f7f\u7528\u8d77\u6765\u975e\u5e38\u7b80\u5355\uff0c\u5bf9\u4e8e\u65b0\u624b\u975e\u5e38\u53cb\u597d\uff0c\u5e76\u4e14\u62e5\u6709\u8f7b\u91cf\u7ea7\u3002</p> <p>CAP \u91c7\u7528\u6a21\u5757\u5316\u8bbe\u8ba1\uff0c\u5177\u6709\u9ad8\u5ea6\u7684\u53ef\u6269\u5c55\u6027\u3002\u4f60\u6709\u8bb8\u591a\u9009\u9879\u53ef\u4ee5\u9009\u62e9\uff0c\u5305\u62ec\u6d88\u606f\u961f\u5217\uff0c\u5b58\u50a8\uff0c\u5e8f\u5217\u5316\u65b9\u5f0f\u7b49\uff0c\u7cfb\u7edf\u7684\u8bb8\u591a\u5143\u7d20\u5185\u5bb9\u53ef\u4ee5\u66ff\u6362\u4e3a\u81ea\u5b9a\u4e49\u5b9e\u73b0\u3002</p>"},{"location":"user-guide/zh/getting-started/introduction/#_2","title":"\u76f8\u5173\u89c6\u9891","text":"<p>Video: bilibili \u6559\u7a0b</p> <p>Video: Youtube \u6559\u7a0b</p> <p>Video: \u817e\u8baf\u89c6\u9891\u6559\u7a0b</p>"},{"location":"user-guide/zh/getting-started/introduction/#_3","title":"\u76f8\u5173\u6587\u7ae0","text":"<p>Article: CAP \u4ecb\u7ecd\u53ca\u4f7f\u7528</p> <p>Article: CAP 7.0 \u7248\u672c\u4e2d\u7684\u65b0\u7279\u6027</p> <p>Article: CAP 6.0 \u7248\u672c\u4e2d\u7684\u65b0\u7279\u6027</p> <p>Article: CAP 5.0 \u7248\u672c\u4e2d\u7684\u65b0\u7279\u6027</p> <p>Article: CAP 3.0 \u7248\u672c\u4e2d\u7684\u65b0\u7279\u6027</p> <p>Article: CAP 2.6 \u7248\u672c\u4e2d\u7684\u65b0\u7279\u6027</p> <p>Article: CAP 2.5 \u7248\u672c\u4e2d\u7684\u65b0\u7279\u6027</p> <p>Article: CAP 2.4 \u7248\u672c\u4e2d\u7684\u65b0\u7279\u6027</p> <p>Article: CAP 2.3 \u7248\u672c\u4e2d\u7684\u65b0\u7279\u6027\u7528</p> <p>Article: .NET Core Community \u9996\u4e2a\u5343\u661f\u9879\u76ee\u8bde\u751f\uff1aCAP</p>"},{"location":"user-guide/zh/getting-started/quick-start/","title":"\u5feb\u901f\u5f00\u59cb","text":"<p>\u4e86\u89e3\u5982\u4f55\u4f7f\u7528 CAP \u6784\u5efa\u5fae\u670d\u52a1\u4e8b\u4ef6\u603b\u7ebf\u67b6\u6784\uff0c\u5b83\u6bd4\u76f4\u63a5\u96c6\u6210\u6d88\u606f\u961f\u5217\u63d0\u4f9b\u4e86\u54ea\u4e9b\u4f18\u52bf\uff0c\u5b83\u63d0\u4f9b\u4e86\u54ea\u4e9b\u5f00\u7bb1\u5373\u7528\u7684\u529f\u80fd\u3002</p>"},{"location":"user-guide/zh/getting-started/quick-start/#_2","title":"\u5b89\u88c5","text":"<pre><code>PM&gt; Install-Package DotNetCore.CAP\n</code></pre>"},{"location":"user-guide/zh/getting-started/quick-start/#aspnet-core","title":"\u5728 Asp.Net Core \u4e2d\u96c6\u6210","text":"<p>\u4ee5\u4fbf\u4e8e\u5feb\u901f\u542f\u52a8\uff0c\u6211\u4eec\u4f7f\u7528\u57fa\u4e8e\u5185\u5b58\u7684\u4e8b\u4ef6\u5b58\u50a8\u548c\u6d88\u606f\u961f\u5217\u3002</p> <pre><code>PM&gt; Install-Package DotNetCore.CAP.InMemoryStorage\nPM&gt; Install-Package Savorboard.CAP.InMemoryMessageQueue\n</code></pre> <p>\u5728 <code>Startup.cs</code> \u4e2d\uff0c\u6dfb\u52a0\u4ee5\u4e0b\u914d\u7f6e\uff1a</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    services.AddCap(x =&gt;\n    {\n        x.UseInMemoryStorage();\n        x.UseInMemoryMessageQueue();\n    });\n}\n</code></pre>"},{"location":"user-guide/zh/getting-started/quick-start/#_3","title":"\u53d1\u9001\u6d88\u606f","text":"<pre><code>public class PublishController : Controller\n{\n    [Route(\"~/send\")]\n    public IActionResult SendMessage([FromServices]ICapPublisher capBus)\n    {\n        capBus.Publish(\"test.show.time\", DateTime.Now);\n\n        return Ok();\n    }\n}\n</code></pre>"},{"location":"user-guide/zh/getting-started/quick-start/#_4","title":"\u53d1\u9001\u5ef6\u8fdf\u6d88\u606f","text":"<pre><code>public class PublishController : Controller\n{\n    [Route(\"~/send/delay\")]\n    public IActionResult SendDelayMessage([FromServices]ICapPublisher capBus)\n    {\n        capBus.PublishDelay(TimeSpan.FromSeconds(100),\"test.show.time\", DateTime.Now);\n\n        return Ok();\n    }\n}\n</code></pre>"},{"location":"user-guide/zh/getting-started/quick-start/#_5","title":"\u53d1\u9001\u5305\u542b\u5934\u4fe1\u606f\u7684\u6d88\u606f","text":"<pre><code>var header = new Dictionary&lt;string, string&gt;()\n{\n    [\"my.header.first\"] = \"first\",\n    [\"my.header.second\"] = \"second\"\n};\n\ncapBus.Publish(\"test.show.time\", DateTime.Now, header);\n</code></pre>"},{"location":"user-guide/zh/getting-started/quick-start/#_6","title":"\u5904\u7406\u6d88\u606f","text":"<pre><code>public class ConsumerController : Controller\n{\n    [NonAction]\n    [CapSubscribe(\"test.show.time\")]\n    public void ReceiveMessage(DateTime time)\n    {\n        Console.WriteLine(\"message time is:\" + time);\n    }\n}\n</code></pre>"},{"location":"user-guide/zh/getting-started/quick-start/#_7","title":"\u5904\u7406\u5305\u542b\u5934\u4fe1\u606f\u7684\u6d88\u606f","text":"<pre><code>[CapSubscribe(\"test.show.time\")]\npublic void ReceiveMessage(DateTime time, [FromCap]CapHeader header)\n{\n    Console.WriteLine(\"message time is:\" + time);\n    Console.WriteLine(\"message firset header :\" + header[\"my.header.first\"]);\n    Console.WriteLine(\"message second header :\" + header[\"my.header.second\"]);\n}\n</code></pre>"},{"location":"user-guide/zh/getting-started/quick-start/#_8","title":"\u6458\u8981","text":"<p>\u76f8\u5bf9\u4e8e\u76f4\u63a5\u96c6\u6210\u6d88\u606f\u961f\u5217\uff0c\u5f02\u6b65\u6d88\u606f\u4f20\u9012\u6700\u5f3a\u5927\u7684\u4f18\u52bf\u4e4b\u4e00\u662f\u53ef\u9760\u6027\uff0c\u7cfb\u7edf\u7684\u4e00\u4e2a\u90e8\u5206\u4e2d\u7684\u6545\u969c\u4e0d\u4f1a\u4f20\u64ad\uff0c\u4e5f\u4e0d\u4f1a\u5bfc\u81f4\u6574\u4e2a\u7cfb\u7edf\u5d29\u6e83\u3002 \u5728 CAP \u5185\u90e8\u4f1a\u5c06\u6d88\u606f\u8fdb\u884c\u5b58\u50a8\uff0c\u4ee5\u4fdd\u8bc1\u6d88\u606f\u7684\u53ef\u9760\u6027\uff0c\u5e76\u914d\u5408\u91cd\u8bd5\u7b49\u7b56\u7565\u4ee5\u8fbe\u5230\u5404\u4e2a\u670d\u52a1\u4e4b\u95f4\u7684\u6570\u636e\u6700\u7ec8\u4e00\u81f4\u6027\u3002</p>"},{"location":"user-guide/zh/monitoring/consul/","title":"Consul","text":"<p>Consul \u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u670d\u52a1\u7f51\u683c\uff0c\u7528\u4e8e\u8de8\u4efb\u4f55\u8fd0\u884c\u65f6\u5e73\u53f0\u548c\u516c\u5171\u6216\u79c1\u6709\u4e91\u8fde\u63a5\uff0c\u4fdd\u62a4\u548c\u914d\u7f6e\u670d\u52a1\u3002</p>"},{"location":"user-guide/zh/monitoring/consul/#dashboard-consul","title":"Dashboard \u4e2d\u7684 Consul \u914d\u7f6e","text":"<p>CAP\u7684 Dashboard \u4f7f\u7528 Consul \u4f5c\u4e3a\u670d\u52a1\u53d1\u73b0\u6765\u663e\u793a\u5176\u4ed6\u8282\u70b9\u7684\u6570\u636e\uff0c\u7136\u540e\u4f60\u5c31\u5728\u4efb\u610f\u8282\u70b9\u7684 Dashboard \u4e2d\u5207\u6362\u5230 Servers \u9875\u9762\u770b\u5230\u5176\u4ed6\u7684\u8282\u70b9\u3002</p> <p></p> <p>\u901a\u8fc7\u70b9\u51fb Switch \u6309\u94ae\u6765\u5207\u6362\u5230\u5176\u4ed6\u7684\u8282\u70b9\u770b\u5230\u5176\u4ed6\u8282\u70b9\u7684\u6570\u636e\uff0c\u800c\u4e0d\u5fc5\u8bbf\u95ee\u5f88\u591a\u5730\u5740\u6765\u5206\u522b\u67e5\u770b\u3002</p> <p>\u4ee5\u4e0b\u662f\u4e00\u4e2a\u914d\u7f6e\u793a\u4f8b, \u4f60\u9700\u8981\u5728\u6bcf\u4e2a\u8282\u70b9\u5206\u522b\u914d\u7f6e\uff1a</p> <pre><code>services.AddCap(x =&gt;\n{\n    x.UseMySql(Configuration.GetValue&lt;string&gt;(\"ConnectionString\"));\n    x.UseRabbitMQ(\"localhost\");\n    x.UseDashboard();\n    x.UseConsulDiscovery(_ =&gt;\n    {\n        _.DiscoveryServerHostName = \"localhost\";\n        _.DiscoveryServerPort = 8500;\n        _.CurrentNodeHostName = Configuration.GetValue&lt;string&gt;(\"ASPNETCORE_HOSTNAME\");\n        _.CurrentNodePort = Configuration.GetValue&lt;int&gt;(\"ASPNETCORE_PORT\");\n        _.NodeId = Configuration.GetValue&lt;string&gt;(\"NodeId\");\n        _.NodeName = Configuration.GetValue&lt;string&gt;(\"NodeName\");\n    });\n});\n</code></pre> <p>Consul 1.6.2:</p> <pre><code>consul agent -dev\n</code></pre> <p>Windows 10, ASP.NET Core 3.1:</p> <pre><code>set ASPNETCORE_HOSTNAME=localhost&amp;&amp; set ASPNETCORE_PORT=5001&amp;&amp; dotnet run --urls=http://localhost:5001 NodeId=1 NodeName=CAP-1 ConnectionString=\"Server=localhost;Database=aaa;UserId=xxx;Password=xxx;\"\nset ASPNETCORE_HOSTNAME=localhost&amp;&amp; set ASPNETCORE_PORT=5002&amp;&amp; dotnet run --urls=http://localhost:5002 NodeId=2 NodeName=CAP-2 ConnectionString=\"Server=localhost;Database=bbb;UserId=xxx;Password=xxx;\"\n</code></pre>"},{"location":"user-guide/zh/monitoring/dashboard/","title":"Dashboard","text":"<p>CAP \u539f\u751f\u63d0\u4f9b\u4e86 Dashboard \u4f9b\u67e5\u770b\u6d88\u606f\uff0c\u5229\u7528 Dashboard \u63d0\u4f9b\u7684\u529f\u80fd\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u67e5\u770b\u548c\u7ba1\u7406\u6d88\u606f\u3002</p> <p>\u4f7f\u7528\u9650\u5236</p> <p>Dashboard \u53ea\u652f\u6301\u5728 ASP.NET Core \u4e2d\u4f7f\u7528\uff0c\u4e0d\u652f\u6301\u63a7\u5236\u53f0\u5e94\u7528(Console App)</p>"},{"location":"user-guide/zh/monitoring/dashboard/#dashboard_1","title":"\u542f\u7528 Dashboard","text":"<p>\u9996\u5148\uff0c\u4f60\u9700\u8981\u5b89\u88c5Dashboard\u7684 NuGet \u5305\u3002</p> <pre><code>PM&gt; Install-Package DotNetCore.CAP.Dashboard\n</code></pre> <p>\u7136\u540e\uff0c\u5728\u914d\u7f6e\u4e2d\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>services.AddCap(x =&gt;\n{\n    //...\n\n    // Register Dashboard\n    x.UseDashboard();\n});\n</code></pre> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u8bbf\u95ee <code>http://localhost:xxx/cap</code> \u8fd9\u4e2a\u5730\u5740\u6253\u5f00Dashboard\u3002 </p>"},{"location":"user-guide/zh/monitoring/dashboard/#dashboard_2","title":"Dashboard \u914d\u7f6e\u9879","text":"<ul> <li>PathBase</li> </ul> <p>\u9ed8\u8ba4\u503c\uff1aN/A</p> <p>\u5f53\u4f4d\u4e8e\u4ee3\u7406\u540e\u65f6\uff0c\u901a\u8fc7\u914d\u7f6e\u6b64\u53c2\u6570\u53ef\u4ee5\u6307\u5b9a\u4ee3\u7406\u8bf7\u6c42\u524d\u7f00\u3002</p> <ul> <li>PathMatch</li> </ul> <p>\u9ed8\u8ba4\u503c\uff1a'/cap'</p> <p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u6b64\u914d\u7f6e\u9879\u6765\u66f4\u6539Dashboard\u7684\u8bbf\u95ee\u8def\u5f84\u3002</p> <ul> <li>StatsPollingInterval</li> </ul> <p>\u9ed8\u8ba4\u503c\uff1a2000 \u6beb\u79d2</p> <p>\u6b64\u914d\u7f6e\u9879\u7528\u6765\u914d\u7f6eDashboard \u524d\u7aef \u83b7\u53d6\u72b6\u6001\u63a5\u53e3(/stats)\u7684\u8f6e\u8be2\u65f6\u95f4</p> <ul> <li>AllowAnonymousExplicit</li> </ul> <p>Default: true</p> <p>\u663e\u5f0f\u5141\u8bb8\u5bf9 CAP \u4eea\u8868\u677f API \u8fdb\u884c\u533f\u540d\u8bbf\u95ee\uff0c\u5f53\u542f\u7528ASP.NET Core \u5168\u5c40\u6388\u6743\u7b5b\u9009\u5668\u8bf7\u542f\u7528 AllowAnonymous\u3002</p> <ul> <li>AuthorizationPolicy</li> </ul> <p>Default: null.</p> <p>Dashboard \u7684\u6388\u6743\u7b56\u7565\u3002 \u9700\u8bbe\u7f6e <code>AllowAnonymousExplicit</code>\u4e3a false\u3002</p>"},{"location":"user-guide/zh/monitoring/dashboard/#_1","title":"\u81ea\u5b9a\u4e49\u8ba4\u8bc1","text":"<p>\u4ece\u7248\u672c 8.0.0 \u5f00\u59cb\uff0cCAP \u4eea\u8868\u677f\u5229\u7528 ASP.NET Core \u8eab\u4efd\u9a8c\u8bc1\u673a\u5236\uff0c\u5141\u8bb8\u901a\u8fc7\u81ea\u5b9a\u4e49\u6388\u6743\u7b56\u7565\u548c ASP.NET Core \u8eab\u4efd\u9a8c\u8bc1\u548c\u6388\u6743\u4e2d\u95f4\u4ef6\u8fdb\u884c\u6269\u5c55\uff0c\u4ee5\u6388\u6743\u4eea\u8868\u677f\u8bbf\u95ee\u3002 \u6709\u5173 ASP.NET Core \u8eab\u4efd\u9a8c\u8bc1\u5185\u90e8\u7ed3\u6784\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u67e5\u770b\u5b98\u65b9\u6587\u6863.</p> <p>\u60a8\u53ef\u4ee5\u5728\u793a\u4f8b\u9879\u76ee <code>Sample.Dashboard.Auth</code>\u4e2d\u67e5\u770b\u793a\u4f8b\u4ee3\u7801\u3002</p>"},{"location":"user-guide/zh/monitoring/dashboard/#example","title":"Example: \u533f\u540d\u8bbf\u95ee","text":"<pre><code>services.AddCap(cap =&gt;\n    {\n        cap.UseDashboard(d =&gt;\n        {\n            d.AllowAnonymousExplicit = true;\n        });\n        cap.UseInMemoryStorage();\n        cap.UseInMemoryMessageQueue();\n    });\n</code></pre>"},{"location":"user-guide/zh/monitoring/dashboard/#example-open-id","title":"Example: Open Id","text":"<pre><code>services\n    .AddAuthorization(options =&gt;\n        { \n            options.AddPolicy(DashboardAuthorizationPolicy, policy =&gt; policy\n                .AddAuthenticationSchemes(OpenIdConnectDefaults.AuthenticationScheme)\n                .RequireAuthenticatedUser());\n        })\n        .AddAuthentication(opt =&gt; opt.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme)\n        .AddCookie()\n        .AddOpenIdConnect(options =&gt;\n        {\n            ...\n        });\n\n    services.AddCap(cap =&gt;\n    {\n        cap.UseDashboard(d =&gt;\n        {\n            d.AuthorizationPolicy = DashboardAuthorizationPolicy;\n        });\n        cap.UseInMemoryStorage();\n        cap.UseInMemoryMessageQueue();\n    });\n</code></pre>"},{"location":"user-guide/zh/monitoring/dashboard/#_2","title":"\u81ea\u5b9a\u4e49\u8ba4\u8bc1","text":"<p>\u4ece 8.0.0 \u7248\u5f00\u59cb\uff0cCAP \u63a7\u5236\u9762\u677f\u5229\u7528 ASP.NET Core \u8eab\u4efd\u9a8c\u8bc1\u673a\u5236\uff0c\u5141\u8bb8\u901a\u8fc7\u81ea\u5b9a\u4e49\u6388\u6743\u7b56\u7565\u548c ASP.NET Core \u8eab\u4efd\u9a8c\u8bc1\u4e0e\u6388\u6743\u4e2d\u95f4\u4ef6\u8fdb\u884c\u6269\u5c55\u3002\u6709\u5173 ASP.NET Core \u8eab\u4efd\u9a8c\u8bc1\u5185\u90e8\u673a\u5236\u7684\u66f4\u591a\u8be6\u60c5\uff0c\u8bf7\u67e5\u9605 \u5b98\u65b9\u6587\u6863\u3002</p> <p>\u60a8\u53ef\u4ee5\u5728\u793a\u4f8b\u9879\u76ee <code>Sample.Dashboard.Auth</code> \u4e2d\u67e5\u770b\u4ee5\u4e0b\u793a\u4f8b\u3002</p>"},{"location":"user-guide/zh/monitoring/dashboard/#anonymous-access","title":"\u4f8b\u5b50\uff1aAnonymous Access \u533f\u540d\u8bbf\u95ee","text":"<pre><code>services.AddCap(cap =&gt;\n    {\n        cap.UseDashboard(d =&gt;\n        {\n            d.AllowAnonymousExplicit = true;\n        });\n        cap.UseInMemoryStorage();\n        cap.UseInMemoryMessageQueue();\n    });\n</code></pre>"},{"location":"user-guide/zh/monitoring/dashboard/#open-id","title":"\u4f8b\u5b50\uff1a\u4f7f\u7528 Open Id","text":"<pre><code>services\n    .AddAuthorization(options =&gt;\n        { \n            options.AddPolicy(DashboardAuthorizationPolicy, policy =&gt; policy\n                .AddAuthenticationSchemes(OpenIdConnectDefaults.AuthenticationScheme)\n                .RequireAuthenticatedUser());\n        })\n        .AddAuthentication(opt =&gt; opt.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme)\n        .AddCookie()\n        .AddOpenIdConnect(options =&gt;\n        {\n            ...\n        });\n\n    services.AddCap(cap =&gt;\n    {\n        cap.UseDashboard(d =&gt;\n        {\n            d.AuthorizationPolicy = DashboardAuthorizationPolicy;\n        });\n        cap.UseInMemoryStorage();\n        cap.UseInMemoryMessageQueue();\n    });\n</code></pre>"},{"location":"user-guide/zh/monitoring/dashboard/#authentication-scheme","title":"\u4f8b\u5b50\uff1a\u81ea\u5b9a\u4e49 Authentication Scheme","text":"<pre><code>const string MyDashboardAuthenticationPolicy = \"MyDashboardAuthenticationPolicy\";\n\nservices.AddAuthorization(options =&gt;\n    { \n        options.AddPolicy(MyDashboardAuthenticationPolicy, policy =&gt; policy\n        .AddAuthenticationSchemes(MyDashboardAuthenticationSchemeDefaults.Scheme)\n        .RequireAuthenticatedUser());\n    })\n    .AddAuthentication()\n    .AddScheme&lt;MyDashboardAuthenticationSchemeOptions, MyDashboardAuthenticationHandler&gt;(MyDashboardAuthenticationSchemeDefaults.Scheme,null);\n\nservices.AddCap(cap =&gt;\n    {\n        cap.UseDashboard(d =&gt;\n        {\n            d.AuthorizationPolicy = MyDashboardAuthenticationPolicy;\n        });\n        cap.UseInMemoryStorage();\n        cap.UseInMemoryMessageQueue();\n    });\n</code></pre>"},{"location":"user-guide/zh/monitoring/diagnostics/","title":"\u8bca\u65ad(Diagnostics)","text":"<p>Diagnostics \u63d0\u4f9b\u4e00\u7ec4\u529f\u80fd\u4f7f\u6211\u4eec\u80fd\u591f\u5f88\u65b9\u4fbf\u7684\u53ef\u4ee5\u8bb0\u5f55\u5728\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u671f\u95f4\u53d1\u751f\u7684\u5173\u952e\u6027\u64cd\u4f5c\u4ee5\u53ca\u4ed6\u4eec\u7684\u6267\u884c\u65f6\u95f4\u7b49\uff0c\u4f7f\u7ba1\u7406\u5458\u53ef\u4ee5\u67e5\u627e\u7279\u522b\u662f\u751f\u4ea7\u73af\u5883\u4e2d\u51fa\u73b0\u95ee\u9898\u6240\u5728\u7684\u6839\u672c\u539f\u56e0\u3002</p>"},{"location":"user-guide/zh/monitoring/diagnostics/#tracing","title":"\u8ddf\u8e2a(Tracing)","text":"<p>CAP \u5bf9 .NET <code>DiagnosticSource</code> \u63d0\u4f9b\u4e86\u652f\u6301\uff0c\u76d1\u542c\u5668\u540d\u79f0\u4e3a <code>CapDiagnosticListener</code>\u3002</p> <p>\u4f60\u53ef\u4ee5\u5728 <code>DotNetCore.CAP.Diagnostics.CapDiagnosticListenerNames</code> \u7c7b\u4e0b\u9762\u627e\u5230CAP\u5df2\u7ecf\u5b9a\u4e49\u7684\u4e8b\u4ef6\u540d\u79f0\u3002</p> <p>Diagnostics \u63d0\u4f9b\u5bf9\u5916\u63d0\u4f9b\u7684\u4e8b\u4ef6\u4fe1\u606f\u6709\uff1a</p> <ul> <li>\u6d88\u606f\u6301\u4e45\u5316\u4e4b\u524d</li> <li>\u6d88\u606f\u6301\u4e45\u5316\u4e4b\u540e</li> <li>\u6d88\u606f\u6301\u4e45\u5316\u5f02\u5e38</li> <li>\u6d88\u606f\u5411MQ\u53d1\u9001\u4e4b\u524d</li> <li>\u6d88\u606f\u5411MQ\u53d1\u9001\u4e4b\u540e</li> <li>\u6d88\u606f\u5411MQ\u53d1\u9001\u5f02\u5e38</li> <li>\u6d88\u606f\u4eceMQ\u6d88\u8d39\u4fdd\u5b58\u4e4b\u524d</li> <li>\u6d88\u606f\u4eceMQ\u6d88\u8d39\u4fdd\u5b58\u4e4b\u540e</li> <li>\u8ba2\u9605\u8005\u65b9\u6cd5\u6267\u884c\u4e4b\u524d</li> <li>\u8ba2\u9605\u8005\u65b9\u6cd5\u6267\u884c\u4e4b\u540e</li> <li>\u8ba2\u9605\u8005\u65b9\u6cd5\u6267\u884c\u5f02\u5e38</li> </ul>"},{"location":"user-guide/zh/monitoring/diagnostics/#skywalking-apm-cap","title":"\u5728 Skywalking APM \u4e2d\u8ffd\u8e2a CAP \u4e8b\u4ef6","text":"<p>Skywalking \u7684 C# \u5ba2\u6237\u7aef\u63d0\u4f9b\u4e86\u5bf9 CAP Diagnostics \u7684\u652f\u6301\uff0c\u4f60\u53ef\u4ee5\u5229\u7528 SkyAPM-dotnet \u6765\u5b9e\u73b0\u5728 Skywalking \u4e2d\u8ffd\u8e2a\u4e8b\u4ef6\u3002</p> <p>\u5c1d\u8bd5\u9605\u8bfbReadme\u6587\u6863\u6765\u5728\u4f60\u7684\u9879\u76ee\u4e2d\u96c6\u6210\u5b83\u3002</p> <p></p> <p></p>"},{"location":"user-guide/zh/monitoring/diagnostics/#apm","title":"\u5176\u4ed6 APM \u7684\u652f\u6301","text":"<p>\u76ee\u524d\u8fd8\u6ca1\u6709\u5b9e\u73b0\u5bf9\u9664\u4e86 Skywalking \u7684\u5176\u4ed6APM\u7684\u652f\u6301\uff0c\u5982\u679c\u4f60\u60f3\u5728\u5176\u4ed6 APM \u4e2d\u5b9e\u73b0\u5bf9 CAP \u8bca\u65ad\u4e8b\u4ef6\u7684\u652f\u6301\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003\u8fd9\u91cc\u7684\u4ee3\u7801\u6765\u5b9e\u73b0\u5b83\uff1a</p> <p>https://github.com/SkyAPM/SkyAPM-dotnet/tree/master/src/SkyApm.Diagnostics.CAP</p>"},{"location":"user-guide/zh/monitoring/diagnostics/#metrics","title":"\u5ea6\u91cf(Metrics)","text":"<p>\u5ea6\u91cf\u662f\u6307\u5bf9\u4e8e\u4e00\u4e2a\u7269\u4f53\u6216\u662f\u4e8b\u4ef6\u7684\u67d0\u4e2a\u6027\u8d28\u7ed9\u4e88\u4e00\u4e2a\u6570\u5b57\uff0c\u4f7f\u5176\u53ef\u4ee5\u548c\u5176\u4ed6\u7269\u4f53\u6216\u662f\u4e8b\u4ef6\u7684\u76f8\u540c\u6027\u8d28\u6bd4\u8f83\u3002\u5ea6\u91cf\u53ef\u4ee5\u662f\u5bf9\u4e00\u7269\u7406\u91cf\uff08\u5982\u957f\u5ea6\u3001\u5c3a\u5bf8\u6216\u5bb9\u91cf\u7b49\uff09\u7684\u4f30\u8ba1\u6216\u6d4b\u5b9a\uff0c\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u8f83\u62bd\u8c61\u7684\u7279\u8d28\u3002</p> <p>CAP 7.0 \u5bf9 <code>EventSource</code> \u63d0\u4f9b\u4e86\u652f\u6301\uff0c\u8ba1\u6570\u5668\u540d\u79f0\u4e3a <code>DotNetCore.CAP.EventCounter</code>\u3002</p> <p>CAP \u63d0\u4f9b\u4e86\u4ee5\u4e0b\u51e0\u4e2a\u5ea6\u91cf\u6307\u6807\uff1a</p> <ul> <li>\u6bcf\u79d2\u53d1\u5e03\u901f\u5ea6</li> <li>\u6bcf\u79d2\u6d88\u8d39\u901f\u5ea6</li> <li>\u6bcf\u79d2\u8c03\u7528\u8ba2\u9605\u8005\u901f\u5ea6</li> <li>\u6bcf\u79d2\u6267\u884c\u8ba2\u9605\u8005\u5e73\u5747\u8017\u65f6</li> </ul>"},{"location":"user-guide/zh/monitoring/diagnostics/#dotnet-counters","title":"\u4f7f\u7528 dotnet-counters \u67e5\u770b\u5ea6\u91cf","text":"<p>dotnet-counters \u662f\u4e00\u4e2a\u6027\u80fd\u76d1\u89c6\u5de5\u5177\uff0c\u7528\u4e8e\u4e34\u65f6\u8fd0\u884c\u72b6\u51b5\u76d1\u89c6\u548c\u521d\u7ea7\u6027\u80fd\u8c03\u67e5\u3002 \u5b83\u53ef\u4ee5\u89c2\u5bdf\u901a\u8fc7 EventCounter API \u6216 Meter API \u53d1\u5e03\u7684\u6027\u80fd\u8ba1\u6570\u5668\u503c\u3002 </p> <p>\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u6765\u76d1\u89c6CAP\u4e2d\u7684\u5ea6\u91cf\u6307\u6807\uff1a</p> <pre><code>dotnet-counters ps\ndotnet-counters monitor --process-id=25496 --counters=DotNetCore.CAP.EventCounter\n</code></pre> <p>\u5176\u4e2d process-id \u4e3a CAP \u6240\u5c5e\u7684\u8fdb\u7a0bId\u3002</p> <p></p>"},{"location":"user-guide/zh/monitoring/diagnostics/#dashboard","title":"\u5728 Dashboard \u4e2d\u67e5\u770b\u5ea6\u91cf","text":"<p>\u4f60\u53ef\u4ee5\u914d\u7f6e <code>x.UseDashboard()</code> \u6765\u5f00\u542f\u4eea\u8868\u76d8\u4ee5\u56fe\u8868\u7684\u5f62\u5f0f\u67e5\u770b Metrics \u6307\u6807\u3002 \u5982\u4e0b\u56fe\uff1a</p> <p></p> <p>\u5728 Realtime Metric Graph \u4e2d\uff0c\u65f6\u95f4\u8f74\u4f1a\u968f\u7740\u65f6\u95f4\u5b9e\u65f6\u6eda\u52a8\u4ece\u800c\u53ef\u4ee5\u770b\u5230\u53d1\u5e03\u548c\u6d88\u8d39\u6d88\u606f\u6bcf\u79d2\u7684\u901f\u7387\uff0c\u540c\u65f6\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6d88\u8d39\u8005\u6267\u884c\u8017\u65f6\u4ee5\u201c\u6253\u70b9\u201d\u7684\u65b9\u5f0f\u5728 Y1 \u8f74\u4e0a\uff08Y0\u8f74\u4e3a\u901f\u7387\uff0cY1\u8f74\u4e3a\u6267\u884c\u8017\u65f6\uff09\u3002</p>"},{"location":"user-guide/zh/monitoring/kubernetes/","title":"Kubernetes","text":"<p>Kubernetes\uff0c\u4e5f\u79f0\u4e3a K8s\uff0c\u662f\u4e00\u4e2a\u5f00\u6e90\u7cfb\u7edf\uff0c\u7528\u4e8e\u81ea\u52a8\u90e8\u7f72\u3001\u6269\u5c55\u548c\u7ba1\u7406\u5bb9\u5668\u5316\u5e94\u7528\u7a0b\u5e8f\u3002</p>"},{"location":"user-guide/zh/monitoring/kubernetes/#dashboard-kubernetes","title":"Dashboard \u4e2d\u7684 Kubernetes","text":"<p>\u6211\u4eec\u7684 Dashboard \u4ece 7.2.0 \u7248\u672c\u5f00\u59cb\u652f\u6301 Kubernetes \u4f5c\u4e3a\u670d\u52a1\u53d1\u73b0\u3002\u4f60\u53ef\u4ee5\u5207\u6362\u5230Node\u8282\u70b9\u9875\u9762\uff0c\u7136\u540e\u9009\u62e9\u547d\u540d\u7a7a\u95f4\uff0cCAP\u4f1a\u5217\u51fa\u8be5\u547d\u540d\u7a7a\u95f4\u4e0b\u7684\u6240\u6709Services\uff0c\u70b9\u51fb \u5207\u6362 \u6309\u94ae\u540eDashboard\u5c06\u68c0\u6d4b\u8be5\u8282\u70b9\u7684CAP\u670d\u52a1\u662f\u5426\u53ef\u7528\uff0c\u5982\u679c\u53ef\u7528\u5219\u4f1a\u4ee3\u7406\u5230\u5207\u6362\u7684\u8282\u70b9\u8fdb\u884c\u6570\u636e\u67e5\u770b\u3002</p> <p>\u4ee5\u4e0b\u662f\u4e00\u4e2a\u914d\u7f6e\u793a\u4f8b</p> <pre><code>services.AddCap(x =&gt;\n{\n    // ...\n    x.UseDashboard();\n    x.UseK8sDiscovery();\n});\n</code></pre>"},{"location":"user-guide/zh/monitoring/kubernetes/#k8sdiscovery","title":"\u4f7f\u7528K8sDiscovery\u914d\u7f6e","text":"<p>\u6b64\u914d\u7f6e\u9009\u9879\u7528\u4e8e\u914d\u7f6e\u4eea\u8868\u677f/\u8282\u70b9\u4ee5\u9ed8\u8ba4\u5217\u51fa\u6bcf\u4e2a K8s <code>service</code> \u3002\u5982\u679c\u5c06\u6b64\u8bbe\u7f6e\u4e3a <code>true</code>\uff0c\u5219\u53ea\u4f1a\u5217\u51fa\u5e26\u6709<code>dotnetcore.cap.visibility: show</code> \u6807\u7b7e\u7684\u670d\u52a1\u3002\u6709\u5173\u6807\u7b7e\u7684\u66f4\u591a\u4fe1\u606f\u53ef\u4ee5\u5728 Kubernetes \u6807\u7b7e\u914d\u7f6e \u90e8\u5206\u627e\u5230\u3002</p> <ul> <li>ShowOnlyExplicitVisibleNodes</li> </ul> <p>\u9ed8\u8ba4\u503c\uff1afalse</p> <pre><code>services.AddCap(x =&gt;\n{\n    // ...\n    x.UseK8sDiscovery(opt=&gt;{\n      opt.ShowOnlyExplicitVisibleNodes = true;\n    });\n});\n</code></pre> <p>\u7ec4\u4ef6\u5c06\u4f1a\u81ea\u52a8\u68c0\u6d4b\u662f\u5426\u5904\u4e8e\u96c6\u7fa4\u5185\u90e8\uff0c\u5982\u679c\u5904\u4e8e\u96c6\u7fa4\u5185\u90e8\u5728\u9700\u8981\u8d4b\u4e88Pod Kubernetes Api \u7684\u6743\u9650\u3002\u53c2\u8003\u4e0b\u4e00\u7ae0\u8282\u3002</p>"},{"location":"user-guide/zh/monitoring/kubernetes/#pod-kubernetes-api","title":"\u5206\u914d Pod \u8bbf\u95ee  Kubernetes Api","text":"<p>\u5982\u679c\u4f60\u7684Deployment\u5173\u8054\u7684ServiceAccount\u6ca1\u6709K8s Api\u8bbf\u95ee\u6743\u9650\u7684\u8bdd\uff0c\u5219\u9700\u8981\u8d4b\u4e88 <code>namespaces</code>, <code>services</code> \u8d44\u6e90\u7684 <code>get</code>, <code>list</code> \u6743\u9650\u3002</p> <p>\u8fd9\u662f\u4e00\u4e2a\u5b9e\u4f8byaml\uff0c\u9996\u5148\u521b\u5efa\u4e00\u4e2a ServiceAccount \u548c ClusterRole \u5e76\u8bbe\u7f6e\u76f8\u5173\u6743\u9650\uff0c\u7136\u540e\u4f7f\u7528 ClusterRoleBinding \u8fdb\u884c\u7ed1\u5b9a\u3002\u6700\u540e\u5728Deployment\u4e2d\u4f7f\u7528 <code>serviceAccountName: api-access</code> \u7ee7\u7eed\u6307\u5b9a\u3002</p> <pre><code>apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: api-access\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: ns-svc-reader\nrules:\n- apiGroups: [\"\"]\n  resources: [\"namespaces\", \"services\"]\n  verbs: [\"get\", \"watch\", \"list\"]\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: read-pods\nsubjects:\n- kind: ServiceAccount\n  name: api-access\n  namespace: default\nroleRef:\n  kind: ClusterRole\n  name: ns-svc-reader\n  apiGroup: rbac.authorization.k8s.io\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: api-access-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: api-access-app\n  template:\n    metadata:\n      labels:\n        app: api-access-app\n    spec:\n      serviceAccountName: api-access\n      containers:\n      - name: api-access-container\n        image: your_image\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: api-access-service\nspec:\n  selector:\n    app: api-access-app\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n</code></pre> <p>\u4ece\u7248\u672c <code>8.3.0</code> \u53ca\u66f4\u9ad8\u7248\u672c\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>Role</code> \u800c\u4e0d\u662f <code>ClusterRole</code>\uff0c\u4ee5\u5141\u8bb8\u4ec5\u5728\u4eea\u8868\u677f\u8fd0\u884c\u7684\u547d\u540d\u7a7a\u95f4\u5185\u53d1\u73b0\u670d\u52a1\u3002 Kubernetes \u89d2\u8272\u5728\u547d\u540d\u7a7a\u95f4\u5185\u62e5\u6709\u6709\u9650\u7684\u7ba1\u8f96\u6743\u3002\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u53ea\u9700\u5220\u9664 ClusterRole \u548c ClusterRoleBinding \u5e76\u6539\u4e3a\u4f7f\u7528\u4ee5\u4e0b\u5185\u5bb9</p> <pre><code>apiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: ns-svc-reader\nrules:\n- apiGroups: [\"\"]\n  resources: [\"services\"]\n  verbs: [\"get\", \"watch\", \"list\"]\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: read-pods\nsubjects:\n- kind: ServiceAccount\n  name: api-access\n  namespace: default\nroleRef:\n  kind: ClusterRole\n  name: ns-svc-reader\n  apiGroup: rbac.authorization.k8s.io\n</code></pre>"},{"location":"user-guide/zh/monitoring/kubernetes/#kubernetes_1","title":"Kubernetes \u6807\u7b7e\u914d\u7f6e","text":"<p>\u53ef\u4ee5\u901a\u8fc7\u5411 kubernetes \u670d\u52a1\u6dfb\u52a0\u6807\u7b7e\u6765\u63a7\u5236\u4eea\u8868\u677f\u4e2d\u663e\u793a\u7684\u8282\u70b9\u5217\u8868\u3002</p> <ul> <li> <p><code>dotnetcore.cap.visibility</code> \u6807\u7b7e\u7528\u4e8e\u663e\u793a\u6216\u9690\u85cf\u5217\u8868\u4e2d\u7684\u670d\u52a1\u3002</p> <p>\u53ef\u80fd\u7684\u503c: show | hide</p> <p>\u793a\u4f8b: <code>dotnetcore.cap.visibility: show</code> or <code>dotnetcore.cap.visibility: hide</code></p> </li> </ul> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a k8s \u670d\u52a1\u90fd\u4f1a\u5217\u51fa\u8be5\u670d\u52a1\u4e2d\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u7aef\u53e3\u3002\u4f46\u662f\uff0c\u5982\u679c\u670d\u52a1\u4e0a\u5b58\u5728\u66f4\u591a\u7aef\u53e3\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u6807\u7b7e\u9009\u62e9\u6240\u9700\u7684\u7aef\u53e3\uff1a</p> <ul> <li> <p><code>dotnetcore.cap.portName</code> \u6807\u7b7e\u7528\u4e8e\u8fc7\u6ee4\u9700\u8981\u7684\u670d\u52a1\u7aef\u53e3\u3002</p> <p>\u53ef\u80fd\u7684\u503c: string</p> <p>\u793a\u4f8b: <code>dotnetcore.cap.portName: grpc</code> or <code>dotnetcore.cap.portName: http</code></p> </li> </ul> <p>If not found any port with the given name, it will try to match the next label portIndex</p> <ul> <li> <p><code>dotnetcore.cap.portIndex</code> \u6807\u7b7e\u7528\u4e8e\u8fc7\u6ee4\u9700\u8981\u7684\u670d\u52a1\u7aef\u53e3\u3002 \u4ec5\u5f53\u672a\u8bbe\u7f6e\u6807\u7b7e portName \u6216\u8bbe\u7f6e\u4e0d\u5339\u914d\u7684 portName \u65f6\uff0c\u624d\u4f1a\u8003\u8651\u6b64\u8fc7\u6ee4\u5668\u3002</p> <p>\u53ef\u80fd\u7684\u503c: \u6570\u5b57\u8868\u793a\u4e3a\u5b57\u7b26\u4e32 ex: '2' or '14'</p> <p>\u793a\u4f8b: <code>dotnetcore.cap.portIndex: '1'</code> or <code>dotnetcore.cap.portIndex: '3'</code></p> </li> </ul> <p>\u5982\u679c\u63d0\u4f9b\u7684\u7d22\u5f15\u8d85\u51fa\u8303\u56f4\uff0c\u90a3\u4e48\u5b83\u5c06\u56de\u9000\u5230\u7b2c\u4e00\u4e2a\u7aef\u53e3\uff08\u7d22\u5f15\uff1a0\uff09</p>"},{"location":"user-guide/zh/monitoring/kubernetes/#dashboard","title":"\u72ec\u7acb\u4f7f\u7528 Dashboard","text":"<p>\u4f60\u53ef\u4ee5\u72ec\u7acb\u4f7f\u7528 Dashboard \u800c\u4e0d\u9700\u8981\u914d\u7f6eCAP\uff0c\u6b64\u65f6\u76f8\u5f53\u4e8e Dashboard \u53ef\u4f5c\u4e3a\u5355\u72ec\u7684 Pod \u90e8\u7f72\u5230 Kubernetes \u96c6\u7fa4\u4e2d\u4ec5\u7528\u4f5c\u67e5\u770b\u6570\u636e\uff0c\u5f85\u67e5\u770b\u7684\u670d\u52a1\u4e0d\u518d\u9700\u8981\u914d\u7f6e <code>cap.UseK8sDiscovery()</code> \u914d\u7f6e\u9879\u3002</p> <pre><code>services.AddCapDashboardStandalone();\n</code></pre> <p>\u540c\u6837\uff0c\u4f60\u9700\u8981\u4e3a\u6b64Pod\u914d\u7f6e ServiceAccount \u7684\u8bbf\u95ee\u6743\u9650\u3002</p>"},{"location":"user-guide/zh/monitoring/opentelemetry/","title":"OpenTelemetry","text":"<p>https://opentelemetry.io/</p> <p>OpenTelemetry\u662f\u5de5\u5177\u3001api\u548csdk\u7684\u96c6\u5408\u3002 \u4f7f\u7528\u5b83\u6765\u68c0\u6d4b\u3001\u751f\u6210\u3001\u6536\u96c6\u548c\u5bfc\u51fa\u9065\u6d4b\u6570\u636e(\u5ea6\u91cf\u3001\u65e5\u5fd7\u548c\u8ddf\u8e2a)\uff0c\u4ee5\u5e2e\u52a9\u60a8\u5206\u6790\u8f6f\u4ef6\u7684\u6027\u80fd\u548c\u884c\u4e3a\u3002</p>"},{"location":"user-guide/zh/monitoring/opentelemetry/#_1","title":"\u96c6\u6210","text":"<p>\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u5173\u4e8e\u5982\u4f55\u5728\u63a7\u5236\u53f0\u5e94\u7528\u6216ASP.NET Core \u4e2d\u4f7f\u7528OpenTelemetry\u3002 \u5728\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u63cf\u8ff0\u5982\u4f55\u5c06CAP\u96c6\u6210\u5230OpenTelemetry\u4e2d\u3002</p>"},{"location":"user-guide/zh/monitoring/opentelemetry/#_2","title":"\u914d\u7f6e","text":"<p>\u5b89\u88c5CAP\u7684OpenTelemetry\u5305\u5230\u9879\u76ee\u4e2d\u3002</p> <pre><code>dotnet add package DotNetCore.Cap.OpenTelemetry\n</code></pre> <p>OpenTelemetry \u7684\u8ddf\u8e2a\u6570\u636e\u6765\u81ea\u4e8eDiagnostics\u53d1\u9001\u7684\u8bca\u65ad\u6570\u636e\uff0c\u6dfb\u52a0 CAP Instrumentation \u5230 OpenTelemetry\u7684\u6269\u5c55\u914d\u7f6e\u4e2d\u4f1a\u8fdb\u884c\u81ea\u52a8\u6536\u96c6\u3002</p> <pre><code>services.AddOpenTelemetryTracing((builder) =&gt; builder\n    .AddAspNetCoreInstrumentation()\n    .AddCapInstrumentation()    // &lt;-- \u6dfb\u52a0\u8fd9\u884c\n    .AddZipkinExporter()\n);\n</code></pre> <p>\u4ee5\u4e0b\u662fCAP\u7684\u8ddf\u8e2a\u6570\u636e\u5728 Zipkin \u4e2d\u7684\u4e00\u4e2a\u793a\u610f\u56fe\uff1a</p> <p></p>"},{"location":"user-guide/zh/samples/castle.dynamicproxy/","title":"\u548c Castle DynamicProxy \u96c6\u6210","text":"<p>Castle DynamicProxy \u662f\u4e00\u4e2a\u7528\u4e8e\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u751f\u6210\u8f7b\u91cf\u7ea7.NET\u4ee3\u7406\u7684\u5e93\u3002\u4ee3\u7406\u5bf9\u8c61\u5141\u8bb8\u5728\u4e0d\u4fee\u6539\u7c7b\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u622a\u53d6\u5bf9\u5bf9\u8c61\u6210\u5458\u7684\u8c03\u7528\u3002\u53ef\u4ee5\u4ee3\u7406\u7c7b\u548c\u63a5\u53e3\uff0c\u4f46\u662f\u53ea\u80fd\u62e6\u622a\u865a\u62df\u6210\u5458\u3002</p> <p>Castle.DynamicProxy \u53ef\u4ee5\u5e2e\u52a9\u4f60\u65b9\u4fbf\u7684\u521b\u5efa\u4ee3\u7406\u5bf9\u8c61\uff0c\u4ee3\u7406\u5bf9\u8c61\u53ef\u4ee5\u5e2e\u52a9\u6784\u5efa\u7075\u6d3b\u7684\u5e94\u7528\u7a0b\u5e8f\u4f53\u7cfb\u7ed3\u6784\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u5c06\u529f\u80fd\u900f\u660e\u5730\u6dfb\u52a0\u5230\u4ee3\u7801\u4e2d\uff0c\u800c\u65e0\u9700\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u4ee3\u7406\u4e00\u4e2a\u7c7b\u6765\u6dfb\u52a0\u65e5\u5fd7\u8bb0\u5f55\u6216\u5b89\u5168\u68c0\u67e5\uff0c\u800c\u65e0\u9700\u4f7f\u4ee3\u7801\u77e5\u9053\u5df2\u6dfb\u52a0\u6b64\u529f\u80fd\u3002</p> <p>\u4e0b\u9762\u53ef\u4ee5\u770b\u5230\u5982\u4f55\u5728 CAP \u4e2d\u96c6\u6210\u4f7f\u7528 Castle.DynamicProxy\u3002</p>"},{"location":"user-guide/zh/samples/castle.dynamicproxy/#1-nuget","title":"1\u3001\u5b89\u88c5 NuGet \u5305","text":"<p>\u5728 \u96c6\u6210\u4e86 CAP \u7684\u9879\u76ee\u4e2d\u5b89\u88c5\u5305\uff0c\u6709\u5173\u5982\u4f55\u96c6\u6210 CAP \u7684\u6587\u6863\u8bf7\u770b\u8fd9\u91cc\u3002</p> <p>\u6ce8\u610f\uff0c<code>Castle.DynamicProxy</code> \u8fd9\u4e2a\u5305\u5df2\u7ecf\u88ab\u5e9f\u5f03\uff0c\u8bf7\u4f7f\u7528\u6700\u65b0\u7684 <code>Castle.Core</code> \u5305\u3002</p> <pre><code>&lt;PackageReference Include=\"Castle.Core\" Version=\"4.4.1\" /&gt;\n</code></pre>"},{"location":"user-guide/zh/samples/castle.dynamicproxy/#2-castle","title":"2\u3001\u521b\u5efa\u4e00\u4e2a Castle \u5207\u9762\u62e6\u622a\u5668","text":"<p>\u53ef\u4ee5\u5728\u8fd9\u91cc dynamicproxy.md \u627e\u5230\u76f8\u5173\u7684\u6587\u6863\u3002</p> <p>\u4e0b\u9762\u4e3a\u793a\u4f8b\u4ee3\u7801\uff0c\u7ee7\u627f Castle \u63d0\u4f9b\u7684 <code>IInterceptor</code> \u63a5\u53e3\u5373\u53ef\uff1a</p> <pre><code>[Serializable]\npublic class MyInterceptor : IInterceptor\n{\n    public void Intercept(IInvocation invocation)\n    {\n        Console.WriteLine(\"Before target call\");\n        try\n        {\n            invocation.Proceed();\n        }\n        catch (Exception)\n        {\n            Console.WriteLine(\"Target threw an exception!\");\n            throw;\n        }\n        finally\n        {\n            Console.WriteLine(\"After target call\");\n        }\n    }\n}\n</code></pre> <p>\u62e6\u622a\u5668\u6b64\u5904\u547d\u540d\u4e3a <code>MyInterceptor</code>\uff0c\u4f60\u53ef\u4ee5\u5728\u5176\u4e2d\u5904\u7406\u4f60\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u6bd4\u5982\u6dfb\u52a0\u65e5\u5fd7\u6216\u5176\u4ed6\u7684\u4e00\u4e9b\u884c\u4e3a\u3002</p>"},{"location":"user-guide/zh/samples/castle.dynamicproxy/#3-iservicecollection","title":"3\u3001\u521b\u5efa IServiceCollection \u7684\u6269\u5c55\u7c7b","text":"<p>\u4e3a <code>IServiceCollection</code> \u521b\u5efa\u6269\u5c55\uff0c\u65b9\u9762\u540e\u7eed\u8c03\u7528\u3002</p> <pre><code>using Castle.DynamicProxy;\n\npublic static class ServicesExtensions\n{\n    public static void AddProxiedSingleton&lt;TImplementation&gt;(this IServiceCollection services)\n        where TImplementation : class\n    {\n        services.AddSingleton(serviceProvider =&gt;\n        {\n            var proxyGenerator = serviceProvider.GetRequiredService&lt;ProxyGenerator&gt;();\n            var interceptors = serviceProvider.GetServices&lt;IInterceptor&gt;().ToArray();\n            return proxyGenerator.CreateClassProxy&lt;TImplementation&gt;(interceptors);\n        });\n    }\n}\n</code></pre> <p>\u6b64\u5904\u6211\u521b\u5efa\u4e86\u4e00\u4e2a Singleton \u58f0\u660e\u5468\u671f\u7684\u6269\u5c55\u65b9\u6cd5\uff0c\u5efa\u8bae\u6240\u6709 CAP \u7684\u8ba2\u9605\u8005\u90fd\u521b\u5efa\u4e3a Singleton \u5373\u53ef\uff0c\u56e0\u4e3a\u5728 CAP \u5185\u90e8\u5b9e\u9645\u6267\u884c\u7684\u65f6\u5019\u4e5f\u4f1a\u521b\u5efa\u4e00\u4e2a scope \u6765\u6267\u884c\uff0c\u6240\u4ee5\u65e0\u9700\u62c5\u5fc3\u8d44\u6e90\u91ca\u653e\u95ee\u9898\u3002</p>"},{"location":"user-guide/zh/samples/castle.dynamicproxy/#4-cap","title":"4\u3001\u521b\u5efa CAP \u8ba2\u9605\u670d\u52a1","text":"<p>\u521b\u5efa\u4e00\u4e2a CAP \u8ba2\u9605\u7c7b\uff0c\u6ce8\u610f\u4e0d\u80fd\u653e\u5728 Controller \u4e2d\u4e86\u3002</p> <p>\u6ce8\u610f\uff1a\u65b9\u6cd5\u9700\u8981\u4e3a\u865a\u65b9\u6cd5 virtual\uff0c\u624d\u80fd\u88ab Castle \u91cd\u5199\uff0c\u522b\u641e\u5fd8\u4e86\u52a0\uff01\uff01\uff01 </p> <pre><code>public class CapSubscribeService: ICapSubscribe\n{\n    [CapSubscribe(\"sample.rabbitmq.mysql\")]\n    public virtual void Subscriber(DateTime p)\n    {\n        Console.WriteLine($@\"{DateTime.Now} Subscriber invoked, Info: {p}\");\n    }\n}\n</code></pre>"},{"location":"user-guide/zh/samples/castle.dynamicproxy/#5-startup","title":"5\u3001\u5728 Startup \u4e2d\u96c6\u6210","text":"<pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    // \u6dfb\u52a0 Castle \u7684\u4ee3\u7406\u751f\u6210\u5668\n    services.AddSingleton(new ProxyGenerator());\n\n    // \u6dfb\u52a0\u7b2c2\u6b65\u7684\u81ea\u5b9a\u4e49\u7684\u62e6\u622a\u7c7b\uff0c\u58f0\u660e\u5468\u671f\u4e3a\n    services.AddSingleton&lt;IInterceptor, MyInterceptor&gt;();\n\n    // \u6b64\u5904\u4e3a\u4e0a\u9762\u7684\u6269\u5c55\u65b9\u6cd5\uff0c \u6dfb\u52a0 CAP \u8ba2\u9605 Service\n    services.AddProxiedSingleton&lt;CapSubscribeService&gt;();\n\n    services.AddCap(x =&gt;\n    {\n        x.UseMySql(\"\");\n        x.UseRabbitMQ(\"\");\n        x.UseDashboard();\n    });\n\n    // ...\n}\n</code></pre> <p>\u4ee5\u4e0a\u5c31\u5b8c\u6210\u4e86\u6240\u6709\u7684\u96c6\u6210\u5de5\u4f5c\uff0c\u53ef\u4ee5\u5f00\u59cb\u8fdb\u884c\u6d4b\u8bd5\u4e86\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u5230 Github issue \u53cd\u9988\u3002</p>"},{"location":"user-guide/zh/samples/eshoponcontainers/","title":"eShopOnContainers","text":"<p>eShopOnContainers is a sample application written in C# running on .NET Core using a microservice architecture, Domain Driven Design.</p> <p>.NET Core reference application, powered by Microsoft, based on a simplified microservices architecture and Docker containers.</p> <p>This reference application is cross-platform at the server and client side, thanks to .NET Core services capable of running on Linux or Windows containers depending on your Docker host, and to Xamarin for mobile apps running on Android, iOS or Windows/UWP plus any browser for the client web apps.</p> <p>The architecture proposes a microservice oriented architecture implementation with multiple autonomous microservices (each one owning its own data/db) and implementing different approaches within each microservice (simple CRUD vs. DDD/CQRS patterns) using Http as the communication protocol between the client apps and the microservices and supports asynchronous communication for data updates propagation across multiple services based on Integration Events and an Event Bus (a light message broker, to choose between RabbitMQ or Azure Service Bus, underneath) plus other features defined at the roadmap.</p>"},{"location":"user-guide/zh/samples/eshoponcontainers/#eshoponcontainers-with-cap","title":"eShopOnContainers with CAP","text":"<p>\u4f60\u53ef\u4ee5\u5728\u4e0b\u9762\u7684\u5730\u5740\u770b\u5230\u5982\u4f55\u5728 eShopOnContainers \u4e2d\u4f7f\u7528 CAP\u3002</p> <p>https://github.com/yang-xiaodong/eShopOnContainers</p>"},{"location":"user-guide/zh/samples/faq/","title":"FAQ","text":"<p>\u6709\u6ca1\u6709\u5b66\u4e60\u548c\u8ba8\u8bba CAP \u7684\u5373\u65f6\u901a\u8baf\u7fa4\u7ec4\uff08\u4f8b\u5982\u817e\u8baf QQ \u7fa4\uff09\uff1f</p> <p>\u56de\u7b54\uff1a \u6682\u65f6\u6ca1\u6709\u3002\u4e0e\u5176\u6d6a\u8d39\u5927\u91cf\u65f6\u95f4\u5728\u5373\u65f6\u901a\u8baf\u7fa4\u7ec4\u91cc\uff0c\u6211\u66f4\u5e0c\u671b\u5f00\u53d1\u8005\u80fd\u591f\u57f9\u517b\u72ec\u7acb\u601d\u8003\u80fd\u529b\uff0c\u5e76\u901a\u8fc7\u67e5\u9605\u6587\u6863\u81ea\u884c\u89e3\u51b3\u95ee\u9898\uff0c\u751a\u81f3\u53ef\u4ee5\u5728\u9047\u5230\u9519\u8bef\u65f6\u521b\u5efaissue\u6216\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u3002</p> <p>CAP \u662f\u5426\u9700\u8981\u4e3a\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u5206\u522b\u4f7f\u7528\u4e0d\u540c\u7684\u6570\u636e\u5e93\uff1f</p> <p>\u56de\u7b54\uff1a\u6ca1\u6709\u5fc5\u8981\u4f7f\u7528\u5b8c\u5168\u4e0d\u540c\u7684\u6570\u636e\u5e93\uff0c\u63a8\u8350\u4e3a\u6bcf\u4e2a\u7a0b\u5e8f\u4f7f\u7528\u4e00\u4e2a\u4e13\u7528\u6570\u636e\u5e93\u3002</p> <p>\u5426\u5219\uff0c\u8bf7\u53c2\u9605\u4e0b\u9762\u7684\u95ee\u7b54\u90e8\u5206\u3002</p> <p>\u5982\u4f55\u4f7f\u7528\u76f8\u540c\u7684\u6570\u636e\u5e93\u7528\u4e8e\u4e0d\u540c\u7684\u5e94\u7528\u7a0b\u5e8f\uff1f</p> <p>\u56de\u7b54\uff1a \u5728 ConfigureServices \u65b9\u6cd5\u4e2d\u5b9a\u4e49\u8868\u540d\u524d\u7f00\u3002</p> <p>\u4ee3\u7801\u793a\u4f8b\uff1a</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    services.AddCap(x =&gt;\n    {\n        x.UseKafka(\"\");\n        x.UseMySql(opt =&gt;\n        {\n            opt.ConnectionString = \"connection string\";\n            opt.TableNamePrefix = \"appone\"; // different table name prefix here\n        });\n    });\n}\n</code></pre> <p>CAP \u80fd\u5426\u4e0d\u4f7f\u7528\u6570\u636e\u5e93\u4f5c\u4e3a\u4e8b\u4ef6\u5b58\u50a8\uff1f\u6211\u53ea\u662f\u60f3\u53d1\u9001\u6d88\u606f</p> <p>\u56de\u7b54\uff1a \u5b8c\u5168\u4e0d\u7528\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 InMemoryStorage \u3002</p> <p>CAP \u7684\u76ee\u7684\u662f\u5728\u5fae\u670d\u52a1\u6216 SOA \u67b6\u6784\u4e2d\u786e\u4fdd\u4e00\u81f4\u6027\u539f\u5219\u3002\u8be5\u89e3\u51b3\u65b9\u6848\u57fa\u4e8e\u6570\u636e\u5e93\u7684 ACID \u7279\u6027\uff0c\u5982\u679c\u6ca1\u6709\u6570\u636e\u5e93\uff0c\u5355\u7eaf\u7684\u6d88\u606f\u961f\u5217\u6d88\u606f\u4f20\u9012\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002</p> <p>\u5982\u679c\u6d88\u8d39\u8005\u51fa\u73b0\u5f02\u5e38\uff0c\u80fd\u5426\u56de\u6eda\u751f\u4ea7\u8005\u6267\u884c\u7684\u6570\u636e\u5e93\u8bed\u53e5\uff1f</p> <p>\u56de\u7b54\uff1a \u65e0\u6cd5\u56de\u6eda\uff0cCAP \u662f\u6700\u7ec8\u4e00\u81f4\u6027\u89e3\u51b3\u65b9\u6848\u3002</p> <p>\u53ef\u4ee5\u60f3\u8c61\u60a8\u7684\u573a\u666f\u662f\u8c03\u7528\u7b2c\u4e09\u65b9\u652f\u4ed8\u3002\u5982\u679c\u60a8\u6b63\u5728\u8fdb\u884c\u7b2c\u4e09\u65b9\u652f\u4ed8\u64cd\u4f5c\uff0c\u5728\u6210\u529f\u8c03\u7528\u652f\u4ed8\u5b9d\u7684\u63a5\u53e3\u540e\uff0c\u60a8\u7684\u4ee3\u7801\u51fa\u73b0\u9519\u8bef\uff0c\u652f\u4ed8\u5b9d\u4f1a\u56de\u6eda\u5417\uff1f\u5982\u679c\u4e0d\u56de\u6eda\uff0c\u60a8\u8be5\u600e\u4e48\u529e\uff1fCAP \u7684\u60c5\u51b5\u4e0e\u6b64\u7c7b\u4f3c\u3002</p>"},{"location":"user-guide/zh/samples/github/","title":"Github \u4e0a\u7684\u793a\u4f8b","text":"<p>\u4f60\u53ef\u4ee5\u5728\u4e0b\u9762\u7684\u5730\u5740\u627e\u5230\u76f8\u5173\u793a\u4f8b\u4ee3\u7801\uff1a</p> <p>https://github.com/dotnetcore/CAP/tree/master/samples</p> <p>CAP + Aspire + Azure Service Bus + Azure SQL</p> <p>https://github.com/NikiforovAll/cap-aspire</p>"},{"location":"user-guide/zh/storage/general/","title":"\u57fa\u672c","text":"<p>CAP \u9700\u8981\u4f7f\u7528\u5177\u6709\u6301\u4e45\u5316\u529f\u80fd\u7684\u5b58\u50a8\u4ecb\u8d28\u6765\u5b58\u50a8\u4e8b\u4ef6\u6d88\u606f\uff0c\u4f8b\u5982\u901a\u8fc7\u6570\u636e\u5e93\u6216\u8005\u5176\u4ed6NoSql\u8bbe\u65bd\u3002CAP \u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u6765\u5e94\u5bf9\u4e00\u5207\u73af\u5883\u6216\u8005\u7f51\u7edc\u5f02\u5e38\u5bfc\u81f4\u6d88\u606f\u4e22\u5931\u7684\u60c5\u51b5\uff0c\u6d88\u606f\u7684\u53ef\u9760\u6027\u662f\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u57fa\u77f3\uff0c\u6240\u4ee5\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u6d88\u606f\u90fd\u4e0d\u80fd\u4e22\u5931\u3002</p>"},{"location":"user-guide/zh/storage/general/#_2","title":"\u6301\u4e45\u5316","text":""},{"location":"user-guide/zh/storage/general/#_3","title":"\u53d1\u9001\u524d","text":"<p>\u5728\u6d88\u606f\u8fdb\u5165\u5230\u6d88\u606f\u961f\u5217\u4e4b\u524d\uff0cCAP\u4f7f\u7528\u672c\u5730\u6570\u636e\u5e93\u8868\u5bf9\u6d88\u606f\u8fdb\u884c\u6301\u4e45\u5316\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u5f53\u6d88\u606f\u961f\u5217\u51fa\u73b0\u5f02\u5e38\u6216\u8005\u7f51\u7edc\u9519\u8bef\u65f6\u5019\u6d88\u606f\u662f\u6ca1\u6709\u4e22\u5931\u7684\u3002</p> <p>\u4e3a\u4e86\u4fdd\u8bc1\u8fd9\u79cd\u673a\u5236\u7684\u53ef\u9760\u6027\uff0cCAP\u4f7f\u7528\u548c\u4e1a\u52a1\u4ee3\u7801\u76f8\u540c\u7684\u6570\u636e\u5e93\u4e8b\u52a1\u6765\u4fdd\u8bc1\u4e1a\u52a1\u64cd\u4f5c\u548cCAP\u7684\u6d88\u606f\u5728\u6301\u4e45\u5316\u7684\u8fc7\u7a0b\u4e2d\u662f\u5f3a\u4e00\u81f4\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\u5728\u8fdb\u884c\u6d88\u606f\u6301\u4e45\u5316\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4efb\u4f55\u4e00\u65b9\u53d1\u751f\u5f02\u5e38\u60c5\u51b5\u6570\u636e\u5e93\u90fd\u4f1a\u8fdb\u884c\u56de\u6eda\u64cd\u4f5c\u3002</p>"},{"location":"user-guide/zh/storage/general/#_4","title":"\u53d1\u9001\u540e","text":"<p>\u6d88\u606f\u8fdb\u5165\u5230\u6d88\u606f\u961f\u5217\u4e4b\u540e\uff0cCAP\u4f1a\u542f\u52a8\u6d88\u606f\u961f\u5217\u7684\u6301\u4e45\u5316\u529f\u80fd\uff0c\u6211\u4eec\u9700\u8981\u8bf4\u660e\u4e00\u4e0b\u5728 RabbitMQ \u548c Kafka \u4e2dCAP\u7684\u6d88\u606f\u662f\u5982\u4f55\u6301\u4e45\u5316\u7684\u3002</p> <p>\u9488\u5bf9\u4e8e RabbitMQ \u4e2d\u7684\u6d88\u606f\u6301\u4e45\u5316\uff0cCAP \u4f7f\u7528\u7684\u662f\u5177\u6709\u6d88\u606f\u6301\u4e45\u5316\u529f\u80fd\u7684\u6d88\u8d39\u8005\u961f\u5217\uff0c\u4f46\u662f\u8fd9\u91cc\u9762\u53ef\u80fd\u6709\u4f8b\u5916\u60c5\u51b5\uff0c\u53c2\u52a0 2.2.1 \u7ae0\u8282\u3002</p> <p>\u7531\u4e8e Kafka \u5929\u751f\u8bbe\u8ba1\u7684\u5c31\u662f\u4f7f\u7528\u6587\u4ef6\u8fdb\u884c\u7684\u6d88\u606f\u6301\u4e45\u5316\uff0c\u5728\u6240\u4ee5\u5728\u6d88\u606f\u8fdb\u5165\u5230Kafka\u4e4b\u540e\uff0cKafka\u4f1a\u4fdd\u8bc1\u6d88\u606f\u80fd\u591f\u6b63\u786e\u88ab\u6301\u4e45\u5316\u800c\u4e0d\u4e22\u5931\u3002</p>"},{"location":"user-guide/zh/storage/general/#_5","title":"\u6d88\u606f\u5b58\u50a8","text":""},{"location":"user-guide/zh/storage/general/#_6","title":"\u652f\u6301\u7684\u5b58\u50a8","text":"<p>CAP \u652f\u6301\u4ee5\u4e0b\u51e0\u79cd\u5177\u6709\u4e8b\u52a1\u652f\u6301\u7684\u6570\u636e\u5e93\u505a\u4e3a\u5b58\u50a8\uff1a</p> <ul> <li>SQL Server</li> <li>MySQL</li> <li>PostgreSql</li> <li>MongoDB</li> <li>In-Memory Storage</li> </ul> <p>\u5728 CAP \u542f\u52a8\u540e\uff0c\u4f1a\u5411\u6301\u4e45\u5316\u4ecb\u8d28\u4e2d\u751f\u6210\u4e24\u4e2a\u8868\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u540d\u79f0\u4e3a\uff1a<code>Cap.Published</code> <code>Cap.Received</code>\u3002</p>"},{"location":"user-guide/zh/storage/general/#_7","title":"\u5b58\u50a8\u683c\u5f0f","text":"<p>Published \u8868\u7ed3\u6784\uff1a</p> NAME DESCRIPTION TYPE Id Message Id int Version Message Version string Name Topic Name string Content Json Content string Added Added Time DateTime ExpiresAt Expire time DateTime Retries Retry times int StatusName Status Name string <p>Received \u8868\u7ed3\u6784\uff1a</p> NAME DESCRIPTION TYPE Id Message Id int Version Message Version string Name Topic Name string Group Group Name string Content Json Content string Added Added Time DateTime ExpiresAt Expire time DateTime Retries Retry times int StatusName Status Name string <p>Lock \u8868\u7ed3\u6784\uff08\u53ef\u9009\uff09\uff1a</p> NAME DESCRIPTION TYPE Key Lock Id string Instance Acquired instance of lock string LastLockTime Last acquired lock time DateTime"},{"location":"user-guide/zh/storage/general/#_8","title":"\u5305\u88c5\u5668\u5bf9\u8c61","text":"<p>CAP \u5728\u8fdb\u884c\u6d88\u606f\u53d1\u9001\u5230\u65f6\u5019\uff0c\u4f1a\u5bf9\u539f\u59cb\u6d88\u606f\u5bf9\u8c61\u8fdb\u884c\u4e00\u4e2a\u4e8c\u6b21\u5305\u88c5\u5b58\u50a8\u5230 <code>Content</code> \u5b57\u6bb5\u4e2d\uff0c\u4ee5\u4e0b\u4e3a\u5305\u88c5 Content \u7684 Message \u5bf9\u8c61\u6570\u636e\u7ed3\u6784\uff1a</p> NAME DESCRIPTION TYPE Id CAP\u751f\u6210\u7684\u6d88\u606f\u7f16\u53f7 string Timestamp \u6d88\u606f\u521b\u5efa\u65f6\u95f4 string Content \u5185\u5bb9 string CallbackName \u56de\u8c03\u7684\u8ba2\u9605\u8005\u540d\u79f0 string <p>\u5176\u4e2d Id \u5b57\u6bb5\uff0cCAP \u91c7\u7528\u7684 MongoDB \u4e2d\u7684 ObjectId \u5206\u5e03\u5f0fId\u751f\u6210\u7b97\u6cd5\u751f\u6210\u3002</p>"},{"location":"user-guide/zh/storage/general/#_9","title":"\u793e\u533a\u652f\u6301\u7684\u6301\u4e45\u5316","text":"<p>\u611f\u8c22\u793e\u533a\u5bf9CAP\u7684\u652f\u6301\uff0c\u4ee5\u4e0b\u662f\u793e\u533a\u652f\u6301\u7684\u6301\u4e45\u5316\u7684\u5b9e\u73b0</p> <ul> <li> <p>SQLite (@colinin) \uff1ahttps://github.com/colinin/DotNetCore.CAP.Sqlite </p> </li> <li> <p>LiteDB (@maikebing) \uff1ahttps://github.com/maikebing/CAP.Extensions</p> </li> <li> <p>SQLite &amp; Oracle (@cocosip) \uff1ahttps://github.com/cocosip/CAP-Extensions </p> </li> <li> <p>SmartSql (@xiangxiren) \uff1ahttps://github.com/xiangxiren/SmartSql.CAP</p> </li> <li> <p>DM\uff08\u8fbe\u68a6\u6570\u636e\u5e93\uff09(@findersky) \uff1ahttps://github.com/findersky/CAP</p> </li> </ul>"},{"location":"user-guide/zh/storage/in-memory-storage/","title":"In-Memory Storage","text":"<p>\u5185\u5b58\u6d88\u606f\u7684\u6301\u4e45\u5316\u5b58\u50a8\u5e38\u7528\u4e8e\u5f00\u53d1\u548c\u6d4b\u8bd5\u73af\u5883\uff0c\u5982\u679c\u4f7f\u7528\u57fa\u4e8e\u5185\u5b58\u7684\u5b58\u50a8\u5219\u4f60\u4f1a\u5931\u53bb\u672c\u5730\u4e8b\u52a1\u6d88\u606f\u53ef\u9760\u6027\u4fdd\u8bc1\u3002</p>"},{"location":"user-guide/zh/storage/in-memory-storage/#_1","title":"\u914d\u7f6e","text":"<p>\u5982\u679c\u8981\u4f7f\u7528\u5185\u5b58\u5b58\u50a8\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a</p> <pre><code>Install-Package DotNetCore.CAP.InMemoryStorage\n</code></pre> <p>\u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 <code>Startup.cs</code> \u7684 <code>ConfigureServices</code> \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e\u5185\u5b58\u7684\u914d\u7f6e\u9879\u3002</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n\n    services.AddCap(x =&gt;\n    {\n        x.UseInMemoryStorage();\n        // x.UseXXX ...\n    });\n}\n</code></pre> <p>\u5185\u5b58\u4e2d\u7684\u53d1\u9001\u6210\u529f\u6d88\u606f\uff0cCAP \u5c06\u4f1a\u6bcf 5\u5206\u949f \u8fdb\u884c\u4e00\u6b21\u6e05\u7406\u3002</p>"},{"location":"user-guide/zh/storage/in-memory-storage/#publish-with-transaction","title":"Publish with transaction","text":"<p>In-Memory \u5b58\u50a8 \u4e0d\u652f\u6301 \u4e8b\u52a1\u65b9\u5f0f\u53d1\u9001\u6d88\u606f\u3002</p>"},{"location":"user-guide/zh/storage/mongodb/","title":"MongoDB","text":"<p>MongoDB \u662f\u4e00\u4e2a\u8de8\u5e73\u53f0\u7684\u9762\u5411\u6587\u6863\u578b\u7684\u6570\u636e\u5e93\u7a0b\u5e8f\uff0c\u5b83\u88ab\u5f52\u4e3a NOSQL \u6570\u636e\u5e93\uff0cCAP \u4ece 2.3 \u7248\u672c\u5f00\u59cb\u652f\u6301 MongoDB \u4f5c\u4e3a\u6d88\u606f\u5b58\u50a8\u3002 </p> <p>MongoDB \u4ece 4.0 \u7248\u672c\u5f00\u59cb\u652f\u6301 ACID \u4e8b\u52a1\uff0c\u6240\u4ee5 CAP \u4e5f\u53ea\u652f\u6301 4.0 \u4ee5\u4e0a\u7684 MongoDB\uff0c\u5e76\u4e14 MongoDB \u9700\u8981\u90e8\u7f72\u4e3a\u96c6\u7fa4\uff0c\u56e0\u4e3a MongoDB \u7684 ACID \u4e8b\u52a1\u9700\u8981\u96c6\u7fa4\u624d\u53ef\u4ee5\u4f7f\u7528\u3002</p> <p>\u6709\u5173\u5f00\u53d1\u73af\u5883\u5982\u4f55\u5feb\u901f\u642d\u5efa MongoDB 4.0+ \u96c6\u7fa4\uff0c\u4f60\u53ef\u4ee5\u6211\u7684\u53c2\u8003 \u8fd9\u7bc7\u6587\u7ae0\u3002</p>"},{"location":"user-guide/zh/storage/mongodb/#_1","title":"\u914d\u7f6e","text":"<p>\u8981\u4f7f\u7528 MongoDB \u5b58\u50a8\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a</p> <pre><code>Install-Package DotNetCore.CAP.MongoDB\n</code></pre> <p>\u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 <code>Startup.cs</code> \u7684 <code>ConfigureServices</code> \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e\u5185\u5b58\u7684\u914d\u7f6e\u9879\u3002</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n\n    services.AddCap(x =&gt;\n    {\n        x.UseMongoDB(opt=&gt;{\n            //MongoDBOptions\n        });\n        // x.UseXXX ...\n    });\n}\n</code></pre>"},{"location":"user-guide/zh/storage/mongodb/#_2","title":"\u914d\u7f6e\u9879","text":"NAME DESCRIPTION TYPE DEFAULT DatabaseName \u6570\u636e\u5e93\u540d\u79f0 string cap DatabaseConnection \u6570\u636e\u5e93\u8fde\u63a5\u5b57\u7b26\u4e32 string mongodb://localhost:27017 ReceivedCollection \u63a5\u6536\u6d88\u606f\u96c6\u5408\u540d\u79f0 string cap.received PublishedCollection \u53d1\u9001\u6d88\u606f\u96c6\u5408\u540d\u79f0 string cap.published"},{"location":"user-guide/zh/storage/mongodb/#_3","title":"\u4f7f\u7528\u4e8b\u52a1\u53d1\u5e03\u6d88\u606f","text":"<p>\u4e0b\u9762\u7684\u793a\u4f8b\u5c55\u793a\u4e86\u5982\u4f55\u5229\u7528 CAP \u548c MongoDB \u8fdb\u884c\u672c\u5730\u4e8b\u52a1\u96c6\u6210\u3002</p> <pre><code>//NOTE: before your test, your need to create database and collection at first\n//\u6ce8\u610f\uff1aMongoDB \u4e0d\u80fd\u5728\u4e8b\u52a1\u4e2d\u521b\u5efa\u6570\u636e\u5e93\u548c\u96c6\u5408\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u5355\u72ec\u521b\u5efa\u5b83\u4eec\uff0c\u6a21\u62df\u4e00\u6761\u8bb0\u5f55\u63d2\u5165\u5219\u4f1a\u81ea\u52a8\u521b\u5efa        \n//var mycollection = _client.GetDatabase(\"test\").GetCollection&lt;BsonDocument&gt;(\"test.collection\");\n//mycollection.InsertOne(new BsonDocument { { \"test\", \"test\" } });\n\nusing (var session = _client.StartTransaction(_capBus, autoCommit: false))\n{\n    var collection = _client.GetDatabase(\"test\").GetCollection&lt;BsonDocument&gt;(\"test.collection\");\n    collection.InsertOne(session, new BsonDocument { { \"hello\", \"world\" } });\n\n    _capBus.Publish(\"sample.rabbitmq.mongodb\", DateTime.Now);\n\n    session.CommitTransaction();\n}\n</code></pre>"},{"location":"user-guide/zh/storage/mysql/","title":"MySQL","text":"<p>MySQL \u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 MySQL \u6765\u4f5c\u4e3a CAP \u6d88\u606f\u7684\u6301\u4e45\u5316\u3002</p>"},{"location":"user-guide/zh/storage/mysql/#_1","title":"\u914d\u7f6e","text":"<p>\u8981\u4f7f\u7528 MySQL \u5b58\u50a8\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a</p> <pre><code>Install-Package DotNetCore.CAP.MySql\n</code></pre> <p>\u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 <code>Startup.cs</code> \u7684 <code>ConfigureServices</code> \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e\u5185\u5b58\u7684\u914d\u7f6e\u9879\u3002</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n\n    services.AddCap(x =&gt;\n    {\n        x.UseMySql(opt=&gt;{\n            //MySqlOptions\n        });\n        // x.UseXXX ...\n    });\n}\n</code></pre>"},{"location":"user-guide/zh/storage/mysql/#_2","title":"\u914d\u7f6e\u9879","text":"NAME DESCRIPTION TYPE DEFAULT TableNamePrefix Cap\u8868\u540d\u524d\u7f00 string cap ConnectionString \u6570\u636e\u5e93\u8fde\u63a5\u5b57\u7b26\u4e32 string null"},{"location":"user-guide/zh/storage/mysql/#_3","title":"\u81ea\u5b9a\u4e49\u8868\u540d\u79f0","text":"<p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 <code>IStorageInitializer</code> \u63a5\u53e3\u83b7\u53d6\u8868\u540d\u79f0\u7684\u65b9\u6cd5\u6765\u505a\u5230\u8fd9\u4e00\u70b9</p> <p>\u793a\u4f8b\u4ee3\u7801\uff1a</p> <p><pre><code>public class MyTableInitializer : MySqlStorageInitializer\n{\n    public override string GetPublishedTableName()\n    {\n        //\u4f60\u7684 \u53d1\u9001\u6d88\u606f\u8868 \u540d\u79f0\n    }\n\n    public override string GetReceivedTableName()\n    {\n        //\u4f60\u7684 \u63a5\u6536\u6d88\u606f\u8868 \u540d\u79f0\n    }\n}\n</code></pre> \u7136\u540e\u5c06\u4f60\u7684\u5b9e\u73b0\u6ce8\u518c\u5230\u5bb9\u5668\u4e2d</p> <pre><code>services.AddSingleton&lt;IStorageInitializer, MyTableInitializer&gt;();\n</code></pre>"},{"location":"user-guide/zh/storage/mysql/#_4","title":"\u4f7f\u7528\u4e8b\u52a1\u53d1\u5e03\u6d88\u606f","text":""},{"location":"user-guide/zh/storage/mysql/#adonet","title":"ADO.NET","text":"<pre><code>private readonly ICapPublisher _capBus;\n\nusing (var connection = new MySqlConnection(AppDbContext.ConnectionString))\n{\n    using (var transaction = connection.BeginTransaction(_capBus, autoCommit: false))\n    {\n        //your business code\n        connection.Execute(\"insert into test(name) values('test')\", \n            transaction: (IDbTransaction)transaction.DbTransaction);\n\n        _capBus.Publish(\"sample.rabbitmq.mysql\", DateTime.Now);\n\n        transaction.Commit();\n    }\n}\n</code></pre>"},{"location":"user-guide/zh/storage/mysql/#entityframework","title":"EntityFramework","text":"<pre><code>private readonly ICapPublisher _capBus;\n\nusing (var trans = dbContext.Database.BeginTransaction(_capBus, autoCommit: false))\n{\n    dbContext.Persons.Add(new Person() { Name = \"ef.transaction\" });\n\n    _capBus.Publish(\"sample.rabbitmq.mysql\", DateTime.Now);\n\n    dbContext.SaveChanges();\n    trans.Commit();\n}\n</code></pre>"},{"location":"user-guide/zh/storage/postgresql/","title":"Postgre SQL","text":"<p>PostgreSQL \u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u5b83\u5df2\u7ecf\u53d8\u5f97\u8d8a\u6765\u8d8a\u6d41\u884c\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 Postgre SQL \u6765\u4f5c\u4e3a CAP \u6d88\u606f\u7684\u6301\u4e45\u5316\u3002</p>"},{"location":"user-guide/zh/storage/postgresql/#_1","title":"\u914d\u7f6e","text":"<p>\u8981\u4f7f\u7528 PostgreSQL \u5b58\u50a8\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a</p> <pre><code>Install-Package DotNetCore.CAP.PostgreSql\n</code></pre> <p>\u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 <code>Startup.cs</code> \u7684 <code>ConfigureServices</code> \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e\u5185\u5b58\u7684\u914d\u7f6e\u9879\u3002</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n\n    services.AddCap(x =&gt;\n    {\n        x.UsePostgreSql(opt=&gt;{\n            //PostgreSqlOptions\n        }); \n        // x.UseXXX ...\n    });\n}\n</code></pre>"},{"location":"user-guide/zh/storage/postgresql/#_2","title":"\u914d\u7f6e\u9879","text":"NAME DESCRIPTION TYPE DEFAULT Schema \u6570\u636e\u5e93\u67b6\u6784 string cap ConnectionString \u6570\u636e\u5e93\u8fde\u63a5\u5b57\u7b26\u4e32 string DataSource Data source NpgsqlDataSource"},{"location":"user-guide/zh/storage/postgresql/#_3","title":"\u81ea\u5b9a\u4e49\u8868\u540d\u79f0","text":"<p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 <code>IStorageInitializer</code> \u63a5\u53e3\u83b7\u53d6\u8868\u540d\u79f0\u7684\u65b9\u6cd5\u6765\u505a\u5230\u8fd9\u4e00\u70b9</p> <p>\u793a\u4f8b\u4ee3\u7801\uff1a</p> <p><pre><code>public class MyTableInitializer : PostgreSqlStorageInitializer\n{\n    public override string GetPublishedTableName()\n    {\n        //\u4f60\u7684 \u53d1\u9001\u6d88\u606f\u8868 \u540d\u79f0\n    }\n\n    public override string GetReceivedTableName()\n    {\n        //\u4f60\u7684 \u63a5\u6536\u6d88\u606f\u8868 \u540d\u79f0\n    }\n}\n</code></pre> \u7136\u540e\u5c06\u4f60\u7684\u5b9e\u73b0\u6ce8\u518c\u5230\u5bb9\u5668\u4e2d</p> <pre><code>services.AddSingleton&lt;IStorageInitializer, MyTableInitializer&gt;();\n</code></pre>"},{"location":"user-guide/zh/storage/postgresql/#_4","title":"\u4f7f\u7528\u4e8b\u52a1\u53d1\u5e03\u6d88\u606f","text":""},{"location":"user-guide/zh/storage/postgresql/#adonet","title":"ADO.NET","text":"<pre><code>private readonly ICapPublisher _capBus;\n\nusing (var connection = new NpgsqlConnection(\"ConnectionString\"))\n{\n    using (var transaction = connection.BeginTransaction(_capBus, autoCommit: false))\n    {\n        //your business code\n        connection.Execute(\"insert into test(name) values('test')\", \n            transaction: (IDbTransaction)transaction.DbTransaction);\n\n        _capBus.Publish(\"sample.rabbitmq.mysql\", DateTime.Now);\n\n        transaction.Commit();\n    }\n}\n</code></pre>"},{"location":"user-guide/zh/storage/postgresql/#entityframework","title":"EntityFramework","text":"<pre><code>private readonly ICapPublisher _capBus;\n\nusing (var trans = dbContext.Database.BeginTransaction(_capBus, autoCommit: false))\n{\n    dbContext.Persons.Add(new Person() { Name = \"ef.transaction\" });\n\n    _capBus.Publish(\"sample.rabbitmq.mysql\", DateTime.Now);\n\n    dbContext.SaveChanges();\n    trans.Commit();\n}\n</code></pre>"},{"location":"user-guide/zh/storage/sqlserver/","title":"SQL Server","text":"<p>SQL Server \u662f\u7531\u5fae\u8f6f\u5f00\u53d1\u7684\u4e00\u4e2a\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 SQL Server \u6765\u4f5c\u4e3a CAP \u6d88\u606f\u7684\u6301\u4e45\u5316\u3002</p> <p>\u6ce8\u610f</p> <p>\u6211\u4eec\u76ee\u524d\u4f7f\u7528 <code>Microsoft.Data.SqlClient</code> \u4f5c\u4e3a\u6570\u636e\u5e93\u9a71\u52a8\u7a0b\u5e8f\uff0c\u5b83\u662fSQL Server \u9a71\u52a8\u7684\u672a\u6765\uff0c\u5e76\u4e14\u5df2\u7ecf\u653e\u5f03\u4e86 <code>System.Data.SqlClient</code>\uff0c\u6211\u4eec\u5efa\u8bae\u4f60\u5207\u6362\u8fc7\u53bb\u3002</p>"},{"location":"user-guide/zh/storage/sqlserver/#_1","title":"\u914d\u7f6e","text":"<p>\u8981\u4f7f\u7528 SQL Server \u5b58\u50a8\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a</p> <pre><code>Install-Package DotNetCore.CAP.SqlServer\n</code></pre> <p>\u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 <code>Startup.cs</code> \u7684 <code>ConfigureServices</code> \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e\u5185\u5b58\u7684\u914d\u7f6e\u9879\u3002</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n\n    services.AddCap(x =&gt;\n    {\n        x.UseSqlServer(opt=&gt;{\n            //SqlServerOptions\n        }); \n        // x.UseXXX ...\n    });\n}\n</code></pre>"},{"location":"user-guide/zh/storage/sqlserver/#_2","title":"\u914d\u7f6e\u9879","text":"NAME DESCRIPTION TYPE DEFAULT Schema \u6570\u636e\u5e93\u67b6\u6784 string Cap ConnectionString \u6570\u636e\u5e93\u8fde\u63a5\u5b57\u7b26\u4e32 string"},{"location":"user-guide/zh/storage/sqlserver/#_3","title":"\u81ea\u5b9a\u4e49\u8868\u540d\u79f0","text":"<p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 <code>IStorageInitializer</code> \u63a5\u53e3\u83b7\u53d6\u8868\u540d\u79f0\u7684\u65b9\u6cd5\u6765\u505a\u5230\u8fd9\u4e00\u70b9</p> <p>\u793a\u4f8b\u4ee3\u7801\uff1a</p> <p><pre><code>public class MyTableInitializer : SqlServerStorageInitializer\n{\n    public override string GetPublishedTableName()\n    {\n        //\u4f60\u7684 \u53d1\u9001\u6d88\u606f\u8868 \u540d\u79f0\n    }\n\n    public override string GetReceivedTableName()\n    {\n        //\u4f60\u7684 \u63a5\u6536\u6d88\u606f\u8868 \u540d\u79f0\n    }\n}\n</code></pre> \u7136\u540e\u5c06\u4f60\u7684\u5b9e\u73b0\u6ce8\u518c\u5230\u5bb9\u5668\u4e2d</p> <pre><code>services.AddSingleton&lt;IStorageInitializer, MyTableInitializer&gt;();\n</code></pre>"},{"location":"user-guide/zh/storage/sqlserver/#_4","title":"\u4f7f\u7528\u4e8b\u52a1\u53d1\u5e03\u6d88\u606f","text":""},{"location":"user-guide/zh/storage/sqlserver/#adonet","title":"ADO.NET","text":"<pre><code>private readonly ICapPublisher _capBus;\n\nusing (var connection = new SqlConnection(\"ConnectionString\"))\n{\n    using (var transaction = connection.BeginTransaction(_capBus, autoCommit: false))\n    {\n        //your business code\n        connection.Execute(\"insert into test(name) values('test')\", \n            transaction: (IDbTransaction)transaction.DbTransaction);\n\n        _capBus.Publish(\"sample.rabbitmq.mysql\", DateTime.Now);\n\n        transaction.Commit();\n    }\n}\n</code></pre>"},{"location":"user-guide/zh/storage/sqlserver/#entityframework","title":"EntityFramework","text":"<pre><code>private readonly ICapPublisher _capBus;\n\nusing (var trans = dbContext.Database.BeginTransaction(_capBus, autoCommit: false))\n{\n    dbContext.Persons.Add(new Person() { Name = \"ef.transaction\" });\n\n    _capBus.Publish(\"sample.rabbitmq.mysql\", DateTime.Now);\n\n    dbContext.SaveChanges();\n    trans.Commit();\n}\n</code></pre>"},{"location":"user-guide/zh/transport/aws-sqs/","title":"Amazon SQS","text":"<p>AWS SQS \u662f\u4e00\u79cd\u5b8c\u5168\u6258\u7ba1\u7684\u6d88\u606f\u961f\u5217\u670d\u52a1\uff0c\u53ef\u8ba9\u60a8\u5206\u79bb\u548c\u6269\u5c55\u5fae\u670d\u52a1\u3001\u5206\u5e03\u5f0f\u7cfb\u7edf\u548c\u65e0\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u3002</p> <p>AWS SNS \u662f\u4e00\u79cd\u9ad8\u5ea6\u53ef\u7528\u3001\u6301\u4e45\u3001\u5b89\u5168\u3001\u5b8c\u5168\u6258\u7ba1\u7684\u53d1\u5e03/\u8ba2\u9605\u6d88\u606f\u6536\u53d1\u670d\u52a1\uff0c\u53ef\u4ee5\u8f7b\u677e\u5206\u79bb\u5fae\u670d\u52a1\u3001\u5206\u5e03\u5f0f\u7cfb\u7edf\u548c\u65e0\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u3002</p>"},{"location":"user-guide/zh/transport/aws-sqs/#cap-aws-sns-sqs","title":"CAP \u5982\u4f55\u4f7f\u7528 AWS SNS &amp; SQS","text":""},{"location":"user-guide/zh/transport/aws-sqs/#sns","title":"SNS","text":"<p>\u7531\u4e8e CAP \u662f\u57fa\u4e8e Topic \u6a21\u5f0f\u5de5\u4f5c\u7684\uff0c\u6240\u4ee5\u9700\u8981\u4f7f\u7528\u5230 AWS SNS\uff0cSNS \u7b80\u5316\u4e86\u6d88\u606f\u7684\u53d1\u5e03\u8ba2\u9605\u67b6\u6784\u3002</p> <p>\u5728 CAP \u542f\u52a8\u65f6\u4f1a\u5c06\u6240\u6709\u7684\u8ba2\u9605\u540d\u79f0\u6ce8\u518c\u4e3a SNS \u7684 Topic\uff0c\u4f60\u5c06\u4f1a\u5728\u7ba1\u7406\u63a7\u5236\u53f0\u4e2d\u770b\u5230\u6240\u6709\u5df2\u7ecf\u6ce8\u518c\u7684 Topic \u5217\u8868\u3002 </p> <p>\u7531\u4e8e SNS \u4e0d\u652f\u6301\u4f7f\u7528 <code>.</code> <code>:</code> \u7b49\u7b26\u53f7\u4f5c\u4e3a Topic \u7684\u540d\u79f0\uff0c\u6240\u4ee5\u6211\u4eec\u8fdb\u884c\u4e86\u66ff\u6362\uff0c\u6211\u4eec\u5c06 <code>.</code> \u66ff\u6362\u4e3a\u4e86 <code>-</code>\uff0c\u5c06 <code>:</code> \u66ff\u6362\u4e3a\u4e86 <code>_</code></p> <p>\u6ce8\u610f\u4e8b\u9879</p> <p>Amazon SNS \u5f53\u524d\u5141\u8bb8\u53d1\u5e03\u7684\u6d88\u606f\u6700\u5927\u5927\u5c0f\u4e3a 256KB</p> <p>\u4e3e\u4f8b\uff0c\u4f60\u7684\u5f53\u524d\u9879\u76ee\u4e2d\u6709\u4ee5\u4e0b\u4e24\u4e2a\u8ba2\u9605\u8005\u65b9\u6cd5</p> <pre><code>[CapSubscribe(\"sample.sns.foo\")]\npublic void TestFoo(DateTime value)\n{\n}\n\n[CapSubscribe(\"sample.sns.bar\")]\npublic void TestBar(DateTime value)\n{\n}\n</code></pre> <p>\u5728 CAP \u542f\u52a8\u540e\uff0c\u5728 AWS SNS \u4e2d\u4f60\u5c06\u770b\u5230</p> <p></p>"},{"location":"user-guide/zh/transport/aws-sqs/#sqs","title":"SQS","text":"<p>\u9488\u5bf9\u6bcf\u4e2a\u6d88\u8d39\u8005\u7ec4\uff0cCAP \u5c06\u521b\u5efa\u4e00\u4e2a\u4e0e\u4e4b\u5bf9\u5e94\u7684 SQS \u961f\u5217\uff0c\u961f\u5217\u7684\u540d\u79f0\u4e3a\u914d\u7f6e\u9879\u4e2d DefaultGroup \u7684\u540d\u79f0\uff0c\u7c7b\u578b\u4e3a Standard Queue \u3002</p> <p>\u8be5 SQS \u961f\u5217\u5c06\u8ba2\u9605 SNS \u4e2d\u7684 Topic \uff0c\u5982\u4e0b\u56fe\uff1a</p> <p></p> <p>\u6ce8\u610f\u4e8b\u9879</p> <p>\u7531\u4e8e AWS SNS \u7684\u9650\u5236\uff0c\u5f53\u4f60\u51cf\u5c11\u8ba2\u9605\u65b9\u6cd5\u65f6\uff0c\u6211\u4eec\u4e0d\u4f1a\u4e3b\u52a8\u5220\u9664 AWS SNS \u6216\u8005 SQS \u4e0a\u7684\u76f8\u5173 Topic \u6216 Queue\uff0c\u4f60\u9700\u8981\u624b\u52a8\u5220\u9664\u4ed6\u4eec\u3002</p>"},{"location":"user-guide/zh/transport/aws-sqs/#_1","title":"\u914d\u7f6e","text":"<p>\u8981\u4f7f\u7528 AWS SQS \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a</p> <pre><code>Install-Package DotNetCore.CAP.AmazonSQS\n</code></pre> <p>\u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 <code>Startup.cs</code> \u7684 <code>ConfigureServices</code> \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e RabbitMQ \u7684\u914d\u7f6e\u9879\u3002</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n\n    services.AddCap(x =&gt;\n    {\n        x.UseAmazonSQS(opt=&gt;\n        {\n            //AmazonSQSOptions\n        });\n        // x.UseXXX ...\n    });\n}\n</code></pre>"},{"location":"user-guide/zh/transport/aws-sqs/#amazonsqs-options","title":"AmazonSQS Options","text":"<p>CAP \u76f4\u63a5\u5bf9\u5916\u63d0\u4f9b\u7684 AmazonSQSOptions \u914d\u7f6e\u53c2\u6570\u5982\u4e0b\uff1a</p> NAME DESCRIPTION TYPE DEFAULT Region AWS \u6240\u5904\u7684\u533a\u57df Amazon.RegionEndpoint Credentials AWS AK SK\u4fe1\u606f Amazon.Runtime.AWSCredentials <p>\u5982\u679c\u4f60\u7684\u9879\u76ee\u8fd0\u884c\u5728 AWS EC2 \u4e2d\uff0c\u5219\u4e0d\u9700\u8981\u8bbe\u7f6e Credentials\uff0c\u76f4\u63a5\u5bf9 EC2 \u5e94\u7528 IAM \u7b56\u7565\u5373\u53ef\u3002</p> <p>Credentials \u9700\u8981\u5177\u6709\u65b0\u589e\u548c\u8ba2\u9605 SNS Topic\uff0cSQS Queue \u7b49\u6743\u9650\u3002</p>"},{"location":"user-guide/zh/transport/azure-service-bus/","title":"Azure Service Bus","text":"<p>Azure \u670d\u52a1\u603b\u7ebf\u662f\u4e00\u79cd\u591a\u79df\u6237\u4e91\u6d88\u606f\u670d\u52a1\uff0c\u53ef\u7528\u4e8e\u5728\u5e94\u7528\u7a0b\u5e8f\u548c\u670d\u52a1\u4e4b\u95f4\u53d1\u9001\u4fe1\u606f\u3002 \u5f02\u6b65\u64cd\u4f5c\u53ef\u5b9e\u73b0\u7075\u6d3b\u7684\u4e2d\u8f6c\u6d88\u606f\u4f20\u9001\u3001\u7ed3\u6784\u5316\u7684\u5148\u8fdb\u5148\u51fa (FIFO) \u6d88\u606f\u4f20\u9001\u4ee5\u53ca\u53d1\u5e03/\u8ba2\u9605\u529f\u80fd\u3002</p> <p>CAP \u652f\u6301\u4f7f\u7528 Azure Service Bus \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\u3002</p>"},{"location":"user-guide/zh/transport/azure-service-bus/#configuration","title":"Configuration","text":"<p>\u5fc5\u987b\u6761\u4ef6</p> <p>\u9488\u5bf9 Service Bus \u7684\u5b9a\u4ef7, CAP \u8981\u6c42\u4f7f\u7528  \u201c\u6807\u51c6\u201d \u6216\u8005 \u201c\u9ad8\u7ea7\u201d \u4ee5\u652f\u6301 Topic \u529f\u80fd\u3002</p> <p>\u8981\u4f7f\u7528 Azure Service Bus \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a</p> <pre><code>Install-Package DotNetCore.CAP.AzureServiceBus\n</code></pre> <p>\u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 <code>Startup.cs</code> \u7684 <code>ConfigureServices</code> \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e\u5185\u5b58\u7684\u914d\u7f6e\u9879\u3002</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n\n    services.AddCap(x =&gt;\n    {\n        x.UseAzureServiceBus(opt=&gt;\n        {\n            //AzureServiceBusOptions\n        });\n        // x.UseXXX ...\n    });\n}\n</code></pre>"},{"location":"user-guide/zh/transport/azure-service-bus/#azureservicebus-options","title":"AzureServiceBus Options","text":"<p>CAP \u76f4\u63a5\u5bf9\u5916\u63d0\u4f9b\u7684 Azure Service Bus \u914d\u7f6e\u53c2\u6570\u5982\u4e0b\uff1a</p> \u540d\u79f0 \u63cf\u8ff0 \u7c7b\u578b \u9ed8\u8ba4\u503c ConnectionString \u7ec8\u7aef\u5730\u5740 string TopicPath \u4e3b\u9898\u5b9e\u4f53\u8def\u5f84 string cap EnableSessions \u542f\u7528 Service Bus \u4f1a\u8bdd bool false MaxConcurrentSessions \u5904\u7406\u5668\u53ef\u5904\u7406\u7684\u6700\u5927\u5e76\u53d1\u4f1a\u8bdd\u6570\u3002\u5f53 EnableSessions \u4e3a false \u65f6\u4e0d\u9002\u7528\u3002 int 8 SessionIdleTimeout \u5728\u4f1a\u8bdd\u5173\u95ed\u524d\u7b49\u5f85\u65b0\u6d88\u606f\u7684\u6700\u957f\u65f6\u95f4\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0cAzure Service Bus \u5c06\u4f7f\u7528 60 \u79d2\u3002 TimeSpan null SubscriptionAutoDeleteOnIdle \u5728\u7279\u5b9a\u7a7a\u95f2\u95f4\u9694\u540e\u81ea\u52a8\u5220\u9664\u8ba2\u9605\u3002 TimeSpan TimeSpan.MaxValue SubscriptionMessageLockDuration \u7ed9\u5b9a\u63a5\u6536\u5668\u9501\u5b9a\u6d88\u606f\u7684\u65f6\u95f4\uff0c\u4ee5\u9632\u6b62\u5176\u4ed6\u63a5\u6536\u5668\u63a5\u6536\u76f8\u540c\u7684\u6d88\u606f\u3002 TimeSpan 60 \u79d2 SubscriptionDefaultMessageTimeToLive \u8ba2\u9605\u7684\u9ed8\u8ba4\u6d88\u606f\u751f\u5b58\u65f6\u95f4\u503c\u3002\u8fd9\u662f\u6d88\u606f\u5230\u671f\u524d\u7684\u6301\u7eed\u65f6\u95f4\u3002 TimeSpan TimeSpan.MaxValue SubscriptionMaxDeliveryCount \u6d88\u606f\u5728\u88ab\u4f20\u9012\u7ed9\u8ba2\u9605\u540e\u8fdb\u5165\u6b7b\u4fe1\u961f\u5217\u4e4b\u524d\u7684\u6700\u5927\u4f20\u9012\u6b21\u6570\u3002 int 10 MaxAutoLockRenewalDuration \u9501\u81ea\u52a8\u7eed\u8ba2\u7684\u6700\u957f\u6301\u7eed\u65f6\u95f4\u3002\u8be5\u503c\u5e94\u5927\u4e8e\u6700\u957f\u7684\u6d88\u606f\u9501\u5b9a\u6301\u7eed\u65f6\u95f4\u3002 TimeSpan 5 \u5206\u949f ManagementTokenProvider \u4ee4\u724c\u63d0\u4f9b\u7a0b\u5e8f ITokenProvider null AutoCompleteMessages \u83b7\u53d6\u4e00\u4e2a\u503c\uff0c\u8be5\u503c\u6307\u793a\u5728\u6d88\u606f\u5904\u7406\u7a0b\u5e8f\u5b8c\u6210\u5904\u7406\u540e\uff0c\u5904\u7406\u5668\u662f\u5426\u5e94\u81ea\u52a8\u5b8c\u6210\u6d88\u606f\u3002 bool false CustomHeadersBuilder \u4e3a\u6765\u81ea\u5f02\u6784\u7cfb\u7edf\u7684\u4f20\u5165\u6d88\u606f\u6dfb\u52a0\u81ea\u5b9a\u4e49\u548c/\u6216\u5f3a\u5236\u6027\u6807\u5934\u3002 <code>Func&lt;Message, IServiceProvider, List&lt;KeyValuePair&lt;string, string&gt;&gt;&gt;?</code> null Namespace Servicebus \u7684\u547d\u540d\u7a7a\u95f4\uff0c\u5728\u4f7f\u7528 TokenCredential \u5c5e\u6027\u65f6\u9700\u8981\u8bbe\u7f6e\u3002 string null DefaultCorrelationHeaders \u5c06\u9644\u52a0\u7684\u5173\u8054\u5c5e\u6027\u6dfb\u52a0\u5230\u6240\u6709 \u5173\u8054\u7b5b\u9009\u5668\u3002 IDictionary Dictionary.Empty SQLFilters \u5728\u4e3b\u9898\u8ba2\u9605\u4e0a\u6309\u540d\u79f0\u548c\u8868\u8fbe\u5f0f\u5b9a\u4e49\u7684\u81ea\u5b9a\u4e49 SQL \u7b5b\u9009\u5668\u3002 List&gt; null"},{"location":"user-guide/zh/transport/azure-service-bus/#sessions","title":"Sessions","text":"<p>\u5f53\u4f7f\u7528 <code>EnableSessions</code> \u9009\u9879\u542f\u7528 sessions \u540e\uff0c\u6bcf\u4e2a\u53d1\u9001\u7684\u6d88\u606f\u90fd\u4f1a\u5177\u6709\u4e00\u4e2a session id\u3002 \u8981\u63a7\u5236 seesion id \u4f60\u53ef\u4ee5\u5728\u53d1\u9001\u6d88\u606f\u65f6\u5728\u6d88\u606f\u5934\u4e2d\u4f7f\u7528 <code>AzureServiceBusHeaders.SessionId</code> \u643a\u5e26\u5b83\u3002</p> <pre><code>ICapPublisher capBus = ...;\nstring yourEventName = ...;\nYourEventType yourEvent = ...;\n\nDictionary&lt;string, string&gt; extraHeaders = new Dictionary&lt;string, string&gt;();\nextraHeaders.Add(AzureServiceBusHeaders.SessionId, &lt;your-session-id&gt;);\n\ncapBus.Publish(yourEventName, yourEvent, extraHeaders);\n</code></pre> <p>\u5982\u679c\u5934\u4e2d\u6ca1\u6709 session id , \u90a3\u4e48\u6d88\u606f Id \u4ecd\u7136\u4f7f\u7528\u7684 Message Id.</p>"},{"location":"user-guide/zh/transport/azure-service-bus/#heterogeneous-systems","title":"Heterogeneous Systems","text":"<p>\u6709\u65f6\u60a8\u53ef\u80fd\u60f3\u63a5\u6536\u7531\u5916\u90e8\u7cfb\u7edf\u53d1\u5e03\u7684\u6d88\u606f\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u9700\u8981\u6dfb\u52a0\u4e00\u7ec4\u4e24\u4e2a\u5f3a\u5236\u6807\u5934\u4ee5\u5b9e\u73b0 CAP \u517c\u5bb9\u6027\uff0c\u5982\u4e0b\u6240\u793a\u3002</p> <pre><code>c.UseAzureServiceBus(asb =&gt;\n{\n    asb.ConnectionString = ...\n    asb.CustomHeadersBuilder = (msg, sp) =&gt;\n    [\n        new(DotNetCore.CAP.Messages.Headers.MessageId, sp.GetRequiredService&lt;ISnowflakeId&gt;().NextId().ToString()),\n        new(DotNetCore.CAP.Messages.Headers.MessageName, msg.RoutingKey)\n    ];\n});\n</code></pre> <p>\u91cd\u8981\u63d0\u793a\uff1a\u5982\u679c\u6d88\u606f\u4e2d\u5df2\u5b58\u5728\u540c\u540d\uff08Key\uff09\u7684\u6807\u5934\uff0c\u5219\u4e0d\u4f1a\u6dfb\u52a0\u81ea\u5b9a\u4e49\u6807\u5934\u3002 </p>"},{"location":"user-guide/zh/transport/general/","title":"\u8fd0\u8f93\u5668","text":"<p>\u901a\u8fc7\u8fd0\u8f93\u5c06\u6570\u636e\u4ece\u4e00\u4e2a\u5730\u65b9\u79fb\u52a8\u5230\u53e6\u4e00\u4e2a\u5730\u65b9-\u5728\u91c7\u96c6\u7a0b\u5e8f\u548c\u7ba1\u9053\u4e4b\u95f4\uff0c\u7ba1\u9053\u4e0e\u5b9e\u4f53\u6570\u636e\u5e93\u4e4b\u95f4\uff0c\u751a\u81f3\u5728\u7ba1\u9053\u4e0e\u5916\u90e8\u7cfb\u7edf\u4e4b\u95f4\u3002</p>"},{"location":"user-guide/zh/transport/general/#_2","title":"\u652f\u6301\u7684\u8fd0\u8f93\u5668","text":"<p>CAP \u652f\u6301\u4ee5\u4e0b\u51e0\u79cd\u8fd0\u8f93\u65b9\u5f0f\uff1a</p> <ul> <li>RabbitMQ</li> <li>Kafka</li> <li>Azure Service Bus</li> <li>Amazon SQS</li> <li>NATS</li> <li>In-Memory Queue</li> <li>Redis Streams</li> <li>Apache Pulsar</li> </ul>"},{"location":"user-guide/zh/transport/general/#_3","title":"\u600e\u4e48\u9009\u62e9\u8fd0\u8f93\u5668","text":"\ud83c\udff3\u200d\ud83c\udf08 RabbitMQ Kafka Azure Service Bus In-Memory \u5b9a\u4f4d \u53ef\u9760\u6d88\u606f\u4f20\u8f93 \u5b9e\u65f6\u6570\u636e\u5904\u7406 \u4e91 \u5185\u5b58\u578b\uff0c\u6d4b\u8bd5 \u5206\u5e03\u5f0f \u2714 \u2714 \u2714 \u274c \u6301\u4e45\u5316 \u2714 \u2714 \u2714 \u274c \u6027\u80fd Medium High Medium High <p><code>Azure Service Bus</code> vs <code>RabbitMQ</code> : http://geekswithblogs.net/michaelstephenson/archive/2012/08/12/150399.aspx</p> <p><code>Kafka</code> vs <code>RabbitMQ</code> :  https://stackoverflow.com/questions/42151544/is-there-any-reason-to-use-rabbitmq-over-kafka</p>"},{"location":"user-guide/zh/transport/general/#_4","title":"\u793e\u533a\u652f\u6301\u7684\u8fd0\u8f93\u5668","text":"<p>\u611f\u8c22\u793e\u533a\u5bf9CAP\u7684\u652f\u6301\uff0c\u4ee5\u4e0b\u662f\u793e\u533a\u652f\u6301\u7684\u8fd0\u8f93\u5668\u5b9e\u73b0</p> <ul> <li> <p>ActiveMQ (@Lukas Zhang): https://github.com/lukazh</p> </li> <li> <p>RedisMQ (@\u6728\u6728): https://github.com/difudotnet/CAP.RedisMQ.Extensions</p> </li> <li> <p>ZeroMQ (@maikebing): https://github.com/maikebing/CAP.Extensions/tree/master/src/DotNetCore.CAP.ZeroMQ</p> </li> <li> <p>MQTT (@john jiang): https://github.com/jinzaz/jinzaz.CAP.MQTT</p> </li> </ul>"},{"location":"user-guide/zh/transport/in-memory-queue/","title":"In-Memory Queue","text":"<p>In Memory Queue \u4e3a\u57fa\u4e8e\u5185\u5b58\u7684\u6d88\u606f\u961f\u5217\uff0c\u8be5\u6269\u5c55\u7531 \u793e\u533a \u8fdb\u884c\u63d0\u4f9b\u3002</p>"},{"location":"user-guide/zh/transport/in-memory-queue/#_1","title":"\u914d\u7f6e","text":"<p>\u8981\u4f7f\u7528 In Memory Queue \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a</p> <pre><code>Install-Package Savorboard.CAP.InMemoryMessageQueue\n</code></pre> <p>\u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 <code>Startup.cs</code> \u7684 <code>ConfigureServices</code> \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e\u5185\u5b58\u7684\u914d\u7f6e\u9879\u3002</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n\n    services.AddCap(x =&gt;\n    {\n        x.UseInMemoryMessageQueue();\n        // x.UseXXX ...\n    });\n}\n</code></pre>"},{"location":"user-guide/zh/transport/kafka/","title":"Apache Kafka\u00ae","text":"<p>Apache Kafka\u00ae \u662f\u4e00\u4e2a\u5f00\u6e90\u6d41\u5904\u7406\u8f6f\u4ef6\u5e73\u53f0\uff0c\u7531 LinkedIn \u5f00\u53d1\u5e76\u6350\u8d60\u7ed9 Apache Software Foundation\uff0c\u7528 Scala \u548c Java \u7f16\u5199\u3002</p> <p>CAP \u652f\u6301\u4f7f\u7528 Apache Kafka\u00ae \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\u3002</p>"},{"location":"user-guide/zh/transport/kafka/#configuration","title":"Configuration","text":"<p>\u8981\u4f7f\u7528 Kafka \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a</p> <pre><code>Install-Package DotNetCore.CAP.Kafka\n</code></pre> <p>\u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 <code>Startup.cs</code> \u7684 <code>ConfigureServices</code> \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e Kafka \u7684\u914d\u7f6e\u9879\u3002</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n\n    services.AddCap(x =&gt;\n    {\n        x.UseKafka(opt=&gt;{\n            //KafkaOptions\n        });\n        // x.UseXXX ...\n    });\n}\n</code></pre>"},{"location":"user-guide/zh/transport/kafka/#kafka-options","title":"Kafka Options","text":"<p>CAP \u76f4\u63a5\u5bf9\u5916\u63d0\u4f9b\u7684 Kafka \u914d\u7f6e\u53c2\u6570\u5982\u4e0b\uff1a</p> NAME DESCRIPTION TYPE DEFAULT Servers Broker \u5730\u5740 string MainConfig librdkafka \u7684\u914d\u7f6e\u53c2\u6570 Dictionary \u89c1\u4e0b ConnectionPoolSize \u7528\u6237\u540d int 10 CustomHeadersBuilder \u8bbe\u7f6e\u81ea\u5b9a\u4e49\u5934 Function \u89c1\u4e0b RetriableErrorCodes ConsumeException \u5f02\u5e38\u65f6\u7684\u91cd\u8bd5\u9519\u8bef\u7801\u96c6\u5408 IList \u89c1\u4ee3\u7801 TopicOptions \u914d\u7f6e NumPartitions \u548c ReplicationFactor KafkaTopicOptions -1"},{"location":"user-guide/zh/transport/kafka/#kafka-mainconfig-options","title":"Kafka MainConfig Options","text":"<p>\u5982\u679c\u4f60\u9700\u8981 \u66f4\u591a \u539f\u751f Kakfa \u76f8\u5173\u7684\u914d\u7f6e\u9879\uff0c\u53ef\u4ee5\u901a\u8fc7 <code>MainConfig</code> \u914d\u7f6e\u9879\u8fdb\u884c\u8bbe\u5b9a\uff1a</p> <pre><code>services.AddCap(capOptions =&gt; \n{\n    capOptions.UseKafka(kafkaOption=&gt;\n    {\n        // kafka options.\n        // kafkaOptions.MainConfig.Add(\"\", \"\");\n    });\n});\n</code></pre> <p>MainConfig \u4e3a\u914d\u7f6e\u5b57\u5178\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u94fe\u63a5\u627e\u5230\u5176\u652f\u6301\u7684\u914d\u7f6e\u9879\u5217\u8868\u3002</p> <p>https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md</p> <p>\u8981\u7981\u6b62 CAP \u81ea\u52a8\u521b\u5efa\u4e3b\u9898\uff0c\u53ef\u4ee5\u5173\u95ed\u8be5\u529f\u80fd\uff1a</p> <pre><code>services.AddCap(capOptions =&gt;\n{\n    capOptions.UseKafka(kafkaOption =&gt;\n    {\n        kafkaOption.MainConfig.Add(\"allow.auto.create.topics\", \"false\");\n    });\n});\n</code></pre>"},{"location":"user-guide/zh/transport/kafka/#customheadersbuilder-options","title":"CustomHeadersBuilder Options","text":"<p>\u6709\u5173 <code>CustomHeadersBuilder</code> \u7684\u8bf4\u660e\uff1a</p> <p>\u5982\u679c\u4f60\u60f3\u5728\u6d88\u8d39\u6d88\u606f\u7684\u65f6\u5019\uff0c\u901a\u8fc7\u4ece <code>CapHeader</code> \u83b7\u53d6 Kafka \u4e2d\u4f8b\u5982 Offset \u6216\u8005 Partition \u7b49\u4fe1\u606f\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u81ea\u5b9a\u4e49\u6b64\u51fd\u6570\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002</p> <p>\u4f8b\u5982\u4ee5\u4e0b\u4ee3\u7801\u4e3a\u4f60\u5c55\u793a\u4e86\u5982\u4f55\u8fdb\u884c\u8bbe\u7f6e\u989d\u5916\u7684\u53c2\u6570\u5230 <code>CapHeader</code> \u4e2d:</p> <pre><code>x.UseKafka(opt =&gt;\n{\n    //...\n\n    opt.CustomHeadersBuilder = (kafkaResult,sp) =&gt; new List&lt;KeyValuePair&lt;string, string&gt;&gt;\n    {\n        new KeyValuePair&lt;string, string&gt;(\"my.kafka.offset\", kafkaResult.Offset.ToString()),\n        new KeyValuePair&lt;string, string&gt;(\"my.kafka.partition\", kafkaResult.Partition.ToString())\n    };\n});\n</code></pre> <p>\u7136\u540e\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u65b9\u5f0f\u6765\u83b7\u53d6\u4f60\u6dfb\u52a0\u7684\u5934\u4fe1\u606f:</p> <pre><code>[CapSubscribe(\"sample.kafka.postgrsql\")]\npublic void HeadersTest(DateTime value, [FromCap]CapHeader header)\n{\n    var offset = header[\"my.kafka.offset\"];\n    var partition = header[\"my.kafka.partition\"];\n}\n</code></pre>"},{"location":"user-guide/zh/transport/nats/","title":"NATS","text":"<p>NATS\u662f\u4e00\u4e2a\u7b80\u5355\u3001\u5b89\u5168\u3001\u9ad8\u6027\u80fd\u7684\u6570\u5b57\u7cfb\u7edf\u3001\u670d\u52a1\u548c\u8bbe\u5907\u901a\u4fe1\u7cfb\u7edf\u3002NATS \u662f CNCF \u7684\u4e00\u90e8\u5206\u3002</p> <p>Warning</p> <p>\u81ea CAP 5.2+ \u7684\u7248\u672c\u5df2\u7ecf\u57fa\u4e8e JetStream \u5b9e\u73b0\u76f8\u5173\u529f\u80fd\uff0c\u6240\u4ee5\u9700\u8981\u5728\u670d\u52a1\u7aef\u663e\u5f0f\u542f\u7528\u3002</p> <p>\u4f60\u9700\u8981\u5728 NATS Server \u542f\u52a8\u65f6\u5019\u6307\u5b9a <code>--jetstream</code> \u53c2\u6570\u6765\u542f\u7528 JetSteram \u76f8\u5173\u529f\u80fd\uff0c\u624d\u80fd\u6b63\u5e38\u4f7f\u7528CAP.</p>"},{"location":"user-guide/zh/transport/nats/#_1","title":"\u914d\u7f6e","text":"<p>\u8981\u4f7f\u7528NATS \u4f20\u8f93\u5668\uff0c\u4f60\u9700\u8981\u5b89\u88c5\u4e0b\u9762\u7684NuGet\u5305\uff1a</p> <pre><code>PM&gt; Install-Package DotNetCore.CAP.NATS\n</code></pre> <p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728 <code>Startup.cs</code> \u6587\u4ef6\u4e2d\u914d\u7f6e <code>ConfigureServices</code> \u6765\u6dfb\u52a0\u914d\u7f6e\uff1a</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    services.AddCap(capOptions =&gt;\n    {\n        capOptions.UseNATS(natsOptions=&gt;{\n            //NATS Options\n        });\n    });\n}\n</code></pre>"},{"location":"user-guide/zh/transport/nats/#nats_1","title":"NATS \u914d\u7f6e","text":"<p>CAP \u76f4\u63a5\u63d0\u4f9b\u7684\u5173\u4e8e NATS \u7684\u914d\u7f6e\u53c2\u6570\uff1a</p> NAME DESCRIPTION TYPE DEFAULT Options NATS \u5ba2\u6237\u7aef\u914d\u7f6e Options Options Servers \u670d\u52a1\u5668Urls\u5730\u5740 string NULL ConnectionPoolSize \u8fde\u63a5\u6c60\u6570\u91cf uint 10 DeliverPolicy \u6d88\u8d39\u6d88\u606f\u7684\u7b56\u7565\u70b9\uff08\u26a0\ufe0f\u57288.1.0\u7248\u672c\u79fb\u9664\uff0c\u4f7f\u7528<code>ConsumerOptions</code>\u66ff\u4ee3\u3002\uff09 enum DeliverPolicy.New StreamOptions \ud83c\udd95 Stream \u914d\u7f6e\u9879 Action NULL ConsumerOptions \ud83c\udd95 Consumer \u914d\u7f6e\u9879 Action NULL CustomHeadersBuilder \u8ba2\u9605\u8005\u81ea\u5b9a\u4e49\u5934\u4fe1\u606f \u89c1\u4e0b\u6587 N/A"},{"location":"user-guide/zh/transport/nats/#nats-configurationoptions","title":"NATS ConfigurationOptions","text":"<p>\u5982\u679c\u4f60\u9700\u8981 \u66f4\u591a \u539f\u751f\u76f8\u5173\u7684\u914d\u7f6e\u9879\uff0c\u53ef\u4ee5\u901a\u8fc7 <code>Options</code> \u914d\u7f6e\u9879\u8fdb\u884c\u8bbe\u5b9a\uff1a</p> <pre><code>services.AddCap(capOptions =&gt; \n{\n    capOptions.UseNATS(natsOptions=&gt;\n    {\n        // NATS options.\n        natsOptions.Options.Url=\"\";\n    });\n});\n</code></pre> <p><code>Options</code> \u662f NATS.Client \u5ba2\u6237\u7aef\u63d0\u4f9b\u7684\u914d\u7f6e\uff0c \u4f60\u53ef\u4ee5\u5728\u8fd9\u4e2a\u94fe\u63a5\u627e\u5230\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u3002</p>"},{"location":"user-guide/zh/transport/nats/#customheadersbuilder-option","title":"CustomHeadersBuilder Option","text":"<p>\u5f53\u9700\u8981\u4ece\u5f02\u6784\u7cfb\u7edf\u6216\u8005\u76f4\u63a5\u63a5\u6536\u4ece NATS JetStream \u53d1\u9001\u7684\u6d88\u606f\u65f6\uff0c\u7531\u4e8e CAP \u9700\u8981\u5b9a\u4e49\u989d\u5916\u7684\u5934\u4fe1\u606f\u624d\u80fd\u6b63\u5e38\u8ba2\u9605\uff0c\u6240\u4ee5\u6b64\u65f6\u4f1a\u51fa\u73b0\u5f02\u5e38\u3002\u901a\u8fc7\u63d0\u4f9b\u6b64\u53c2\u6570\u6765\u8fdb\u884c\u81ea\u5b9a\u4e49\u5934\u4fe1\u606f\u7684\u8bbe\u7f6e\u6765\u4f7f\u8ba2\u9605\u8005\u6b63\u5e38\u5de5\u4f5c\u3002</p> <p>\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u6709\u5173 \u5934\u4fe1\u606f \u7684\u8bf4\u660e\u3002</p> <p>\u7528\u6cd5\u5982\u4e0b\uff1a</p> <pre><code>x.UseNATS(aa =&gt;\n{\n    aa.CustomHeadersBuilder = (e, sp) =&gt;\n    [\n        new(DotNetCore.CAP.Messages.Headers.MessageId, sp.GetRequiredService&lt;ISnowflakeId&gt;().NextId().ToString()),\n        new(DotNetCore.CAP.Messages.Headers.MessageName, e.Message.Subject)\n    ];\n});\n</code></pre>"},{"location":"user-guide/zh/transport/pulsar/","title":"Apache Pulsar","text":"<p>Apache Pulsar \u662f\u4e00\u4e2a\u7528\u4e8e\u670d\u52a1\u5668\u5230\u670d\u52a1\u5668\u7684\u6d88\u606f\u7cfb\u7edf\uff0c\u5177\u6709\u591a\u79df\u6237\u3001\u9ad8\u6027\u80fd\u7b49\u4f18\u52bf\u3002 Pulsar \u6700\u521d\u7531 Yahoo \u5f00\u53d1\uff0c\u76ee\u524d\u7531 Apache \u8f6f\u4ef6\u57fa\u91d1\u4f1a\u7ba1\u7406\u3002</p> <p>CAP \u652f\u6301\u4f7f\u7528 Apache Pulsar \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\u3002</p>"},{"location":"user-guide/zh/transport/pulsar/#configuration","title":"Configuration","text":"<p>\u8981\u4f7f\u7528 Pulsar \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a</p> <pre><code>Install-Package DotNetCore.CAP.Pulsar\n</code></pre> <p>\u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 <code>Startup.cs</code> \u7684 <code>ConfigureServices</code> \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e Pulsar \u7684\u914d\u7f6e\u9879\u3002</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n\n    services.AddCap(x =&gt;\n    {\n        x.UsePulsar(opt =&gt; {\n            //Pulsar Options\n        });\n        // x.UseXXX ...\n    });\n}\n</code></pre>"},{"location":"user-guide/zh/transport/pulsar/#pulsar-options","title":"Pulsar Options","text":"<p>CAP \u76f4\u63a5\u5bf9\u5916\u63d0\u4f9b\u7684 Pulsar \u914d\u7f6e\u53c2\u6570\u5982\u4e0b\uff1a</p> NAME DESCRIPTION TYPE DEFAULT ServiceUrl Broker \u5730\u5740 string TlsOptions TLS \u914d\u7f6e\u9879 object"},{"location":"user-guide/zh/transport/rabbitmq/","title":"RabbitMQ","text":"<p>RabbitMQ\u662f\u5b9e\u73b0\u4e86\u9ad8\u7ea7\u6d88\u606f\u961f\u5217\u534f\u8bae\uff08AMQP\uff09\u7684\u5f00\u6e90\u6d88\u606f\u4ee3\u7406\u8f6f\u4ef6\uff08\u4ea6\u79f0\u9762\u5411\u6d88\u606f\u7684\u4e2d\u95f4\u4ef6\uff09\u3002RabbitMQ \u670d\u52a1\u5668\u662f\u7528 Erlang \u8bed\u8a00\u7f16\u5199\u7684\uff0c\u800c\u805a\u7c7b\u548c\u6545\u969c\u8f6c\u79fb\u662f\u6784\u5efa\u5728\u5f00\u6e90\u7684\u901a\u8baf\u5e73\u53f0\u6846\u67b6\u4e0a\u7684\u3002\u6240\u6709\u4e3b\u8981\u7684\u7f16\u7a0b\u8bed\u8a00\u5747\u6709\u4e0e\u4ee3\u7406\u63a5\u53e3\u901a\u8baf\u7684\u5ba2\u6237\u7aef\u5e93\u3002</p> <p>CAP \u652f\u6301\u4f7f\u7528 RabbitMQ \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\u3002</p> <p>\u6ce8\u610f\u4e8b\u9879</p> <p>\u5728\u4f7f\u7528RabbitMQ\u65f6\uff0c\u96c6\u6210\u4e86CAP\u7684\u6d88\u8d39\u8005\u5e94\u7528\u5728\u542f\u52a8\u8fc7\u4e00\u6b21\u540e\u4f1a\u81ea\u52a8\u521b\u5efa\u6301\u4e45\u5316\u7684\u961f\u5217\uff0c\u540e\u7eed\u6d88\u606f\u4f1a\u6b63\u5e38\u4f20\u9012\u5230\u961f\u5217\u4e2d\u5e76\u6d88\u8d39\u3002 \u5982\u679c\u4f60\u4ece\u6765\u6ca1\u6709\u542f\u52a8\u8fc7\u6d88\u8d39\u8005\uff0c\u5219\u961f\u5217\u4e0d\u4f1a\u88ab\u81ea\u52a8\u521b\u5efa\uff0c\u6b64\u65f6\u5982\u679c\u5148\u884c\u53d1\u5e03\u6d88\u606f\uff0c\u5728\u6b64\u65f6\u95f4\u6bb5\u7684\u6d88\u606f RabbitMQ Exchange \u6536\u5230\u540e\u4f1a\u76f4\u63a5\u4e22\u5f03\u3002</p>"},{"location":"user-guide/zh/transport/rabbitmq/#_1","title":"\u914d\u7f6e","text":"<p>\u8981\u4f7f\u7528 RabbitMQ \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a</p> <pre><code>Install-Package DotNetCore.CAP.RabbitMQ\n</code></pre> <p>\u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 <code>Startup.cs</code> \u7684 <code>ConfigureServices</code> \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e RabbitMQ \u7684\u914d\u7f6e\u9879\u3002</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    // ...\n\n    services.AddCap(x =&gt;\n    {\n        x.UseRabbitMQ(opt=&gt;\n        {\n            //RabbitMQOptions\n        });\n        // x.UseXXX ...\n    });\n}\n</code></pre>"},{"location":"user-guide/zh/transport/rabbitmq/#rabbitmq-options","title":"RabbitMQ Options","text":"<p>CAP \u76f4\u63a5\u5bf9\u5916\u63d0\u4f9b\u7684 RabbitMQ \u914d\u7f6e\u53c2\u6570\u5982\u4e0b\uff1a</p> \u914d\u7f6e\u9879 \u63cf\u8ff0 \u7c7b\u578b \u9ed8\u8ba4\u503c HostName \u5bbf\u4e3b\u5730\u5740\uff0c\u5982\u679c\u8981\u914d\u7f6e\u96c6\u7fa4\u53ef\u4ee5\u4f7f\u7528\u9017\u53f7\u5206\u9694\uff0c\u4f8b\u5982 <code>192.168.1.111,192.168.1.112</code> string localhost UserName \u7528\u6237\u540d string guest Password \u5bc6\u7801 string guest VirtualHost \u865a\u62df\u4e3b\u673a string / Port \u7aef\u53e3\u53f7 int -1 ExchangeName CAP\u9ed8\u8ba4Exchange\u540d\u79f0 string cap.default.topic QueueArguments \u961f\u5217\u989d\u5916\u53c2\u6570 x-arguments QueueArgumentsOptions N/A QueueOptions \u66f4\u6539\u5df2\u521b\u5efa\u961f\u5217\u7684\u9009\u9879 QueueRabbitOptions { Durable=true, Exclusive=false, AutoDelete=false } ConnectionFactoryOptions RabbitMQClient\u539f\u751f\u53c2\u6570 ConnectionFactory N/A CustomHeadersBuilder \u8ba2\u9605\u8005\u81ea\u5b9a\u4e49\u5934\u4fe1\u606f \u89c1\u4e0b\u6587 N/A PublishConfirms \u662f\u5426\u542f\u7528\u53d1\u5e03\u786e\u8ba4 bool false BasicQosOptions \u6307\u5b9a\u6d88\u8d39\u7684Qos BasicQos N/A"},{"location":"user-guide/zh/transport/rabbitmq/#connectionfactory-option","title":"ConnectionFactory Option","text":"<p>\u5982\u679c\u4f60\u9700\u8981 \u66f4\u591a \u539f\u751f <code>ConnectionFactory</code> \u76f8\u5173\u7684\u914d\u7f6e\u9879\uff0c\u53ef\u4ee5\u901a\u8fc7 <code>ConnectionFactoryOptions</code> \u914d\u7f6e\u9879\u8fdb\u884c\u8bbe\u5b9a\uff1a</p> <pre><code>services.AddCap(x =&gt;\n{\n    x.UseRabbitMQ(o =&gt;\n    {\n        o.HostName = \"localhost\";\n        o.ConnectionFactoryOptions = opt =&gt; { \n            //rabbitmq client ConnectionFactory config\n        };\n    });\n});\n</code></pre>"},{"location":"user-guide/zh/transport/rabbitmq/#customheadersbuilder-option","title":"CustomHeadersBuilder Option","text":"<p>\u5f53\u9700\u8981\u4ece\u5f02\u6784\u7cfb\u7edf\u6216\u8005\u76f4\u63a5\u63a5\u6536\u4eceRabbitMQ \u63a7\u5236\u53f0\u53d1\u9001\u7684\u6d88\u606f\u65f6\uff0c\u7531\u4e8e CAP \u9700\u8981\u5b9a\u4e49\u989d\u5916\u7684\u5934\u4fe1\u606f\u624d\u80fd\u6b63\u5e38\u8ba2\u9605\uff0c\u6240\u4ee5\u6b64\u65f6\u4f1a\u51fa\u73b0\u5f02\u5e38\u3002\u901a\u8fc7\u63d0\u4f9b\u6b64\u53c2\u6570\u6765\u8fdb\u884c\u81ea\u5b9a\u4e49\u5934\u4fe1\u606f\u7684\u8bbe\u7f6e\u6765\u4f7f\u8ba2\u9605\u8005\u6b63\u5e38\u5de5\u4f5c\u3002</p> <p>\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u6709\u5173 \u5934\u4fe1\u606f \u7684\u8bf4\u660e\u3002</p> <p>\u7528\u6cd5\u5982\u4e0b\uff1a</p> <pre><code>x.UseRabbitMQ(aa =&gt;\n{\n    aa.CustomHeadersBuilder = (msg, sp) =&gt;\n    [\n        new(DotNetCore.CAP.Messages.Headers.MessageId, sp.GetRequiredService&lt;ISnowflakeId&gt;().NextId().ToString()),\n        new(DotNetCore.CAP.Messages.Headers.MessageName, msg.RoutingKey)\n    ];\n});\n</code></pre>"},{"location":"user-guide/zh/transport/rabbitmq/#rabbitmq_1","title":"\u5982\u4f55\u8fde\u63a5 RabbitMQ \u96c6\u7fa4\uff1f","text":"<p>\u4f7f\u7528\u9017\u53f7\u5206\u9694\u8fde\u63a5\u5b57\u7b26\u4e32\u5373\u53ef\uff0c\u5982\u4e0b\uff1a</p> <pre><code>x=&gt; x.UseRabbitMQ(\"localhost:5672,localhost:5673,localhost:5674\")\n</code></pre>"},{"location":"user-guide/zh/transport/redis-streams/","title":"Redis Streams","text":"<p>Redis \u662f\u4e00\u4e2a\u5f00\u6e90\uff08BSD\u8bb8\u53ef\uff09\u7684\uff0c\u5185\u5b58\u4e2d\u7684\u6570\u636e\u7ed3\u6784\u5b58\u50a8\u7cfb\u7edf\uff0c\u5b83\u53ef\u4ee5\u7528\u4f5c\u6570\u636e\u5e93\u3001\u7f13\u5b58\u548c\u6d88\u606f\u4e2d\u95f4\u4ef6\u3002</p> <p>Redis Stream \u662f Redis 5.0 \u5f15\u5165\u7684\u4e00\u79cd\u65b0\u6570\u636e\u7c7b\u578b\uff0c\u5b83\u7528\u4e00\u79cd\u4ec5\u9644\u52a0\u7684\u6570\u636e\u7ed3\u6784\u4ee5\u66f4\u62bd\u8c61\u7684\u65b9\u5f0f\u6a21\u62df\u65e5\u5fd7\u6570\u636e\u7ed3\u6784\u3002</p> <p>Redis Streams \u53ef\u4ee5\u5728 CAP \u4e2d\u7528\u4f5c\u6d88\u606f\u4f20\u8f93\u5668\u3002 </p>"},{"location":"user-guide/zh/transport/redis-streams/#_1","title":"\u914d\u7f6e","text":"<p>\u8981\u4f7f\u7528 Redis Streams \u4f20\u8f93\u5668\uff0c\u60a8\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u5305\uff1a</p> <pre><code>PM&gt; Install-Package DotNetCore.CAP.RedisStreams\n</code></pre> <p>\u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u5728 <code>Startup.cs</code> \u7684 <code>ConfigureServices</code> \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e Redis Stream \u7684\u914d\u7f6e\u9879\u3002 </p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    services.AddCap(capOptions =&gt;\n    {\n        capOptions.UseRedis(redisOptions=&gt;{\n            //redisOptions\n        });\n    });\n}\n</code></pre>"},{"location":"user-guide/zh/transport/redis-streams/#redis-streams-options","title":"Redis Streams Options","text":"<p>CAP \u76f4\u63a5\u5bf9\u5916\u63d0\u4f9b\u7684 Redis Stream \u914d\u7f6e\u53c2\u6570\u5982\u4e0b\uff1a</p> NAME DESCRIPTION TYPE DEFAULT Configuration redis\u8fde\u63a5\u914d\u7f6e (StackExchange.Redis) ConfigurationOptions ConfigurationOptions StreamEntriesCount \u8bfb\u53d6\u65f6\u4ece stream \u8fd4\u56de\u7684\u6761\u76ee\u6570 uint 10 ConnectionPoolSize \u8fde\u63a5\u6c60\u6570 uint 10"},{"location":"user-guide/zh/transport/redis-streams/#redis-configuration-options","title":"Redis Configuration Options","text":"<p>\u5982\u679c\u9700\u8981**\u66f4\u591a**\u539f\u751fRedis\u76f8\u5173\u914d\u7f6e\u9009\u9879\uff0c\u60a8\u53ef\u4ee5\u5728 <code>Configuration</code> \u9009\u9879\u4e2d\u8fdb\u884c\u8bbe\u7f6e :</p> <pre><code>services.AddCap(capOptions =&gt; \n{\n    capOptions.UseRedis(redisOptions=&gt;\n    {\n        // redis options.\n        redisOptions.Configuration.EndPoints.Add(IPAddress.Loopback, 0);\n    });\n});\n</code></pre> <p><code>Configuration</code> \u662f StackExchange.Redis ConfigurationOptions \uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u6b64\u94fe\u63a5\u627e\u5230\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u3002</p>"},{"location":"user-guide/zh/transport/redis-streams/#_2","title":"\u6d41\u6e05\u7406\u6ce8\u610f\u4e8b\u9879","text":"<p>\u7531\u4e8eredis streams \u6ca1\u6709\u81ea\u52a8\u5220\u9664\u6240\u6709\u5df2\u7ecf\u88ab\u6240\u6709\u7ec4\u786e\u8ba4\u7684\u6d88\u606f\u7684\u7279\u6027issue\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u8003\u8651\u662f\u5426\u4f7f\u7528\u811a\u672c\u6765\u6267\u884c\u5b9a\u671f\u5220\u9664\u3002</p>"}]}